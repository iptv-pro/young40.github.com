#+TITLE: Unity Shader入门精要笔记 二
#+DATE: 2020-11-25T16:31:39+08:00
#+TAGS[]: Unity Shader
#+CATEGORIES[]: UnityShader入门精要
#+LAYOUT: post
#+OPTIONS: toc:nil
#+DRAFT: true

本章介绍渲染管线.

* 原料与目标
在开始渲染之前, 我们拥有的原料是诸如纹理, 模型, 光照之类. 我们渲染的目标是一副屏幕大小的图像.

* 三大阶段
沿用《Real-Rendering》(第三版)的概念, 把渲染管线分为三个阶段:
- 应用阶段(Application Stage)
- 几何阶段(Geometry Stage)
- 光栅化阶段(Rasterizer Stage)
这些阶段是概念性的, 每个阶段也包含了子阶段.

# more

* 应用阶段(Application Stage)
应用阶段需要我们准备好场景数据, 例如摄像机位置, 各个模型, 光源等信息. 为了提高后续阶段的性能, 一般还需要
在应用阶段做剔除(Culling)操作, 预先将不可见物体剔除. 然后还需要设置好每个模型的渲染状态, 使用的纹理,
使用的Shader. 我们使用Unity编辑器和脚本完成设置, Unity会将准备好的数据(渲染图元)交给下一阶段.
- 将数据加载到显存
- 设置渲染状态
- 调用DrawCall

* 几何阶段(Geometry Stage)
几何阶段多再GPU上处理, 和渲染图元打交道, 进行逐顶点, 逐多边形操作.
细分子阶段:
- 顶点着色器(完全可编程)
- 曲面细分着色器(完全可编程)
- 几何着色器(完全可编程)
- 裁剪(仅可配置)
- 屏幕映射(固定函数阶段, 无法编程或配置)

* 光栅化阶段(Rasterizer Stage)
光栅化阶段也在GPU上处理, 并渲染出最终图像, 生成屏幕上的每个像素.
- 三角形设置(固定函数阶段, 无法编程或配置)
- 三角形遍历(固定函数阶段, 无法编程或配置)
- 片元着色器(完全可编程)
- 逐片元操作(仅可配置)

* 几何阶段&光栅化阶段流程图
#+caption: GPU渲染流水线
[[file:/upload/Unity-Shader-rumen-jingyao-001.png]]
- 绿色代表完全可编程,
- 黄色代码仅可配置,
- 蓝色代表固定函数阶段无法编程或配置

* 顶点着色器
每个顶点运行一次顶点着色器, 
