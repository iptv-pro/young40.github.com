#+TITLE: UGUI源码分析(一): Image的渲染
#+TITLE: 
#+HUGO_TAGS: Unity UGUI
#+HUGO_CATEGORIES: UGUI源码分析
#+DATE: 2021-12-26T11:33:24+08:00
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: true
#+HUGO_BASE_DIR: ../../
#+OPTIONS: author:nil

我们都知道在Unity中渲染一个3D的物体, 需要提供3D物体的模型, 纹理, 材质甚至Shader. 但我们在制作UI时, 并不需要提供这些(Image还是可以提供材质??????????).
那UI是另起炉灶, 有一套新机制吗? 答案是否定的. 下面我们就从UGUI源码层面来看看Image的渲染.

#+HUGO: MORE

* 初遇Image组件
我们在Hierarchy窗口创建一个Image(什么? 对象??), 可以在Inspector窗口看到它由 =RectTransform=, =Canvans Renderer=, =Image= 几个Component组成.
我们可以给 =Image= 组件指定 =Source Image=, =Color=, =Material= 等属性.

我们可以看到 =Image= 组件的源码, 位于 =Runtime/UI/Core/Image.cs=, =Image= 类继承关系如下:

#+BEGIN_SRC plantuml :file  2021-12-UGUI-Source-Reading/001.Image-Hierarchy.png :exports both
  @startuml
  
  namespace UnityEngine.UI {
      class Image
      class MaskableGraphic
      class Graphic
      class UIBehaviour
      class MonoBehaviour
  
      MaskableGraphic <|-- Image
      Graphic         <|-- MaskableGraphic
      UIBehaviour     <|-- Graphic
      MonoBehaviour   <|-- UIBehaviour
  }
  
  @enduml
#+END_SRC

#+RESULTS:
[[file:2021-12-UGUI-Source-Reading/001.Image-Hierarchy.png]]

