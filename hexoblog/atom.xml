<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨世玲的游戏开发修行笔记</title>
  <subtitle>和平行世界的自己握手</subtitle>
  <link href="/hexoblog/atom.xml" rel="self"/>
  
  <link href="http://www.young40.com/hexoblog/"/>
  <updated>2018-02-07T16:05:47.143Z</updated>
  <id>http://www.young40.com/hexoblog/</id>
  
  <author>
    <name>杨世玲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新站点</title>
    <link href="http://www.young40.com/hexoblog/2018/02/08/2018-02-08-New-Site/"/>
    <id>http://www.young40.com/hexoblog/2018/02/08/2018-02-08-New-Site/</id>
    <published>2018-02-08T00:00:00.000Z</published>
    <updated>2018-02-07T16:05:47.143Z</updated>
    
    <content type="html"><![CDATA[

<p>
这是备份站, 请进主站:
<a href="http://www.young40.com">http://www.young40.com</a>
</p>

<p class="date">Date: 2018-02-08</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer" target="_blank" rel="noopener">Validate</a></p>
]]></content>
    
    <summary type="html">
    
      

&lt;p&gt;
这是备份站, 请进主站:
&lt;a href=&quot;http://www.young40.com&quot;&gt;http://www.young40.com&lt;/a&gt;
&lt;/p&gt;

&lt;p class=&quot;date&quot;&gt;Date: 2018-02-08&lt;/p&gt;
&lt;p class=&quot;validati
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CocoStudio 节点自动绑定</title>
    <link href="http://www.young40.com/hexoblog/2017/03/19/2017-03-19-CocoStudio-auto-binding/"/>
    <id>http://www.young40.com/hexoblog/2017/03/19/2017-03-19-CocoStudio-auto-binding/</id>
    <published>2017-03-19T00:00:00.000Z</published>
    <updated>2018-02-07T15:54:22.413Z</updated>
    
    <content type="html"><![CDATA[


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">懒是美德</h2>
<div class="outline-text-2" id="text-1">
<p>
换了一份工作, 第一步就是需要熟悉现有的代码。作为一个优化狂人，很容易就能从中看出值得优化的地方来。随手打开一个约2600多行的lua文件，发现满屏的seekNodeByName，简单统计一下约260行，10%。
我们在使用CocoStudio的时候，在代码中确实需要使用节点的Name来寻找节点，但不要忘记lua语言的动态性，恰当利用则事半功倍。更何况，懒是一种美德，我们努力思考，就能少写不少代码。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">自动绑定</h2>
<div class="outline-text-2" id="text-2">
<p>
假设我们有一个demo.csd文件，结构如下:
</p>
<pre class="example">
|--Root
    |--spr_Background
    |--lbl_Title
    |--Node_DefaultName
</pre>


<p>
代码加载的时候，如果能自动绑定到代码改多好啊!
</p>
<div class="org-src-container">

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">DemoLayer = class(<span class="string">"DemoLayer"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">return</span> cc.Layer:create() <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DemoLayer:init</span><span class="params">()</span></span></span><br><span class="line">  loadCSB(<span class="string">"demo.csb"</span>, self)</span><br><span class="line"></span><br><span class="line">  self.lbl_Title:setString(<span class="string">"自动绑定太爽了"</span>) <span class="comment">-- 如何能爽这一下???</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">来个实现</h2>
<div class="outline-text-2" id="text-3">
<p>
下面是一份简单的实现。`attachedTo[nodeName] = child` 中，利用lua的动态性，直接给`attachedTo`这个对象增加新的属性，
这样就能在`loadCSB("demo.csb", self)`后，直接用`self.lbl_Title`来访问节点了。
</p>
<div class="org-src-container">

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadCSB</span><span class="params">(csbName)</span></span></span><br><span class="line">	<span class="keyword">local</span> csbNode = cc.CSLoader:createNode(csbName)</span><br><span class="line"></span><br><span class="line">  gt.bindNodeByName(csbNode, attachedTo)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> csbNode</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindNodeByName</span><span class="params">(node, attachedTo)</span></span></span><br><span class="line">  <span class="keyword">local</span> matchTable = {spr_=<span class="keyword">true</span>, nod_=<span class="keyword">true</span>, btn_=<span class="keyword">true</span>, lbl_=<span class="keyword">true</span>}</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, child <span class="keyword">in</span> <span class="built_in">ipairs</span>(node:getChildren()) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> nodeName = child:getName()</span><br><span class="line">    <span class="keyword">local</span> nodeNameSub = <span class="built_in">string</span>.sub(nodeName, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> matchTable[nodeNameSub] <span class="keyword">then</span></span><br><span class="line">      attachedTo[nodeName] = child</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    bindNodeByName(child, attachedTo)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">一个规则</h2>
<div class="outline-text-2" id="text-4">
<p>
CocoStudio在编辑csd文件的时候，会给节点加上默认的名字，通常这些名字都是乱七八糟，在代码里再使用这些名字，代码也会变得丑陋不堪。
所以，有必要在CocoStudio中给节点一个有意义的名字，同时如果加上一个规则，还能减少节点绑定的数量。
</p>
<div class="org-src-container">

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> matchTable = {spr_=<span class="keyword">true</span>, nod_=<span class="keyword">true</span>, btn_=<span class="keyword">true</span>, lbl_=<span class="keyword">true</span>}</span><br><span class="line"><span class="keyword">if</span> matchTable[nodeNameSub] <span class="keyword">then</span></span><br><span class="line">   <span class="comment">-- 是感兴趣的节点，匹配到了</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</div>
<p>
我在示例中的规则是以spr_, nod_等为前缀的节点。这里的matchTable有点意思，spr_这些并不是它的值，而是键(key), 所以拿到前缀之后，
可以快速匹配，并不需要再跑一个循环了^_-.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">有个技巧</h2>
<div class="outline-text-2" id="text-5">
<p>
可能会有有序的节点，比如lbl_name1, lbl_name2, lbl_name3&#x2026;, 我们固然可以通过类似于self.lbl_name1等来访问，但有时我们在比如for循环中
如何访问这些节点呢？答案是我们可以利用下标的形式来访问这些节点.
</p>
<div class="org-src-container">

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> name = self[<span class="string">"lbl_name"</span> .. i]</span><br></pre></td></tr></table></figure>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">还有没有</h2>
<div class="outline-text-2" id="text-6">
<p>
这只是一个简单的版本，简单的工程也够用了。复杂一些的话，比如可以加上重名检测，对于列表型的节点加以更多的处理，等等。。。
如果你遇到问题，不妨通过微博联系我。
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">结束感悟</h2>
<div class="outline-text-2" id="text-7">
<p>
年复一年，终究是一事无成。能真切地感受到与日俱增的压力, 翻翻上一篇博客已经是一年多年前了，2016年竟是一字未写。想想前面两年的计划，多半是未完成，还有最可惜的Unreal的梦想。
我的新年来的比较晚，Late better than Never, 希望今年能再多些思考，多写文字，多读点书，多点收入。
</p>

<p>
再来回看正题，从懒这个美德出发，我们在写代码时，处处都可能有值得优化的地方，留心观察，能提出问题，找到解决方案只是时间问题。提出好的问题，才是最宝贵的。
</p>
</div>
</div>
<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Update</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://blog.justbilt.com" target="_blank" rel="noopener">bilt兄</a> 看了这篇博客以后，告诉我可以将有序列的节点以数组的方式访问更有效率，我马上更新了下代码，使用起来果然更加方便了.
下面是带序列的节点组合成数组的一个小函数。
</p>
<div class="org-src-container">

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupNode</span><span class="params">(group, name, child)</span></span> <span class="comment">-- 聚合序列节点为数组</span></span><br><span class="line">  <span class="keyword">local</span> _pre, _num = <span class="built_in">string</span>.match(name, <span class="string">"(.+)(%d+)$"</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> _pre <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">string</span>.sub(_pre, -<span class="number">1</span>) == <span class="string">"_"</span> <span class="keyword">then</span></span><br><span class="line">    _pre = <span class="built_in">string</span>.sub(_pre, <span class="number">1</span>, #_pre-<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> group[_pre] <span class="keyword">then</span></span><br><span class="line">    group[_pre] = {}</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  group[_pre][_num] = child</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</div>
<p>
如果节点名字是`nod_text1`, `nod_text2`&#x2026; 或者`img_press_1`, `img_press_2`&#x2026;的节点则可以用self.nod_text, self.nod_text来访问了
</p>

<p>
感谢bilt兄!
</p>
</div>
</div>

<p class="date">Date: 2017-03-19</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer" target="_blank" rel="noopener">Validate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;懒是美德&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
换了一份工作, 第一步就是需要熟悉现有的代码。作为一个优化狂人，很容易就能从中看出值得优化的地方来。随手打开一个约2600多行的lua文件，发现满屏的seekNodeByName，简单统计一下约260行，10%。
我们在使用CocoStudio的时候，在代码中确实需要使用节点的Name来寻找节点，但不要忘记lua语言的动态性，恰当利用则事半功倍。更何况，懒是一种美德，我们努力思考，就能少写不少代码。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一次 git 花样实战</title>
    <link href="http://www.young40.com/hexoblog/2015/12/22/2015-12-22-using-git-as-magics/"/>
    <id>http://www.young40.com/hexoblog/2015/12/22/2015-12-22-using-git-as-magics/</id>
    <published>2015-12-22T00:00:00.000Z</published>
    <updated>2018-02-07T15:54:22.413Z</updated>
    
    <content type="html"><![CDATA[


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">情况</h2>
<div class="outline-text-2" id="text-1">
<p>
周五在家工作了一天，向公司一个提交不频繁的库加了几个提交，但没有推送。其中一个提交，包含了一个 110M 的 cocos2d-x 静态库(是的，
我知道不推荐提交这个，但我还是提交了^_-). 这个库托管在 Oschina 开源中国的 git 站, 周一的时候，我尝试推送这几个提交，发现 Oschina 有
100M 文件大小的限制，纳尼？
</p>

<p>
于是开始了 git 的花样实战. 
</p>

<p>
再说一遍, 情况大概是这样, master 分支，我的提交按时间顺序是 C1, C4, C5, 中间有 pull 下来的其他同事的提交以及 merge. C1 包含 110M 文件 110M.a.
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">备份</h2>
<div class="outline-text-2" id="text-2">
<p>
万事先备份.
</p>

<p>
git checkout -b masterbackup
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">获取服务器最新提交</h2>
<div class="outline-text-2" id="text-3">
<p>
git fetch
</p>

<p>
这样可以将本地的 origin/master 获取到服务器最新的提交.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">重建 master 分支</h2>
<div class="outline-text-2" id="text-4">
<p>
重建方式是, 删除本地 master, 并重新从 origin/master 创建 master
</p>

<p>
git branch -D master 
注意此时在 masterbackup 分支
</p>

<p>
git checkout -b master origin/master
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">重做 C1, 并修改提交</h2>
<div class="outline-text-2" id="text-5">
<p>
git cherry-pick C1
</p>

<p>
注意此处得到的并不是 C1，应为 C1'
</p>

<p>
git rm 110M.a
</p>

<p>
删除了无法提交的文件
</p>

<p>
我这里采用了 split 的方法将其分割为几个小文件, 其他人只需要简单合并这几个文件即可
</p>

<p>
git add 110M.a_PART1 110M.a_PART2 110M.a_PART3
</p>

<p>
git commit &#x2013;amend
</p>

<p>
这个命令可以修改上次提交, 将已经加入到 stage 区的修改合并到上次提交(即 C1')
注意这个命令，万万不可再 push 后使用. (其实是不推荐 push 后使用)
</p>

<p>
这样我们就修复了这个无法提交的文件了.
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">同样重做 C4, C5</h2>
<div class="outline-text-2" id="text-6">
<p>
git cherry-pick C4
</p>

<p>
git cherry-pick C5
</p>

<p>
没有什么好说的
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">推送, 清理战场</h2>
<div class="outline-text-2" id="text-7">
<p>
git push origin master
</p>

<p>
git branch -D masterbackup
</p>

<p>
搞定!
</p>
</div>
</div>

<p class="date">Date: 2015-12-22</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer" target="_blank" rel="noopener">Validate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;情况&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
周五在家工作了一天，向公司一个提交不频繁的库加了几个提交，但没有推送。其中一个提交，包含了一个 110M 的 cocos2d-x 静态库(是的，
我知道不推荐提交这个，但我还是提交了^_-). 这个库托管在 Oschina 开源中国的 git 站, 周一的时候，我尝试推送这几个提交，发现 Oschina 有
100M 文件大小的限制，纳尼？
&lt;/p&gt;

&lt;p&gt;
于是开始了 git 的花样实战. 
&lt;/p&gt;

&lt;p&gt;
再说一遍, 情况大概是这样, master 分支，我的提交按时间顺序是 C1, C4, C5, 中间有 pull 下来的其他同事的提交以及 merge. C1 包含 110M 文件 110M.a.
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spacemacs 一问一答(一)</title>
    <link href="http://www.young40.com/hexoblog/2015/07/26/2015-07-26-master-spacemacs-answer-by-answer-1/"/>
    <id>http://www.young40.com/hexoblog/2015/07/26/2015-07-26-master-spacemacs-answer-by-answer-1/</id>
    <published>2015-07-26T00:00:00.000Z</published>
    <updated>2018-02-07T15:54:22.413Z</updated>
    
    <content type="html"><![CDATA[


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">你为什么会选择Spacemacs?</h2>
<div class="outline-text-2" id="text-1">
<p>
在选择编辑器这件事上, 我一直在追随子龙山人的脚步. 在他的带领下, 我成为了光荣的Vim党员, 继而又蜕变成了Emacs邪教徒.
</p>

<p>
在最初使用Emacs的日子里，过的很艰难，一向崇尚从零开始的我，迷失在了配置的迷雾中。再加上被人忽悠去做了Cocos IDE的小白鼠，
看起来就要和Emacs无缘了，然而&#x2026;
</p>

<p>
然而有一天，我看到的子龙酷拽Spacemacs的视频，+再加上Cocos IDE项目被其Cocos官方放弃，我面临着无编辑器可用的囧境+。
说实在话， 我被震撼了。熟悉的Vim的操作方式，简易而强大的配置功能， 还有强过Markdown百倍的Org-mode, 美味的番茄工作法&#x2026;
</p>

<p>
这就是我想要的编辑器, 征服神的编辑器，做一个编辑器的神!!!
</p>


<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">简单介绍下Spacemacs?</h2>
<div class="outline-text-2" id="text-2">
<p>
Spacemacs是Emacs的一个配置框架, 帮助你快速地打造自己的专属Emacs. 借助于evil-mode, Spacemacs致力于将Model Editing带到Emacs平台.
所以，我觉得Spacemacs给了Vim党一个非常好的机会迁移到Emcas平台。+ Spacemacs使用了melpa.org的第三方package包管理系统,
这基本上可以涵盖你的所有需求，你所做的只是对需要用到的package进行配置。+ Spacemacs有非常棒的第三方包管理系统，
melpa.org上2500+ 个包，可以直接被安装调用， 你所做的只是对需要用到的package进行配置。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">我该如何入门?</h2>
<div class="outline-text-2" id="text-3">
<p>
首先，你应该知道Spacemacs的官网即其托管在Github上的源码. 我想你此刻应该打开了Spacemacs的Github页面，顺手Star
一下总是没错的。 接着, 你应该阅读下面几篇文档.
</p>
<ul class="org-ul">
<li>README.md
</li>
<li>DOCUMENTATION.org
</li>
<li>CONVENTIONS.org
</li>
<li>HOWTOs.org
</li>
<li>VIMUSERS.org
</li>
<li>CONTRIBUTE.org
</li>
</ul>
<p>
读完这些文档，你就可以按照 README.md 中 安装这一段进行安装了。赶快去试试吧。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">应该如何选择Emacs的版本?</h2>
<div class="outline-text-2" id="text-4">
<p>
在上面提到的 README.md 中， 你可以找到Spacemacs官方推荐的OS X的GUI版本，相信官方推荐的总是没错的。在终端中也可以使用，
但某些功能可能需要GUI才行。另外，建议尽可能升级到最新的stable版本。什么？你问Windows版本？ 对不起，您可以关闭这个页面了，
请您赶紧打开苹果官网，订购一台Mac，在Mac上打开本页面了.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">我是否应该学习Elisp?</h2>
<div class="outline-text-2" id="text-5">
<p>
因为Spacemacs的配置都是Elisp语法， 所以，掌握基本的Elisp语法，是必须的。推荐您阅读 叶文彬 大神的 &lt;Elisp 入门&gt;,
很容易找到.
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Spacemacs 是怎么工作的?</h2>
<div class="outline-text-2" id="text-6">
<p>
作为一个刚入门的菜鸟，我只能告诉你，我简单的理解。~/.emacs.d 目录保存了Spacemacs的核心框架和预先配置好的各种layer.
你可以在~/.emacs.d/contrib目录里找到官方配置好的各种layer. ~/.emacs.d/elpa 目录保存了下载到的package。
~/.emacs.d/private/ 目录可以保存你自己layer， 但强烈不建议你放在这里。
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">关于 .spacemacs 文件，你能说点什么吗？</h2>
<div class="outline-text-2" id="text-7">
<p>
首先，.spacemacs 位于你的用户目录(~/)下，如果你不小心弄丢，弄乱了，弄错了. 可以从~/.emacs.d/core/templates/.spacemacs.template
复制一份到~/.spacemacs.
</p>

<p>
其次，上手之后，你应该会有自己的layer，如果你配置自己的layer目录，可以找到下面这个变量。需要注意的是，目录需要以 "/" 
结尾，别问我为什么要特别强调这个.
例如我的，dotspacemacs-configuration-layer-path '("~/dot/spacemacs-private/")
</p>

<p>
再次，推荐你在dotspacemacs-configuration-layers变量里配置需要加载的layer时，按字母顺序来排放这些layer
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">能不能看下你的Spacemacs的配置？</h2>
<div class="outline-text-2" id="text-8">
<p>
我是用Spacemacs仅仅只是入门，还有很多东西需要学习研究。我的配置大部分都是从子龙山人的配置里面摘录出来的, 我也
推荐你研究下子龙山人的配置，链接1 链接2。但鉴于我是一个菜鸟，我的配置可能也比较适合刚入门的童鞋研究，我的配置链接.
同时我也在不断更新着我的配置，如果你已经打开了Github的页面，那么不如顺手Star一下我的配置吧。
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">如何创建一个layer?</h2>
<div class="outline-text-2" id="text-9">
<p>
<a href="http://melpa.org/#/" target="_blank" rel="noopener">http://melpa.org/#/</a>
</p>

<p>
<a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org" target="_blank" rel="noopener">https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org</a>
<a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/VIMUSERS.org" target="_blank" rel="noopener">https://github.com/syl20bnr/spacemacs/blob/master/doc/VIMUSERS.org</a>
<a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/CONTRIBUTE.org" target="_blank" rel="noopener">https://github.com/syl20bnr/spacemacs/blob/master/doc/CONTRIBUTE.org</a>
<a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org" target="_blank" rel="noopener">https://github.com/syl20bnr/spacemacs/blob/master/doc/CONVENTIONS.org</a>
<a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/HOWTOs.org" target="_blank" rel="noopener">https://github.com/syl20bnr/spacemacs/blob/master/doc/HOWTOs.org</a>
</p>
</div>
</div>

<p class="date">Date: 2015-07-26</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer" target="_blank" rel="noopener">Validate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;你为什么会选择Spacemacs?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在选择编辑器这件事上, 我一直在追随子龙山人的脚步. 在他的带领下, 我成为了光荣的Vim党员, 继而又蜕变成了Emacs邪教徒.
&lt;/p&gt;

&lt;p&gt;
在最初使用Emacs的日子里，过的很艰难，一向崇尚从零开始的我，迷失在了配置的迷雾中。再加上被人忽悠去做了Cocos IDE的小白鼠，
看起来就要和Emacs无缘了，然而&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
然而有一天，我看到的子龙酷拽Spacemacs的视频，+再加上Cocos IDE项目被其Cocos官方放弃，我面临着无编辑器可用的囧境+。
说实在话， 我被震撼了。熟悉的Vim的操作方式，简易而强大的配置功能， 还有强过Markdown百倍的Org-mode, 美味的番茄工作法&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
这就是我想要的编辑器, 征服神的编辑器，做一个编辑器的神!!!
&lt;/p&gt;


&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客记</title>
    <link href="http://www.young40.com/hexoblog/2015/07/25/2015-07-25-blogging-updated/"/>
    <id>http://www.young40.com/hexoblog/2015/07/25/2015-07-25-blogging-updated/</id>
    <published>2015-07-25T00:00:00.000Z</published>
    <updated>2018-02-07T15:54:22.413Z</updated>
    
    <content type="html"><![CDATA[

<p>
很羡慕那些高产的博主，看下自己的上一篇文章还停留在1月份, 甚是惭愧. 最近，博客有一些好的变化，
希望能激励自己，多学习， 多写文章。
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">域名</h2>
<div class="outline-text-2" id="text-1">
<p>
在网络上一直使用young40这个网名，所以十年前还在学校的时候注册过www.young40.com这个域名,
但每年近百大洋的注册费用也是不小的负担，于是一两年后就停止续费了。上班了之后，想重新注册
，发现已经被人注册，也联系不上注册者, 于是每年都会看下是否可以注册。
上个月再次查看是否可以注册，我几乎不能相信自己的眼睛， 居然可以注册了，欣喜若狂，马上
注册，相隔十年之后，再次拥有了这个域名。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Octopress</h2>
<div class="outline-text-2" id="text-2">
<p>
之前也在博客园等地方写过博客，一方面因为懒癌产出甚少，另一方面没有归属感。Github Pages流行之
后，我也尝试在Github Pages上写博客了。 比较了几个Github Pages的博客工具之后，迅速被Octopress
的强大，美观吸引了。是的，即使是默认主题，也是十分优美漂亮。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Hexo</h2>
<div class="outline-text-2" id="text-3">
<p>
作为一个程序员，对各种语言本不该有偏见，但对于Ruby这种语言始终提不起兴趣，甚至到现在还没有看过他
的语法。Octopress基于Ruby, 速度上也一直被诟病。 我对Node.js虽然没有花费太多的力气学习，但
内心深处还是很狂热地热爱着Node.js。Hexo是Node.js开发的, 所以很快就迁移到了Hexo上。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Org-mode 和 Hexo3</h2>
<div class="outline-text-2" id="text-4">
<p>
自从被子龙山人带入了Emacs邪教，Emacs就侵噬着我心灵的方方面面，到现在已经恨不得所有的事情都在Emacs
里面完成。Org-mode作为Emacs特有的特性，也是必须学习和使用的，自然写博客这种事情， 也必须在Org-mode
下完成。经过几天对比之后，终于选定了org-octopress作为博客写作的框架。尽管org-octopress 是为
Octopress开发的，实际上Hexo和Octopress高度兼容，org-octopress也是可以直接用在Hexo上。在研究
org-octopress的过程中， 也随便将Hexo更新为了3.1.1版本.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">迁移</h2>
<div class="outline-text-2" id="text-5">
<p>
Octopress迁移到Hexo，以及Hexo 2.x迁移到3.x，都是非常简单的. 基本上就是保存好自己的_config.yml
配置文件和source目录， 用新的(比如Hexo3)初始化一个新目录，然后将source目录放入新的目录, 
将配置转移到新的_config.yml中即可.
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">小结</h2>
<div class="outline-text-2" id="text-6">
<p>
最近为了使用Emacs，耗费了大量的精力来学习Emacs, Spacemacs, Org-mode, GTD等知识，这次对博客
进行了一次升级, 希望能激励自己多些文章， 将最近学习Emacs等心得都分享出来.
</p>

<p>
本文使用Emacs 24.5, Org-mode 8.2以及org-octopress 完成.
</p>
</div>
</div>

<p class="date">Date: 2015-07-25</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer" target="_blank" rel="noopener">Validate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
很羡慕那些高产的博主，看下自己的上一篇文章还停留在1月份, 甚是惭愧. 最近，博客有一些好的变化，
希望能激励自己，多学习， 多写文章。
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;域名&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在网络上一直使用young40这个网名，所以十年前还在学校的时候注册过www.young40.com这个域名,
但每年近百大洋的注册费用也是不小的负担，于是一两年后就停止续费了。上班了之后，想重新注册
，发现已经被人注册，也联系不上注册者, 于是每年都会看下是否可以注册。
上个月再次查看是否可以注册，我几乎不能相信自己的眼睛， 居然可以注册了，欣喜若狂，马上
注册，相隔十年之后，再次拥有了这个域名。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识Emacs(一)</title>
    <link href="http://www.young40.com/hexoblog/2015/01/11/2015-01-11-meet-emacs-01/"/>
    <id>http://www.young40.com/hexoblog/2015/01/11/2015-01-11-meet-emacs-01/</id>
    <published>2015-01-11T04:54:46.000Z</published>
    <updated>2018-02-07T15:54:22.412Z</updated>
    
    <content type="html"><![CDATA[<p>#版本<br>Mac OS X 10.10 中自带的Emacs 版本是22.+,  对于什么版本都求新的我来说, 自然需要祭出Homebrew, 安装最新的版本<br><code>brew install emacs</code><br>安装后版本为24.4, ^_^<br>如果你不知掉Homebrew是什么, 参见这里: <a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">http://brew.sh/index_zh-cn.html</a><br>另外, 还有Emacs for OS X可选:<a href="http://emacsformacosx.com/" target="_blank" rel="noopener">http://emacsformacosx.com/</a></p>
<a id="more"></a>
<p>#Meta 键<br>马上就遇到了麻烦.<br>Emacs中比较重要的两个键为<code>Control</code> 和 <code>Meta</code>. 默认<code>Control</code> 键为<code>Ctrl</code>键, 可是我找不到我的<code>Meta</code>键了. 大部分人说<code>Meta</code> 键为<code>Alt</code>键, 试了几遍也不行. 放狗来搜, 原来是要对终端进行设置.<br>设置方法参见:<br>For iTerm2: <a href="http://xor.lonnen.com/2013/01/04/emacs-on-osx.html" target="_blank" rel="noopener">http://xor.lonnen.com/2013/01/04/emacs-on-osx.html</a> (英文)<br>For Terminal: <a href="http://blog.sina.com.cn/s/blog_62b58cd00100z9p0.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_62b58cd00100z9p0.html</a><br>Emacs for OS X无此问题.</p>
<h1 id="组合键"><a href="#组合键" class="headerlink" title="组合键"></a>组合键</h1><p>Emacs的教程, 用<code>C-</code>代表了<code>Control</code>的组合键, <code>M-</code> 代表了<code>Meta</code>的组合键</p>
<p>#指南<br>C-h t 可以打开指南, 虽然是英文的, 但是都非常简单. 可以跟着练习.</p>
<h1 id="基础移动"><a href="#基础移动" class="headerlink" title="基础移动"></a>基础移动</h1><p>f 和 b分别代表forward向前, backward向后</p>
<p>C-f 光标向前移动一个字符<br>C-b 光标向后移动一个字符</p>
<p>M-f 光标向前移动一个单词<br>M-b 光标向后移动一个单词</p>
<p>n 和p分别代表了next line和previous line<br>C-n 光标下移一行<br>C-p 光标上移一行</p>
<p>e代表了end, a 可能是应为位于字母表的首位, 所以代表了开头<br>C-a 光标移动到行首<br>C-e 光标移动到行末</p>
<p>注意是句子, 不是段落. 支持中文全角标点<br>M-a 光标移动到句子首位<br>M-e  光标移动到句子末尾</p>
<p>小于号, 大于号<br>M-&lt; 光标移动到文件头部<br>M-&gt; 光标移动的文件尾部</p>
<p>当然, 方向键也可以移动光标, 不过强烈不推荐</p>
<p>#打开保存退出<br>C-x C-f 打开文件<br>C-x C-s 保存文件<br>C-x C-c 退出Emacs</p>
<p>#小结<br>据说成为Emacs高手需要一年的时间<br><a href="http://blog.csdn.net/redguardtoo/article/details/7222501" target="_blank" rel="noopener">http://blog.csdn.net/redguardtoo/article/details/7222501</a>,<br>但掌握这么多基本上可以在Emacs下面生存下来吧.<br>上面这些都是从Emacs自带的指南摘录下来的, 看看也好, 还是推荐自己跟着指南学一遍.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#版本&lt;br&gt;Mac OS X 10.10 中自带的Emacs 版本是22.+,  对于什么版本都求新的我来说, 自然需要祭出Homebrew, 安装最新的版本&lt;br&gt;&lt;code&gt;brew install emacs&lt;/code&gt;&lt;br&gt;安装后版本为24.4, ^_^&lt;br&gt;如果你不知掉Homebrew是什么, 参见这里: &lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://brew.sh/index_zh-cn.html&lt;/a&gt;&lt;br&gt;另外, 还有Emacs for OS X可选:&lt;a href=&quot;http://emacsformacosx.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://emacsformacosx.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Emacs" scheme="http://www.young40.com/hexoblog/categories/Emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>博客切换到Hexo</title>
    <link href="http://www.young40.com/hexoblog/2015/01/11/2015-01-11-from-octopress-to-hexo/"/>
    <id>http://www.young40.com/hexoblog/2015/01/11/2015-01-11-from-octopress-to-hexo/</id>
    <published>2015-01-10T20:59:39.000Z</published>
    <updated>2018-02-07T15:53:53.688Z</updated>
    
    <content type="html"><![CDATA[<p>太惭愧了, 过去的一年时间里, 居然没有怎么写博客. 回想起来, 除了恋爱, 结婚, 生子什么事情也没有办成.</p>
<p>谢谢亲爱的陪伴, 上帝赐予我们小生命. 没有你们, 我实在是难以向自己交差.</p>
<p>OctoPress 是一个基于Github的伟大的博客系统, 但我在使用的过程中一直觉得不顺手.<br>正巧, 看到了Hexo 这个新兴的博客系统. 尝试了之后, 决定转向Hexo.<br>Hexo以下几点特别吸引我:<br><a id="more"></a></p>
<ul>
<li>基于Node.js<ul>
<li>我一直是Node.js的脑残粉丝, 再加上OctoPress是基于我所不熟悉的Ruby的</li>
</ul>
</li>
<li>轻量化</li>
<li>兼容OctoPress</li>
<li>等等…</li>
</ul>
<p>迁移的过程也很简单:</p>
<ol>
<li><p>创建空分支<br><code>git checkout --orphan hexo</code><br>用上面的命令创建一个空的分支<code>hexo</code><br>删除目录下的文件, 仅保留git相关文件</p>
</li>
<li><p>创建Hexo环境<br>参见Hexo的文档, 不再赘述<br><a href="http://hexo.io/docs/setup.html" target="_blank" rel="noopener">http://hexo.io/docs/setup.html</a><br>可以用<code>hexo server</code>, 在本地看下是否正常<br>正常后将<code>hexo</code>分支推送到你的github pages仓库</p>
</li>
<li><p>迁移<br>依旧是参见Hexo的文档<br><a href="http://hexo.io/docs/migration.html" target="_blank" rel="noopener">http://hexo.io/docs/migration.html</a><br>我还迁移了保存图片的目录</p>
</li>
<li><p>发布<br>OctoPress发布在了Github上的master分支, 所以要清除其原有内容.</p>
<ul>
<li>切换github pages仓库的默认分支为<code>hexo</code></li>
<li><code>git push origin :master</code> 删除远程master分支</li>
<li><code>git branch -D master</code> 删除本地master分支</li>
<li>设置发布信息, 发布的branch 为master</li>
</ul>
</li>
<li><p>测试一下吧<br><code>hexo deploy</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;太惭愧了, 过去的一年时间里, 居然没有怎么写博客. 回想起来, 除了恋爱, 结婚, 生子什么事情也没有办成.&lt;/p&gt;
&lt;p&gt;谢谢亲爱的陪伴, 上帝赐予我们小生命. 没有你们, 我实在是难以向自己交差.&lt;/p&gt;
&lt;p&gt;OctoPress 是一个基于Github的伟大的博客系统, 但我在使用的过程中一直觉得不顺手.&lt;br&gt;正巧, 看到了Hexo 这个新兴的博客系统. 尝试了之后, 决定转向Hexo.&lt;br&gt;Hexo以下几点特别吸引我:&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.young40.com/hexoblog/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>pkgbuild 安装提示成功但找不到App的问题</title>
    <link href="http://www.young40.com/hexoblog/2014/06/18/2014-06-18-An-Issue-About-pkgbuild-install-location-Changed/"/>
    <id>http://www.young40.com/hexoblog/2014/06/18/2014-06-18-An-Issue-About-pkgbuild-install-location-Changed/</id>
    <published>2014-06-18T09:53:52.000Z</published>
    <updated>2018-02-07T15:53:53.688Z</updated>
    
    <content type="html"><![CDATA[<p>这几天用 <code>pkgbuild</code> 来打包 <code>CocoStudio for Mac</code>, 遇到了一个极其诡异的问题. 安装打包好的 <code>CocoStudio.pkg</code>, 有时在<code>/Applications</code> 里面居然找不到 <code>CocoStudio</code>. -_-!!!</p>
<p>打包的参数如下:<br><a id="more"></a></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pkgbuild --root App\</div><div class="line">			 -<span class="ruby">-component-plist pkgCocoStudio.plist\</span></div><div class="line"><span class="ruby">			 --install-location /Applications\</span></div><div class="line"><span class="ruby">			 --identifier com.ccs.pkg\</span></div><div class="line"><span class="ruby">			 pkgCocoStudio.pkg</span></div></pre></td></tr></table></figure>
<p>其中在 <code>App</code> 目录下有 <code>CocoStudio.app</code> .</p>
<p>在图形界面下安装显示成功, 无奈只有在终端里面调用 <code>installer</code> 安装, 同样显示成功, 有时依然在 <code>/Applications</code> 中找不到 <code>CocoStudio</code>.</p>
<p>没有任何报错, 放狗来搜也没有看到什么有用的信息. 而且pkg打包相关的资料本来就很少. -_-!!</p>
<p>郁闷了几天之后, 测试一直催促我修复这个问题, 可惜总是一筹莫展. 终于要下定决心要解决这个问题.</p>
<p>既然安装成功, 又找不到安装后的App, 那么就来找找到底安装到了什么地方吧.<br>在终端中祭出<code>find / | grep CocoStudio.app</code> 全盘搜索, 好吧, 我知道我这样干很暴力.<br>经过漫长的等待之后, 发现除了上面提到的<code>App</code> 目录下, 并无<code>CocoStudio.app</code>.</p>
<p>这是为什么捏??? ????</p>
<p>苦思冥想, 不得其解. 突然又想到另外一件莫名其妙的诡异事件.<br><code>App</code> 目录经常无故被修改成 <code>root</code> 权限, 而安装<code>CocoStudio</code> 确实又调用了 <code>root</code> 权限.<br>难道安装时没有用指定的<code>--install-location /Applications</code>, 而是覆盖到了 <code>App</code> 目录下?????? </p>
<p>既然猜测是覆盖到了 <code>App</code> 下面, 那么马上删除 <code>App</code>, 再次安装, 果真好了. 重新在<code>App</code> 下生成<code>CocoStudio.app</code>, 并且运行一遍, 再次安装. 果真看到 <code>App</code> 下的 <code>CocoStudio.app</code> 被覆盖了.</p>
<p>好吧, 真心给跪了!!!!-_^</p>
<p>PS: 找了一圈也没有发现强制指定路径的方法.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天用 &lt;code&gt;pkgbuild&lt;/code&gt; 来打包 &lt;code&gt;CocoStudio for Mac&lt;/code&gt;, 遇到了一个极其诡异的问题. 安装打包好的 &lt;code&gt;CocoStudio.pkg&lt;/code&gt;, 有时在&lt;code&gt;/Applications&lt;/code&gt; 里面居然找不到 &lt;code&gt;CocoStudio&lt;/code&gt;. -_-!!!&lt;/p&gt;
&lt;p&gt;打包的参数如下:&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.young40.com/hexoblog/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Mac OS X" scheme="http://www.young40.com/hexoblog/tags/Mac-OS-X/"/>
    
      <category term="pkgbuild" scheme="http://www.young40.com/hexoblog/tags/pkgbuild/"/>
    
  </entry>
  
  <entry>
    <title>CocosBuilder 多分辨率</title>
    <link href="http://www.young40.com/hexoblog/2013/08/01/2013-08-01-cocosbuilder-multi-resolution/"/>
    <id>http://www.young40.com/hexoblog/2013/08/01/2013-08-01-cocosbuilder-multi-resolution/</id>
    <published>2013-08-01T14:10:00.000Z</published>
    <updated>2018-02-07T15:53:53.688Z</updated>
    
    <content type="html"><![CDATA[<p>最近两个项目大量使用了CocosBuilder, 对于开发效率提高是巨大的. 一直计划写一篇博客谈谈CocosBuilder的多分辨率问题, 懒病加上一些疙疙瘩瘩的小事情, 拖延了一个多月, 才终于下定决心要尽快完成这篇博客.</p>
<p>在这篇文章中, 假定你比较熟悉CocosBuilder, 如果您还不是很熟悉CocosBuilder, 推荐您看下我的另外一篇文章. <a href="http://www.ityran.com/archives/2614" target="_blank" rel="noopener">从零开始学习CocosBuilder</a> 我还是小菜鸟一个, 难免会有很多错误, 还望各位看客不吝赐教. </p>
<p>版本:</p>
<ul>
<li>Cocos2d-x 2.1.4 <a href="http://cocos2d-x.googlecode.com/files/cocos2d-x-2.1.4.zip" target="_blank" rel="noopener">http://cocos2d-x.googlecode.com/files/cocos2d-x-2.1.4.zip</a></li>
<li>CocosBuilder 3.0alpha5 <a href="http://cocosbuilder.googlecode.com/files/CocosBuilder-3.0-alpha5.zip" target="_blank" rel="noopener">http://cocosbuilder.googlecode.com/files/CocosBuilder-3.0-alpha5.zip</a></li>
</ul>
<p>最近几次Cocos2d-x和CocosBuilder(以下简写为2dx和ccb)都是联合发布的, 使用联合发布的版本会减少不兼容的可能.</p>
<a id="more"></a>
<p>##基本概念</p>
<p>我觉得在多分辨率中重要的概念就是<code>位置</code>, <code>大小</code>, <code>节点关系</code>, 可以通过位置, 大小, 节点关系, 锚点等的合理组合, 最终达到理想的界面. 当然, 这需要ccb的使用者更多的思考. ^_-</p>
<p>###位置<br><img src="/hexoblog/upload/2013-08/ccb-multi-r-01.png"></p>
<p>我们可以看到ccb中位置共有6种设置. 其中前四种设置方式代表了当前节点相对于其父节点的一个顶点的绝对位置.</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-02.png">
<p>如上图所示, 我们把<code>Click me</code> 按钮, 放在了距离其父节点右上角各50px.<br>这种位置的设置方式, 一般在节点需要放在父节点一个角上时很有用.</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-03.png">
<p>第5种设置方式表示当前节点的坐标由其父节点大小(宽width, 高height)的百分比组成, 其中父节点的左下角为原点.<br>如上图所示一个节点的父节点大小为200px*100px, 当前节点设置为(70%, 50%),那么当前节点距离其父节点左下角就应该是(140, 50).<br>百分比设置是位置设置中最常用的方式, 只有当百分比设置不适合时才去考虑其他设置方式.</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-04.png">
<p>第6种设置方式其实就是第1种设置方式的x,y值分别乘以一个全局缩放系数. 我们接下来就讲这个全局缩放系数, 这里先假设iphone下为1, iphone retina下为2.<br>如上图所示, 当前节点在iphone下距离其父节点左下角(50*1, 50*1), 在iphone retina下则就是(50*2, 50*2).</p>
<p>###全局缩放系数<br>如果我们需要在屏幕上放一个CCLabelTTF, 字体大小设置为48, 分别放在480*320分辨率的iphone上和960*640分辨率的iphone retina上, 那么在iphone retina上显示会显得特别小.<br>这个时候我们就需要为游戏设置一个全局缩放系数, iphone下为1, iphone retina下为2, 那么ccb中设置字体大小为48, 在游戏中iphone上字体大小为48*1=48, iphone retina中字体大小为48*2=96.</p>
<p>你可以在设置位置, 内容大小, 缩放, 字体大小的时候, 找到这个选项. 都是一样的道理, 对应的数据都需要乘以全局缩放系数.</p>
<p>默认iphone(480*320)的全局缩放系数是1, iPad/iphone HD是2, iPad HD就是4了.<br>当然你可以自己设置一套全局缩放系数.</p>
<p>###内容大小<br><img src="/hexoblog/upload/2013-08/ccb-multi-r-05.png"></p>
<p>只有如CCLayer, CCNode等几个节点可以设置内容大小. 可以有6个选项.</p>
<ul>
<li><ol>
<li>绝对大小</li>
</ol>
</li>
<li><ol>
<li>百分比相对大小, 相对于父节点的大小</li>
</ol>
</li>
<li><ol>
<li>相对父节点大小, 宽高设置为(100, 100), 那么该节点比其父节点宽高各小100px. 如果设置为(0, 0), 那么该节点就和父节点一样大小.  </li>
</ol>
</li>
<li><ol>
<li>宽度百分比, 高度绝对大小.</li>
</ol>
</li>
<li><ol>
<li>宽度绝对大小, 高度百分比.</li>
</ol>
</li>
<li><ol>
<li>绝对大小, 会被乘以全局缩放系数.</li>
</ol>
</li>
</ul>
<p>##基本操作</p>
<p>###多分辨率的文档</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-06.png">
<p>从菜单中选择<code>Edit Resolutions...</code>, 打开编辑多分辨率对话框.</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-07.png">
<p>我们可以看到当前为iphone设置了(480*320)的分辨率, <code>Scale</code>这个选项就是我们上面提到的<code>全局缩放系数</code>, 值为1.<br>为iPad设置了(1024*768)的分辨率, 全局缩放系数为2.</p>
<p>我们可以点击<code>Add Predefined Resolution</code>, 来添加ccb预定义的分辨率. 比如添加一个iphone5的分辨率.<br>哦, 什么, 分辨率是568*320???? <code>需要注意的是，CocosBuilder的工作是基于点（Point）的，而不是像素的。</code>.</p>
<p>####Resolution Extension和resources-auto(插播)<br>ccb中有一个resources-auto的重要概念, 你可以只提供一套资源, ccb通过全局缩放系数, 来为你自动生成不同分辨率的图片.<br>假设你为iPad retina(全局缩放系数为4)设计了一张100*100的图片.那么iphone会得到一张25*25的图片. iPad/iphone HD会得到一张50*50的图片.</p>
<p>说到资源解决方案, 首先要决定你想要支持的最大分辨率. 假设需要完美支持iPad HD, 就按2048*1536来做资源, 此时全局缩放系数为4.<br>把图片资源放置到resources-auto目录下, 那么ccb会帮我们自动缩放出其他需要的分辨率.<br>嗯, 还需要像下图一样设置, 告诉ccb需要从4x来设置. 从菜单的<code>Publish Settings...</code>打开.</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-08.png">
<p>如果是和背景无关的图片, 一般来讲自动缩放就可以胜任了. </p>
<p>如果需要在不同的分辨率下使用不同的图片, 比如一张背景图, iphone上使用960*640的图片, iPad上使用一张1024*768的图片.<br>那么可以在资源目录创建resources-iphone, resources-ipad目录, 然后在resources-iphone放置一张960*640分辨率的图片demo.png, 在resources-ipad目录下放置一张1024*768分辨率的图片demo.png. 要注意需要保持其文件名相同.</p>
<p>我们在ccb的工程目录下仍然只看到了一份demo.png, 不要着急, ccb会根据我们选用的不同的分辨率来给我们呈现不同的图片.</p>
<p>ok, 插播结束. 继续说我们的多分辨率文档.</p>
<p>其实, 我们可以给文档添加一个iphone hd, 以及正常iphone5尺寸的文档. 比较遗憾的是ccb不支持编辑<code>Resolution Extension</code>的列表.<br>而ipad和iphonehd的设置是在一起的, 并且也没有iphone5的Resolution可以设置.<br>所以我希望你没有需要必须要区分iphonehd/iphone5的需求, 在ccb里面是无法区分的. 令人欣慰的是, 我们还是可以在游戏里面区分他们.-_=</p>
<p>给文档添加的分辨率是可以自定义的, 名字, 宽, 高, 全局缩放系数. 所以我们还是可以创建全尺寸的iphonehd/iphone5的分辨率.</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-09.png">
<p>然后, 我们可以在ccb的菜单中找到切换多分辨率的选项, 这样就可以很方便的预览在各个分辨率下的效果.<br>注意他们的快捷键哦, 很有用哦.推荐在使用的时候, 经常在几个分辨率下切换查看效果是否正确理想.</p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-10.png">
<p>##做一个ccb工程<br>是时候做一个ccb的工程了, 不过我有点羞涩要给你展示我做的工程. 因为它实在太丑了, 还是来一张截图吧, 希望没有吓到你.-_= </p>
<img src="/hexoblog/upload/2013-08/ccb-multi-r-11.png">
<p>##代码一下<br>由于上面提到的一些限制, 只能基本上做到在ccb中做的, 就是我们在游戏中看到的.</p>
<p>ccb自带的帮助中<code>Setting scale and design size</code>, 需要做一些改进. 下面是我的代码.</p>
<figure class="highlight cpp"><figcaption><span>AppDelegate.cpp </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//set the correct resource for CocosBuilder</span></div><div class="line">   &#123;</div><div class="line">       CCSize sizeIphone = CCSizeMake(<span class="number">480</span>, <span class="number">320</span>);</div><div class="line">       CCSize sizeIphoneHD = CCSizeMake(<span class="number">960</span>, <span class="number">640</span>);</div><div class="line">       CCSize sizeIphone5 = CCSizeMake(<span class="number">1136</span>, <span class="number">640</span>);</div><div class="line">       CCSize sizeIpad = CCSizeMake(<span class="number">1024</span>, <span class="number">768</span>);</div><div class="line">       CCSize sizeIpadHD = CCSizeMake(<span class="number">2048</span>, <span class="number">1536</span>);</div><div class="line">       </div><div class="line">       CCSize designSize = sizeIphoneHD;</div><div class="line">       CCSize resourceSize = sizeIphoneHD;</div><div class="line">       CCSize screenSize = CCEGLView::sharedOpenGLView()-&gt;getFrameSize();</div><div class="line">       </div><div class="line">       <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; searchPaths;</div><div class="line">       <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; resDirOrders;</div><div class="line">       </div><div class="line">       TargetPlatform platform = CCApplication::sharedApplication()-&gt;getTargetPlatform();</div><div class="line">       <span class="keyword">if</span> (platform == kTargetIphone || platform == kTargetIpad)</div><div class="line">       &#123;</div><div class="line">           CCFileUtils::sharedFileUtils()-&gt;setSearchPaths(searchPaths);</div><div class="line">           </div><div class="line">           <span class="keyword">if</span> (screenSize.width &gt; <span class="number">768</span>)</div><div class="line">           &#123;</div><div class="line">               resourceSize = sizeIpadHD;</div><div class="line">               designSize = sizeIpadHD;</div><div class="line">               resDirOrders.push_back(<span class="string">"resources-ipadhd"</span>);</div><div class="line">               </div><div class="line">               CCBReader::setResolutionScale(<span class="number">4.0f</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (screenSize.width &gt; <span class="number">640</span>) &#123;</div><div class="line">               resourceSize = sizeIpad;</div><div class="line">               designSize = resourceSize;</div><div class="line">               resDirOrders.push_back(<span class="string">"resources-ipad"</span>);</div><div class="line">               resDirOrders.push_back(<span class="string">"resources-iphonehd"</span>);</div><div class="line">               </div><div class="line">               CCBReader::setResolutionScale(<span class="number">2.0f</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (screenSize.width &gt; <span class="number">480</span>) &#123;</div><div class="line">               <span class="keyword">if</span> (screenSize.height &gt; <span class="number">960</span>) &#123;</div><div class="line">                   designSize = sizeIphone5;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">else</span> &#123;</div><div class="line">                   designSize = sizeIphoneHD;</div><div class="line">               &#125;</div><div class="line">               resourceSize = sizeIphoneHD;</div><div class="line">               </div><div class="line">               CCBReader::setResolutionScale(<span class="number">2.0f</span>);</div><div class="line">               </div><div class="line">               resDirOrders.push_back(<span class="string">"resources-iphonehd"</span>);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               CCBReader::setResolutionScale(<span class="number">1.0f</span>);</div><div class="line"></div><div class="line">               designSize = sizeIphone;</div><div class="line">               resourceSize = sizeIphone;</div><div class="line">               </div><div class="line">               resDirOrders.push_back(<span class="string">"resources-iphone"</span>);</div><div class="line">           &#125;</div><div class="line">           </div><div class="line">           CCFileUtils::sharedFileUtils()-&gt;setSearchResolutionsOrder(resDirOrders);</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       pDirector-&gt;setContentScaleFactor(resourceSize.width / designSize.width);</div><div class="line">       CCEGLView::sharedOpenGLView()-&gt;setDesignResolutionSize(</div><div class="line">                                                              designSize.width, designSize.height,</div><div class="line">                                                              kResolutionExactFit);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();</div><div class="line">   </div><div class="line">   CCBReader *reader = <span class="keyword">new</span> CCBReader(lib);</div><div class="line">   </div><div class="line">   CCScene *scene = reader-&gt;createSceneWithNodeGraphFromFile(<span class="string">"MainScene.ccbi"</span>);</div><div class="line">   </div><div class="line">   pDirector-&gt;runWithScene(scene);</div></pre></td></tr></table></figure>
<p>这里只支持了iOS, 如果需要支持Android的话, 可以挑选几个需要的分辨率, 邻近的分辨率坐下拉伸等策略.</p>
<p>运行下代码, 可以看下效果. 收工.</p>
<p>工程下载: <a href="http://pan.baidu.com/share/link?shareid=3612867199&amp;uk=2281999082" target="_blank" rel="noopener">http://pan.baidu.com/share/link?shareid=3612867199&amp;uk=2281999082</a></p>
<p>推荐看下bilt的两篇博客: <a href="http://blog.justbilt.com/569/" target="_blank" rel="noopener">http://blog.justbilt.com/569/</a> <a href="http://blog.justbilt.com/579/" target="_blank" rel="noopener">http://blog.justbilt.com/579/</a> 里面还罗列了数片前辈们关于多分辨率的文章, 我学习的过程中也受益匪浅.<br>一并致谢. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近两个项目大量使用了CocosBuilder, 对于开发效率提高是巨大的. 一直计划写一篇博客谈谈CocosBuilder的多分辨率问题, 懒病加上一些疙疙瘩瘩的小事情, 拖延了一个多月, 才终于下定决心要尽快完成这篇博客.&lt;/p&gt;
&lt;p&gt;在这篇文章中, 假定你比较熟悉CocosBuilder, 如果您还不是很熟悉CocosBuilder, 推荐您看下我的另外一篇文章. &lt;a href=&quot;http://www.ityran.com/archives/2614&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从零开始学习CocosBuilder&lt;/a&gt; 我还是小菜鸟一个, 难免会有很多错误, 还望各位看客不吝赐教. &lt;/p&gt;
&lt;p&gt;版本:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cocos2d-x 2.1.4 &lt;a href=&quot;http://cocos2d-x.googlecode.com/files/cocos2d-x-2.1.4.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cocos2d-x.googlecode.com/files/cocos2d-x-2.1.4.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CocosBuilder 3.0alpha5 &lt;a href=&quot;http://cocosbuilder.googlecode.com/files/CocosBuilder-3.0-alpha5.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cocosbuilder.googlecode.com/files/CocosBuilder-3.0-alpha5.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近几次Cocos2d-x和CocosBuilder(以下简写为2dx和ccb)都是联合发布的, 使用联合发布的版本会减少不兼容的可能.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="CocosBuilder" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/CocosBuilder/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建Mac OS X下cocos2d-x的Android开发环境</title>
    <link href="http://www.young40.com/hexoblog/2013/02/23/2013-02-23-setting-up-android-development-envirment-on-mac-os-x/"/>
    <id>http://www.young40.com/hexoblog/2013/02/23/2013-02-23-setting-up-android-development-envirment-on-mac-os-x/</id>
    <published>2013-02-23T13:14:00.000Z</published>
    <updated>2018-02-07T15:53:53.687Z</updated>
    
    <content type="html"><![CDATA[<p>##版本</p>
<ul>
<li>Cocos2d-x: cocos2d-2.1beta3-x-2.1.1</li>
<li>OS X: 10.8</li>
<li>Android ADT Bundle: v21.1.0</li>
<li>Android NDK: android-ndk-r8d</li>
<li>Device: Android 4.2.1<br>这次我们测试的设备安装的是Android4.2.1, Cocos2d-x能支持Android2.2以上版本.</li>
</ul>
<p>####文件路径:<br><a id="more"></a></p>
<ul>
<li>Cocos2d-x: /opt/cocos2d-2.1beta3-x-2.1.1</li>
<li>Android ADT Bundle: /opt/adt-bundle-mac-x86_64</li>
<li>Android NDK: /opt/android-ndk<br>下文中提及的这些路径, 请替换成您自己的路径</li>
</ul>
<p>##下载最新版本Cocos2d-x<br>您可以在Cocos2d-x官网找到<a href="http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download" target="_blank" rel="noopener">下载页面</a><br>解压后到您需要的位置, 本文假设解压到以下位置<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/cocos2d<span class="number">-2.1</span>beta3-x<span class="number">-2.1</span><span class="number">.1</span></div></pre></td></tr></table></figure></p>
<p>##检查JDK<br>在终端中输入<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p>
<p>如果您没有安装JDK, 系统会帮您自动安装JDK.<br><img src="/hexoblog/upload/2013-02/set-up-c-a-osx-001-jdk.png"><br>安装过后您会看到如下输出<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version <span class="string">"1.6.0_37"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.6.0_37-b06-434-11M3909)</div><div class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 20.12-b01-434, mixed mode)</div></pre></td></tr></table></figure></p>
<p>##下载最新版本Android ADT Bundle<br>Google将Android SDK, Eclipse, ADT(Android Developer Tools)打包在一起,称作Android ADT Bundle, 简化了Android开发环境的搭建.<br>您可以在Android官网找到<a href="http://developer.android.com/sdk/index.html" target="_blank" rel="noopener">下载页面</a><br>解压到您需要的位置, 本文假设解压到以下位置<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="meta">opt</span>/adt-<span class="keyword">bundle-mac-x86_64</span></div></pre></td></tr></table></figure></p>
<p>在终端中运行下面命令, 将ADT中的Eclipse放入您的程序文件夹, 方便启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /opt/adt-bundle-mac-x86_64/eclipse/Eclipse.app/ /Applications/Eclipse-ADT.app</div></pre></td></tr></table></figure></p>
<p>在/Applications中或者Launchpad中找到并打开Eclipse-ADT<br><img src="/hexoblog/upload/2013-02/set-up-c-a-osx-002-adt.png"></p>
<p>##Eclipse的Retina支持<br>如果您在使用带Retina的Mackbook Pro, Eclipse暂时还不支持Retina. 但有一个简单的<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=382972" target="_blank" rel="noopener">解决方案</a>   </p>
<ol>
<li>在 /opt/adt-bundle-mac-x86_64/eclipse 找到 Eclipse.app</li>
<li>编辑<code>Contents/Info.plist</code></li>
<li>找到<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;/dict&gt;</span></div><div class="line"><span class="section">&lt;/plist&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>在其上面添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHighResolutionCapable<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li>将Eclipse.app移动到新的文件夹, 然后再移动回来. (防止系统缓存了上面提及的Info.plist)</li>
<li>OK啦.</li>
</ol>
<p>##Android SDK Manager<br>Android ADT Bundle中是包含了Android SDK Manager的. 启动您的Eclipse-ADT. 可以在工具栏中或者菜单中找到Android SDK Manager.<br><img src="/hexoblog/upload/2013-02/set-up-c-a-osx-003-sdk-1.png"><br><img src="/hexoblog/upload/2013-02/set-up-c-a-osx-004-sdk-2.png">    </p>
<p>##Android NDK<br>您可以在Android官网找到Android的<a href="http://developer.android.com/tools/sdk/ndk/index.html" target="_blank" rel="noopener">下载页面</a><br>下载后解压到您需要的位置, 本文假设解压到以下位置<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="meta">opt</span>/<span class="keyword">android-ndk</span></div></pre></td></tr></table></figure></p>
<p>##设置环境变量<br>我们需要将SDK, NDK以及Cocos2d-x的路径中添加到环境变量中. 将以下内容添加到~/.bash_profile文件<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">export</span> <span class="attribute">COCOS2DX_ROOT</span>=/opt/cocos2d-2.1beta3-x-2.1.1</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_SDK_ROOT</span>=/opt/adt-bundle-mac-x86_64/sdk</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">ANDROID_NDK_ROOT</span>=/opt/android-ndk</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">NDK_ROOT</span>=/opt/android-ndk</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_NDK_ROOT</div><div class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$ANDROID_SDK_ROOT</div></pre></td></tr></table></figure></p>
<p>##HelloWorld<br>万事俱备, 我们现在就可以开始激动人心的Cocos2d-x之旅了.<br>打开终端, 进入cocos2d-x所在目录并执行 <code>/opt/cocos2d-2.1beta3-x-2.1.1/create-android-project.sh</code>文件<br>根据提示输入对应信息.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Youngs-MacBook-Air:~ young40$ cd /opt/cocos2d-2.1beta3-x-2.1.1/</div><div class="line">Youngs-MacBook-Air:cocos2d-2.1beta3-x-2.1.1 young40$ ./<span class="keyword">create</span>-android-project.sh </div><div class="line"><span class="keyword">use</span> <span class="keyword">global</span> definition <span class="keyword">of</span> NDK_ROOT: /opt/android-ndk</div><div class="line"><span class="keyword">use</span> <span class="keyword">global</span> definition <span class="keyword">of</span> ANDROID_SDK_ROOT: /opt/adt-bundle-mac-x86_64/sdk</div><div class="line"><span class="keyword">Input</span> <span class="keyword">package</span> path. <span class="keyword">For</span> example: org.cocos2dx.example</div><div class="line">com.young40.test  //这里输入了包名</div><div class="line"><span class="keyword">Now</span> cocos2d-x supports Android <span class="number">2.2</span> <span class="keyword">or</span> <span class="keyword">upper</span> <span class="keyword">version</span></div><div class="line">Available Android targets:</div><div class="line"><span class="comment">----------</span></div><div class="line"><span class="keyword">id</span>: <span class="number">1</span> <span class="keyword">or</span> <span class="string">"android-17"</span></div><div class="line">     <span class="keyword">Name</span>: Android <span class="number">4.2</span></div><div class="line">     <span class="keyword">Type</span>: Platform</div><div class="line">     API <span class="keyword">level</span>: <span class="number">17</span></div><div class="line">     Revision: <span class="number">1</span></div><div class="line">     Skins: HVGA, QVGA, WQVGA400, WQVGA432, WSVGA, WVGA800 (<span class="keyword">default</span>), WVGA854, WXGA720, WXGA800, WXGA800<span class="number">-7</span><span class="keyword">in</span></div><div class="line">     ABIs : armeabi-v7a</div><div class="line"><span class="keyword">input</span> target <span class="keyword">id</span>:</div><div class="line"><span class="number">1</span> //选择您需要的平台<span class="keyword">id</span></div><div class="line"><span class="keyword">input</span> your <span class="keyword">project</span> <span class="keyword">name</span>:</div><div class="line">HelloWorld  //输入项目名称</div><div class="line">Created <span class="keyword">project</span> <span class="keyword">directory</span>: /opt/cocos2d<span class="number">-2.1</span>beta3-x<span class="number">-2.1</span><span class="number">.1</span>/HelloWorld/proj.android</div><div class="line"></div><div class="line">.....</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">Updated</span> project.properties</div><div class="line"><span class="keyword">Updated</span> local.properties</div><div class="line"><span class="keyword">Updated</span> <span class="keyword">file</span> /opt/cocos2d<span class="number">-2.1</span>beta3-x<span class="number">-2.1</span><span class="number">.1</span>/HelloWorld/proj.android/proguard-project.txt</div><div class="line">Youngs-MacBook-Air:cocos2d<span class="number">-2.1</span>beta3-x<span class="number">-2.1</span><span class="number">.1</span> young40$</div></pre></td></tr></table></figure></p>
<p>从以上输出我们可以看到<code>create-android-project.sh</code>这个脚本帮我们在 /opt/cocos2d-2.1beta3-x-2.1.1/HelloWorld 下建立了新项目.    </p>
<p>然后我们可以先在终端中调用”build_native.sh”脚本编译该项目的C++部分.<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Youngs</span>-MacBook-Air:~ young40$ cd /<span class="meta">opt</span>/cocos2d-<span class="number">2</span>.<span class="number">1</span>beta3-x-<span class="number">2</span>.<span class="number">1</span>.<span class="number">1</span>/HelloWorld/proj.<span class="keyword">android/</span></div><div class="line"><span class="keyword">Youngs-MacBook-Air:proj.android </span>young40$ ./<span class="keyword">build_native.sh </span></div><div class="line"><span class="symbol">NDK_ROOT</span> = /<span class="meta">opt</span>/<span class="keyword">android-ndk</span></div><div class="line"><span class="keyword">COCOS2DX_ROOT </span>= /<span class="meta">opt</span>/cocos2d-<span class="number">2</span>.<span class="number">1</span>beta3-x-<span class="number">2</span>.<span class="number">1</span>.<span class="number">1</span>/HelloWorld/proj.<span class="keyword">android/../..</span></div><div class="line"><span class="keyword">APP_ROOT </span>= /<span class="meta">opt</span>/cocos2d-<span class="number">2</span>.<span class="number">1</span>beta3-x-<span class="number">2</span>.<span class="number">1</span>.<span class="number">1</span>/HelloWorld/proj.<span class="keyword">android/..</span></div><div class="line"><span class="keyword">APP_ANDROID_ROOT </span>= /<span class="meta">opt</span>/cocos2d-<span class="number">2</span>.<span class="number">1</span>beta3-x-<span class="number">2</span>.<span class="number">1</span>.<span class="number">1</span>/HelloWorld/proj.<span class="keyword">android</span></div><div class="line"><span class="keyword">Using </span>prebuilt externals</div><div class="line"><span class="symbol">make</span>: Entering directory `/<span class="meta">opt</span>/cocos2d-<span class="number">2</span>.<span class="number">1</span>beta3-x-<span class="number">2</span>.<span class="number">1</span>.<span class="number">1</span>/HelloWorld/proj.<span class="keyword">android'</span></div><div class="line"><span class="keyword"></span></div><div class="line"><span class="keyword">.....</span></div><div class="line"><span class="keyword"></span></div><div class="line"><span class="keyword">StaticLibrary </span> : libchipmunk.a</div><div class="line"><span class="symbol">StaticLibrary</span>  : libextension.a</div><div class="line"><span class="symbol">SharedLibrary</span>  : libgame.so</div><div class="line"><span class="symbol">Install</span>        : libgame.so =&gt; libs/armeabi/libgame.so</div><div class="line"><span class="symbol">make</span>: Leaving directory `/<span class="meta">opt</span>/cocos2d-<span class="number">2</span>.<span class="number">1</span>beta3-x-<span class="number">2</span>.<span class="number">1</span>.<span class="number">1</span>/HelloWorld/proj.<span class="keyword">android'</span></div><div class="line"><span class="keyword">Youngs-MacBook-Air:proj.android </span>young40$</div></pre></td></tr></table></figure></p>
<p>##导入Eclipse-ADT<br>打开Eclipse-ADT, 点击快捷键<code>command+N</code>打开新建项目窗口并选择<code>Android Project from Existing Code</code><br><img src="/hexoblog/upload/2013-02/set-up-c-a-osx-005-helloworld-1.png"><br><img src="/hexoblog/upload/2013-02/set-up-c-a-osx-006-helloworld-2.png"><br>这时您可能会在eclipse的<code>Problems</code>窗口看到如下错误<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The import org.cocos2dx.lib cannot be resolved	HelloWorld.java	/HelloWorld/src/com/young40/test	line 26	Java Problem</div><div class="line">Cocos2dxActivity cannot be resolved <span class="keyword">to</span> a<span class="built_in"> type	</span>HelloWorld.java	/HelloWorld/src/com/young40/test	line 30	Java Problem</div><div class="line">Cocos2dxActivity cannot be resolved <span class="keyword">to</span> a<span class="built_in"> type	</span>HelloWorld.java	/HelloWorld/src/com/young40/test	line 33	Java Problem</div></pre></td></tr></table></figure></p>
<p>您需要将<code>/opt/cocos2d-2.1beta3-x-2.1.1/cocos2dx/platform/android/java</code>如上面处理一样也作为一个项目导入eclipse中<br>然后在HelloWorld项目上点击右键选择刷新, 可以看到错误就消失了.    </p>
<p>将您的手机设置成调试模式并用USB线连接到电脑, 在Eclipse中运行HelloWorld, 然后就能在手机上看到已经运行的HelloWorld了<br><img src="/hexoblog/upload/2013-02/set-up-c-a-osx-007-screen.png">   </p>
<p>好了, 享受您的奇妙的Cocos2d-x之旅吧!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cocos2d-x: cocos2d-2.1beta3-x-2.1.1&lt;/li&gt;
&lt;li&gt;OS X: 10.8&lt;/li&gt;
&lt;li&gt;Android ADT Bundle: v21.1.0&lt;/li&gt;
&lt;li&gt;Android NDK: android-ndk-r8d&lt;/li&gt;
&lt;li&gt;Device: Android 4.2.1&lt;br&gt;这次我们测试的设备安装的是Android4.2.1, Cocos2d-x能支持Android2.2以上版本.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####文件路径:&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Pomelo和Cocos2d-x的聊天室</title>
    <link href="http://www.young40.com/hexoblog/2013/01/08/2013-01-08-chat-of-pomelo-for-cocos2d-x/"/>
    <id>http://www.young40.com/hexoblog/2013/01/08/2013-01-08-chat-of-pomelo-for-cocos2d-x/</id>
    <published>2013-01-07T16:39:00.000Z</published>
    <updated>2018-02-07T15:53:53.687Z</updated>
    
    <content type="html"><![CDATA[<p>据说聊天室和游戏系统有很多相似之处, 并且很多游戏本身就带着多人聊天系统. 所以Pomelo将聊天室作为了一个例子.    </p>
<p>开源是非常棒的思想和运动, 我简单提两点体会,<br>1.发现了问题可以不用等官方响应,自己有能力就可以马上修复. 2.你可以贡献自己的代码,很多人都可以贡献代码,可以让项目快速发展.<br>当然一旦你的代码被接受并被很多人使用, 心中的成就感是不言而喻的.    </p>
<p>之所以要提到开源, 是因为今天我们要用到的东西基本上全部是开源的, 并且我们还要对其中的代码做一些修改才能正常工作. 再一次为开源鼓掌!     </p>
<p>这并不是一篇Pomelo,或者Cocos2d-x的入门说明, 需要你对这两者都有一定的了解.<br>同时, 无论是Pomelo还是Cocos2d-x, 我都是新手, 如果文章中有错误的地方, 希望您能不吝指出.<br>您可以在文章下面留言, 或者在新浪微博上发微薄 @杨世玲<br>(需要说明的一点是, 请勿私信提问非隐私性技术问题, 我是希望您的问题, 我的或者其他朋友的回复,能被更多朋友搜索到,<br>我希望我们的交流, 能让更多朋友受到启发, 受益. 这也是对社区和世界和平的一点贡献吧.)    </p>
<a id="more"></a>
<p>下面是我们需要使用到的工具及其版本:    </p>
<ul>
<li>平台:OS X(10.8.2) Xcode(4.5.2)    </li>
<li>Cocos2d-2.1beta3-x-2.1.0    </li>
<li>Pomelo <a href="https://github.com/NetEase/pomelo" target="_blank" rel="noopener">https://github.com/NetEase/pomelo</a></li>
<li>socket.io-clientpp <a href="https://github.com/ebshimizu/socket.io-clientpp" target="_blank" rel="noopener">https://github.com/ebshimizu/socket.io-clientpp</a></li>
<li>websocketpp <a href="https://github.com/zaphoyd/websocketpp" target="_blank" rel="noopener">https://github.com/zaphoyd/websocketpp</a></li>
<li>Rapidjson <a href="https://code.google.com/p/rapidjson/" target="_blank" rel="noopener">https://code.google.com/p/rapidjson/</a></li>
<li>chatofpomelo <a href="https://github.com/NetEase/chatofpomelo" target="_blank" rel="noopener">https://github.com/NetEase/chatofpomelo</a></li>
</ul>
<p>查阅本文时请注意版本差异.        </p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>我们的目标是实现OS X, IOS, Android三个平台下的chatofpomelo的Cocos2d-x版本.<br>所以需要安装各自平台的开发工具如Xcode,Eclipse,NDK等, 不是本文需要关心的内容. 相信大家也已经轻车熟路了.<br>Pomelo的安装 <code>npm install pomelo -g</code>, 如有疑问请查看Pomelo的Wiki.<br>websocketpp需要著名的C++库, boost. 我是使用了HomeBrew来安装.<br>其他安装方式请自省查阅相关文档, 有一点需要指出的是, 必须编译为带有x86(i386)支持lib文件.<br>因为Cocos2d-x在OS X下是32位的.<br><figure class="highlight sh"><figcaption><span>HomeBrew安装boost库</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install boost --universal</div></pre></td></tr></table></figure></p>
<p>上面这条命令中<code>--universal</code>即代表编译出来的boost的lib文件同时支持x86和x64.    </p>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>Cocos2d-x跨平台无疑做的很好, 但是如果手动创建一个结构良好的跨平台项目,还是一件非常棘手的事.<br>幸好我们可以偷懒, 打开Cocos2d-x的源代码, samples目录下面都是已经配置好的跨平台的项目文件.<br>合理利用, 将事半功倍.    </p>
<p>我们将samples目录下HelloCpp复制为ChatOfPomelo,打开找到proj.mac目录下面的<code>HelloCpp.xcodeproj</code>,<br>可以将其重命名为<code>ChatOfPomelo-Mac.xcodeproj</code>, 以便于和接下来的ios项目有所区分.   </p>
<p>在ChatOfPomelo下创建lib目录, 下载socket.io-clientpp和websocketpp并解压到lib目录下面.<br>并将socket.io-clientpp/lib/rapidjson 复制到lib目录下面.<br>目录结构应该是这样的.<br><figure class="highlight sh"><figcaption><span>目录</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ChatOfPomelo/</div><div class="line">├── Classes</div><div class="line">├── Resources</div><div class="line">├── lib</div><div class="line">│   ├── rapidjson</div><div class="line">│   ├── socket.io-clientpp</div><div class="line">│   └── websocketpp</div><div class="line">├── proj.android</div><div class="line">├── proj.blackberry</div><div class="line">├── proj.ios</div><div class="line">├── proj.linux</div><div class="line">├── proj.mac</div><div class="line">├── proj.marmalade</div><div class="line">└── proj.win32</div></pre></td></tr></table></figure></p>
<p>我们打开proj.mac下的项目文件, 在Xcode中打开项目设置页, 点开Targets的设置.<br>在Build Settings下面找到<code>Search Paths</code>, 将<code>Always Search User Paths</code>设置为<code>Yes</code>.<br>给<code>Header Search Paths</code> 依次添加下面路径:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/include_code</div><div class="line"><span class="string">"<span class="variable">$(SRCROOT)</span>/../lib/socket.io-clientpp/src"</span></div><div class="line"><span class="string">"<span class="variable">$(SRCROOT)</span>/../lib/websocketpp/src"</span></div><div class="line"><span class="string">"<span class="variable">$(SRCROOT)</span>/../lib/rapidjson/include"</span></div></pre></td></tr></table></figure></p>
<p>如下图所示:<br><img src="/hexoblog/upload/2013-01/chat-of-pomelo-cocos2d-x-001.png"></p>
<p>给<code>Library Search Paths</code>添加路径<code>/usr/local/lib</code>. 如下图:<br><img src="/hexoblog/upload/2013-01/chat-of-pomelo-cocos2d-x-002.png"></p>
<p>其中<code>/usr/local/include</code>和<code>/usr/local/lib</code>是boost的所在位置(HomeBrew的默认安装位置).<br>如果你的boost不在上述位置, 请自行更改.</p>
<p>接下来将<code>websocketpp</code>的工程文件添加进来.参见下图:<br><img src="/hexoblog/upload/2013-01/chat-of-pomelo-cocos2d-x-003.png"></p>
<p>然后打开工程的设置, 在Targets的Build Phases页面,找到<code>Link Binary With Libraries</code>,<br>添加<code>libwebsocketpp.a</code>, 以及boost的库文件(在/usr/local/lib中找到).<br><figure class="highlight sh"><figcaption><span>boost 需要添加的库文件列表</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">libboost_date_time-mt.a</div><div class="line">libboost_graph-mt.a</div><div class="line">libboost_random-mt.a</div><div class="line">libboost_regex-mt.a</div><div class="line">libboost_system-mt.a</div><div class="line">libboost_thread-mt.a</div><div class="line">libboost_timer-mt.a</div></pre></td></tr></table></figure></p>
<p>添加的方法参见下图:<br><img src="/hexoblog/upload/2013-01/chat-of-pomelo-cocos2d-x-004.png"></p>
<p>##文件Hack<br>我们在<code>HelloWorldScene.cpp</code>中添加一句<code>#include &lt;socket_io_client.hpp&gt;</code>.<br>然后试图运行项目的话, 会看到几处报错(有可能你看到这篇文章的时候相关库文件已经更新了, 没有报错的话, 直接跳过这段即可.)<br>报错的是<code>socket_io_client.hpp</code>中的<code>std::function</code>以及<code>std::unique_ptr</code>等.</p>
<p>这是因为这些语句是C++11的新语法. 而如果在Xcode中启用C++11的支持,则Cocos2d-x无法通过编译.<br>原因有人说是Cocos2d-x不支持C++11, 有人说是OS X自带的libc++库太旧的原因, Xcode4.6中会更新该库.<br>我是小菜鸟一只, 也分不清谁说的对.    </p>
<p>但我们可以通过修改这些代码, 采用boost的API来完成相应的工作.<br>而websocketpp这个项目又大量采用了boost, 所以修改为boost的API还是挺划算的.   </p>
<p>找到<code>socket_io_client.hpp</code>:<br><figure class="highlight cpp"><figcaption><span>socket_io_client.hpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//typedef std::function&lt;void (socketio_events&amp;, const Value&amp;)&gt; eventFunc;</span></div><div class="line"><span class="comment">//修改为</span></div><div class="line"><span class="keyword">typedef</span> boost::function&lt;<span class="keyword">void</span> (socketio_events&amp;, <span class="keyword">const</span> Value&amp;)&gt; eventFunc;</div><div class="line"></div><div class="line"><span class="comment">//std::unique_ptr&lt;boost::asio::deadline_timer&gt; m_heartbeatTimer;</span></div><div class="line"><span class="comment">//修改为</span></div><div class="line">boost::<span class="built_in">shared_ptr</span>&lt;boost::asio::deadline_timer&gt; m_heartbeatTimer;</div></pre></td></tr></table></figure></p>
<p>找到<code>socket_io_client.cpp</code>:<br><figure class="highlight cpp"><figcaption><span>socket_io_client.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//m_heartbeatTimer = std::unique_ptr&lt;boost::asio::deadline_timer&gt;(new boost::asio::deadline_timer(con-&gt;get_io_service(), boost::posix_time::seconds(0)));</span></div><div class="line"><span class="comment">//修改为</span></div><div class="line">m_heartbeatTimer = boost::<span class="built_in">shared_ptr</span>&lt;boost::asio::deadline_timer&gt;(<span class="keyword">new</span> boost::asio::deadline_timer(con-&gt;get_io_service(), boost::posix_time::seconds(<span class="number">0</span>)));</div></pre></td></tr></table></figure></p>
<p>打开<code>lib/rapidjson/include/rapidjson/document.h</code>:<br><figure class="highlight cpp"><figcaption><span>document.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//if (reader.Parse&lt;parseFlags&gt;(is, *this)) &#123;</span></div><div class="line">修改为</div><div class="line"><span class="keyword">if</span> (reader.<span class="keyword">template</span> Parse&lt;parseFlags&gt;(is, *<span class="keyword">this</span>)) &#123;<span class="string">"</span></div><div class="line"><span class="string">//这个是jsoncpp的一个bug, 新版本里面已经修复, 但socket_io_client绑定了旧版本, 暂未升级.</span></div></pre></td></tr></table></figure></p>
<p>这是整个项目应该就可以正常编译运行了. 如果没能正常运行, 你可能在某一步出错了,<br>可以在下面评论分享下你的问题, 如果已经找到解决办法, 也要把解决方法也贴出来, 分享给大家哦, 亲!</p>
<p>//将socket_io_client, websocketpp的cpp文件引入到项目.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;据说聊天室和游戏系统有很多相似之处, 并且很多游戏本身就带着多人聊天系统. 所以Pomelo将聊天室作为了一个例子.    &lt;/p&gt;
&lt;p&gt;开源是非常棒的思想和运动, 我简单提两点体会,&lt;br&gt;1.发现了问题可以不用等官方响应,自己有能力就可以马上修复. 2.你可以贡献自己的代码,很多人都可以贡献代码,可以让项目快速发展.&lt;br&gt;当然一旦你的代码被接受并被很多人使用, 心中的成就感是不言而喻的.    &lt;/p&gt;
&lt;p&gt;之所以要提到开源, 是因为今天我们要用到的东西基本上全部是开源的, 并且我们还要对其中的代码做一些修改才能正常工作. 再一次为开源鼓掌!     &lt;/p&gt;
&lt;p&gt;这并不是一篇Pomelo,或者Cocos2d-x的入门说明, 需要你对这两者都有一定的了解.&lt;br&gt;同时, 无论是Pomelo还是Cocos2d-x, 我都是新手, 如果文章中有错误的地方, 希望您能不吝指出.&lt;br&gt;您可以在文章下面留言, 或者在新浪微博上发微薄 @杨世玲&lt;br&gt;(需要说明的一点是, 请勿私信提问非隐私性技术问题, 我是希望您的问题, 我的或者其他朋友的回复,能被更多朋友搜索到,&lt;br&gt;我希望我们的交流, 能让更多朋友受到启发, 受益. 这也是对社区和世界和平的一点贡献吧.)    &lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
    
  </entry>
  
  <entry>
    <title>2d-x深读4:CCAutoReleasePool</title>
    <link href="http://www.young40.com/hexoblog/2013/01/03/2013-01-03-cocos2d-x-source-code-research-4-ccautoreleasepool/"/>
    <id>http://www.young40.com/hexoblog/2013/01/03/2013-01-03-cocos2d-x-source-code-research-4-ccautoreleasepool/</id>
    <published>2013-01-03T07:09:00.000Z</published>
    <updated>2018-02-07T15:54:22.412Z</updated>
    
    <content type="html"><![CDATA[<p><code>CCAutoReleasePool.h</code>主要定义了两个类<code>CCAutoReleasePool</code>和<code>CCPoolManager</code>.    </p>
<p>其实因为cocos2d-x自动管理内存的原因, 所以, 我们平时很少需要直接使用这两个类.<br>为了探究其中的自动管理内存的机制, 我们直接分析其代码.   </p>
<p>总体上来讲, 内存管理这块的机制难度或许比较大. 我研究了一天, 还是有诸多疑问.<br>暂时先放一放, 待我功力进化后再来继续研究这块.<br><a id="more"></a></p>
<ul>
<li>版本:<code>cocos2d-2.1beta3-x-2.1.0</code></li>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/cocoa/CCAutoReleasePool.h</code></li>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/cocoa/CCAutoReleasePool.cpp</code></li>
</ul>

<figure class="highlight cpp"><figcaption><span>CCAutoReleasePool\.h</span><a href="/hexoblog/downloads/code/cocos2d-x-research/2.1.1/cocos2dx/cocoa/CCAutoReleasePool.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明CCAutoreleasePool类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC_DLL</span> <span class="title">CCAutoreleasePool</span> :</span> <span class="keyword">public</span> CCObject</div><div class="line">{<span class="comment">//注意这个m_pCurReleasePool是一个私有成员. 居然没有加标号.</span></div><div class="line">    CCArray*    m_pManagedObjectArray;    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCAutoreleasePool(<span class="keyword">void</span>);</div><div class="line">    ~CCAutoreleasePool(<span class="keyword">void</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">(CCObject *pObject)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(CCObject *pObject)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC_DLL</span> <span class="title">CCPoolManager</span></span></div><div class="line"><span class="class">{</span><span class="comment">//下面这三个成员变量依然是私有的.</span></div><div class="line">    CCArray*    m_pReleasePoolStack;    </div><div class="line">    CCAutoreleasePool*                    m_pCurReleasePool;</div><div class="line"></div><div class="line">    <span class="function">CCAutoreleasePool* <span class="title">getCurReleasePool</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCPoolManager();</div><div class="line">    ~CCPoolManager();</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(CCObject* pObject)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObject</span><span class="params">(CCObject* pObject)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> CCPoolManager* <span class="title">sharedPoolManager</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">purgePoolManager</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//友元</span></div><div class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">CCAutoreleasePool</span>;</span></div><div class="line">};</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>CCAutoReleasePool\.cpp</span><a href="/hexoblog/downloads/code/cocos2d-x-research/2.1.1/cocos2dx/cocoa/CCAutoReleasePool.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> CCPoolManager* s_pPoolManager = <span class="literal">NULL</span>;<span class="comment">// 用作单例模式的静态变量.</span></div><div class="line"></div><div class="line">CCAutoreleasePool::CCAutoreleasePool(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    m_pManagedObjectArray = <span class="keyword">new</span> CCArray();</div><div class="line">    m_pManagedObjectArray-&gt;init();</div><div class="line">}</div><div class="line"></div><div class="line">CCAutoreleasePool::~CCAutoreleasePool(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    CC_SAFE_DELETE(m_pManagedObjectArray);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> CCAutoreleasePool::addObject(CCObject* pObject)</div><div class="line">{</div><div class="line">    m_pManagedObjectArray-&gt;addObject(pObject);</div><div class="line">    <span class="comment">// CCAutoreleasePool是CCObject的友元类, 可以直接访问CCObject的protect成员变量.</span></div><div class="line">    CCAssert(pObject-&gt;m_uReference &gt; <span class="number">1</span>, <span class="string">"reference count should be greater than 1"</span>);</div><div class="line">    ++(pObject-&gt;m_uAutoReleaseCount);</div><div class="line">    pObject-&gt;release(); <span class="comment">// no ref count, in this case autorelease pool added.</span></div><div class="line">}</div><div class="line"><span class="comment">// 下面这个遍历似乎是为了应对被多次加入pool</span></div><div class="line"><span class="keyword">void</span> CCAutoreleasePool::removeObject(CCObject* pObject)</div><div class="line">{</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pObject-&gt;m_uAutoReleaseCount; ++i)</div><div class="line">    {</div><div class="line">        m_pManagedObjectArray-&gt;removeObject(pObject, <span class="literal">false</span>);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">// 清空池</span></div><div class="line"><span class="keyword">void</span> CCAutoreleasePool::clear()</div><div class="line">{</div><div class="line">    <span class="keyword">if</span>(m_pManagedObjectArray-&gt;count() &gt; <span class="number">0</span>)</div><div class="line">    {</div><div class="line">        <span class="comment">//CCAutoreleasePool* pReleasePool;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></div><div class="line">        <span class="keyword">int</span> nIndex = m_pManagedObjectArray-&gt;count() - <span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">        CCObject* pObj = <span class="literal">NULL</span>;</div><div class="line">        CCARRAY_FOREACH_REVERSE(m_pManagedObjectArray, pObj)<span class="comment">//反序遍历</span></div><div class="line">        {</div><div class="line">            <span class="comment">// 这里还是令人费解, 为何会使用break, 而不是使用continue完成遍历????</span></div><div class="line">            <span class="keyword">if</span>(!pObj)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            --(pObj-&gt;m_uAutoReleaseCount);</div><div class="line">            <span class="comment">//(*it)-&gt;release();</span></div><div class="line">            <span class="comment">//delete (*it);</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></div><div class="line">            nIndex--;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">        }</div><div class="line"></div><div class="line">        m_pManagedObjectArray-&gt;removeAllObjects();</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// CCPoolManager的单例</span></div><div class="line">CCPoolManager* CCPoolManager::sharedPoolManager()</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (s_pPoolManager == <span class="literal">NULL</span>)</div><div class="line">    {</div><div class="line">        s_pPoolManager = <span class="keyword">new</span> CCPoolManager();</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> s_pPoolManager;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// 销毁当前manager</span></div><div class="line"><span class="keyword">void</span> CCPoolManager::purgePoolManager()</div><div class="line">{</div><div class="line">    CC_SAFE_DELETE(s_pPoolManager);</div><div class="line">}</div><div class="line"><span class="comment">//构造函数</span></div><div class="line">CCPoolManager::CCPoolManager()</div><div class="line">{</div><div class="line">    m_pReleasePoolStack = <span class="keyword">new</span> CCArray();    </div><div class="line">    m_pReleasePoolStack-&gt;init();</div><div class="line">    m_pCurReleasePool = <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="comment">// 析构函数</span></div><div class="line">CCPoolManager::~CCPoolManager()</div><div class="line">{</div><div class="line">     finalize();</div><div class="line"></div><div class="line">     <span class="comment">// 这个注释也让人费解. 为什么只移除第一个, 而不是遍历????</span></div><div class="line">     <span class="comment">// we only release the last autorelease pool here </span></div><div class="line">    m_pCurReleasePool = <span class="number">0</span>;</div><div class="line">     m_pReleasePoolStack-&gt;removeObjectAtIndex(<span class="number">0</span>);</div><div class="line"> </div><div class="line">     CC_SAFE_DELETE(m_pReleasePoolStack);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> CCPoolManager::finalize()</div><div class="line">{</div><div class="line">    <span class="keyword">if</span>(m_pReleasePoolStack-&gt;count() &gt; <span class="number">0</span>)</div><div class="line">    {</div><div class="line">        <span class="comment">//CCAutoreleasePool* pReleasePool;</span></div><div class="line">        CCObject* pObj = <span class="literal">NULL</span>;</div><div class="line">        CCARRAY_FOREACH(m_pReleasePoolStack, pObj)</div><div class="line">        {</div><div class="line">            <span class="comment">// 这里有点令人不解, 为什么遍历还没有完成就break了??? </span></div><div class="line">            <span class="comment">// 或许是因为pop push的方式不会在中间产生为NULL的池.</span></div><div class="line">            <span class="keyword">if</span>(!pObj)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            CCAutoreleasePool* pPool = (CCAutoreleasePool*)pObj;</div><div class="line">            pPool-&gt;clear();</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//创建一个新池, 注意其中pPool的引用计数的变化.</span></div><div class="line"><span class="keyword">void</span> CCPoolManager::push()</div><div class="line">{</div><div class="line">    CCAutoreleasePool* pPool = <span class="keyword">new</span> CCAutoreleasePool();       <span class="comment">//ref = 1</span></div><div class="line">    m_pCurReleasePool = pPool;</div><div class="line"></div><div class="line">    m_pReleasePoolStack-&gt;addObject(pPool);                   <span class="comment">//ref = 2</span></div><div class="line"></div><div class="line">    pPool-&gt;release();                                       <span class="comment">//ref = 1</span></div><div class="line">}</div><div class="line"><span class="comment">//销毁当前池</span></div><div class="line"><span class="keyword">void</span> CCPoolManager::pop()</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (! m_pCurReleasePool)</div><div class="line">    {</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">     <span class="keyword">int</span> nCount = m_pReleasePoolStack-&gt;count();</div><div class="line"></div><div class="line">    m_pCurReleasePool-&gt;clear();</div><div class="line"> </div><div class="line">      <span class="keyword">if</span>(nCount &gt; <span class="number">1</span>)</div><div class="line">      {<span class="comment">//注意这里removeObjectAtIndex会将当前池的引用技术减1, 从而销毁当前池.</span></div><div class="line">        m_pReleasePoolStack-&gt;removeObjectAtIndex(nCount<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="comment">//         if(nCount &gt; 1)</span></div><div class="line"><span class="comment">//         {</span></div><div class="line"><span class="comment">//             m_pCurReleasePool = m_pReleasePoolStack-&gt;objectAtIndex(nCount - 2);</span></div><div class="line"><span class="comment">//             return;</span></div><div class="line"><span class="comment">//         }</span></div><div class="line">        m_pCurReleasePool = (CCAutoreleasePool*)m_pReleasePoolStack-&gt;objectAtIndex(nCount - <span class="number">2</span>);</div><div class="line">    }</div><div class="line"><span class="comment">//如果没有意外, 这里会最少保留一个池不会被销毁. 但最后一个池还是会被清空..</span></div><div class="line">    <span class="comment">/*m_pCurReleasePool = NULL;*/</span></div><div class="line">}</div><div class="line"><span class="comment">// 从当前池中移除对象.</span></div><div class="line"><span class="keyword">void</span> CCPoolManager::removeObject(CCObject* pObject)</div><div class="line">{</div><div class="line">    CCAssert(m_pCurReleasePool, <span class="string">"current auto release pool should not be null"</span>);</div><div class="line"></div><div class="line">    m_pCurReleasePool-&gt;removeObject(pObject);</div><div class="line">}</div><div class="line"><span class="comment">//添加一个对象到当前池</span></div><div class="line"><span class="keyword">void</span> CCPoolManager::addObject(CCObject* pObject)</div><div class="line">{</div><div class="line">    getCurReleasePool()-&gt;addObject(pObject);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//形成单例模式</span></div><div class="line">CCAutoreleasePool* CCPoolManager::getCurReleasePool()</div><div class="line">{</div><div class="line">    <span class="keyword">if</span>(!m_pCurReleasePool)</div><div class="line">    {</div><div class="line">        push();</div><div class="line">    }</div><div class="line"></div><div class="line">    CCAssert(m_pCurReleasePool, <span class="string">"current auto release pool should not be null"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> m_pCurReleasePool;</div><div class="line">}</div></pre></td></tr></table></figure>
<ul>
<li>参考1: <a href="http://4137613.blog.51cto.com/4127613/784134" target="_blank" rel="noopener">http://4137613.blog.51cto.com/4127613/784134</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;CCAutoReleasePool.h&lt;/code&gt;主要定义了两个类&lt;code&gt;CCAutoReleasePool&lt;/code&gt;和&lt;code&gt;CCPoolManager&lt;/code&gt;.    &lt;/p&gt;
&lt;p&gt;其实因为cocos2d-x自动管理内存的原因, 所以, 我们平时很少需要直接使用这两个类.&lt;br&gt;为了探究其中的自动管理内存的机制, 我们直接分析其代码.   &lt;/p&gt;
&lt;p&gt;总体上来讲, 内存管理这块的机制难度或许比较大. 我研究了一天, 还是有诸多疑问.&lt;br&gt;暂时先放一放, 待我功力进化后再来继续研究这块.&lt;br&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="Cocos2d-x 源代码研究" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/Cocos2d-x-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>2d-x深读3:CCObject</title>
    <link href="http://www.young40.com/hexoblog/2012/12/31/2012-12-31-cocos2d-x-source-code-research-3-ccobject/"/>
    <id>http://www.young40.com/hexoblog/2012/12/31/2012-12-31-cocos2d-x-source-code-research-3-ccobject/</id>
    <published>2012-12-31T09:21:00.000Z</published>
    <updated>2018-02-07T15:53:53.687Z</updated>
    
    <content type="html"><![CDATA[<p>CCObject是绝大部分cocos2d-x类的基类, 我们就从这里一步一步揭开cocos2d-x的奥秘.   </p>
<p>CCObject承担了两个重要的功能, 拷贝机制和内存管理.    </p>
<p>##拷贝机制<br>打开<code>CCObject.h</code> 首先看到的是类CCCopying, 而CCObject是从该类派生. 从这个意义上来讲CCCopying才是大部分类的基类.<br>但CCCopying其实非常简单, 再加上没有其他类从CCCopying派生, 所以说CCObject才是大部分类的基类也是不错的. 我认为CCCopying仅仅是一个接口性质.   </p>
<p>CCCopying这个类非常简单, 只有一个成员函数copyWithZone(CCZone *pZone); 简单到其实现只是为了报错. 尽管如此, 但其却承担了拷贝机制这一重要的功能.   </p>
<p>cocos2d-x和cocos2d-iphone是近亲, 所以cocos2d-x在API上会和cocos2d-iphone保持一致, 代码上也多有借鉴. CCObject明显就有很多NSObject的痕迹.<br>当然我对Objective-c并不熟悉, 这里都是些猜测罢了. copyWithZone或许就是借鉴了Obj-c.   </p>
<p>我们先来看下拷贝机制, 至于CCObject的代码倒不忙着看.   </p>
<a id="more"></a>
<p>这两段代码来至于类CCArray, 我们可以看到调用了原对象的copy()来拷贝一份新的CCArray.<br>而copy()则定义于CCObject中, 其工作就是调用copyWithZone.  </p>
<figure class="highlight cpp"><figcaption><span>CCArray</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">CCArray* CCArray::createWithArray(CCArray* otherArray)</div><div class="line">&#123;</div><div class="line">    CCArray* pRet = (CCArray*)otherArray-&gt;copy();</div><div class="line">    pRet-&gt;autorelease();</div><div class="line">    <span class="keyword">return</span> pRet;</div><div class="line">&#125;</div><div class="line"><span class="comment">/////----------////</span></div><div class="line">CCObject* CCArray::copyWithZone(CCZone* pZone)</div><div class="line">&#123;</div><div class="line">    CCAssert(pZone == <span class="literal">NULL</span>, <span class="string">"CCArray should not be inherited."</span>);</div><div class="line">    CCArray* pArray = <span class="keyword">new</span> CCArray();</div><div class="line">    pArray-&gt;initWithCapacity(<span class="keyword">this</span>-&gt;data-&gt;num &gt; <span class="number">0</span> ? <span class="keyword">this</span>-&gt;data-&gt;num : <span class="number">1</span>);</div><div class="line"></div><div class="line">    CCObject* pObj = <span class="literal">NULL</span>;</div><div class="line">    CCObject* pTmpObj = <span class="literal">NULL</span>;</div><div class="line">    CCARRAY_FOREACH(<span class="keyword">this</span>, pObj)</div><div class="line">    &#123;</div><div class="line">        pTmpObj = pObj-&gt;copy();</div><div class="line">        pArray-&gt;addObject(pTmpObj);</div><div class="line">        pTmpObj-&gt;release();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里面牵涉到两个概念, 深拷贝和浅拷贝. 不清楚的大家可以搜索下, 简而言之, 深拷贝才真正的完全拷贝. cocos2d-x实现的是深拷贝.<br>我们在上面CCArray::copyWithZone中可以看到拷贝时对array的各个成员也执行了copy()的动作.<br>这样才能防止如果obj2是obj1的浅拷贝, 很容易出现array的元素有可能被过早释放的情况.   </p>
<p>这里我们还可以一并说下CCZone这个类, 这个类也很简单, 只有一个构造函数和成员变量.<br><figure class="highlight cpp"><figcaption><span>CCZone</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC_DLL</span> <span class="title">CCZone</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCZone(CCObject *pObject = <span class="literal">NULL</span>);</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCObject *m_pCopyObject;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我想CCZone存在的目的就是为了调用copyWithZone的时候对象传递方便.比如我们还可以看下CCSpeed的copyWithZone函数.<br><figure class="highlight cpp"><figcaption><span>CCSpeed</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">CCObject *CCSpeed::copyWithZone(CCZone *pZone)</div><div class="line">&#123;</div><div class="line">    CCZone* pNewZone = <span class="literal">NULL</span>;</div><div class="line">    CCSpeed* pRet = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(pZone &amp;&amp; pZone-&gt;m_pCopyObject) <span class="comment">//in case of being called at sub class</span></div><div class="line">    &#123;</div><div class="line">        pRet = (CCSpeed*)(pZone-&gt;m_pCopyObject);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        pRet = <span class="keyword">new</span> CCSpeed();</div><div class="line">        pZone = pNewZone = <span class="keyword">new</span> CCZone(pRet);</div><div class="line">    &#125;</div><div class="line">    CCAction::copyWithZone(pZone);</div><div class="line"></div><div class="line">    pRet-&gt;initWithAction( (CCActionInterval*)(m_pInnerAction-&gt;copy()-&gt;autorelease()) , m_fSpeed );</div><div class="line">    </div><div class="line">    CC_SAFE_DELETE(pNewZone);</div><div class="line">    <span class="keyword">return</span> pRet;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到构建了一个pZone, 然后调用父类的<code>CCAction::copyWithZone(pZone);</code>.<br>完全是为了copyWithZone方便传递变量而创建的.   </p>
<p>拷贝机制看起来有点复杂, 但其实用起来很简单. 我觉得就两点, 1,使用copy()调用 2.各个类对自己的copyWithZone负责.</p>
<p>##内存管理<br>cocos2d-x的内存管理采用了引用计数的方法. 曾经看到过有人吐槽其内存管理在多线程下不好用.   </p>
<p>CCObject及其子类的对象在创建时, 引用计数默认为1, 每次retain后引用计数加1. 每次release后引用计数减1.<br>被自动管理的对象引用计数为0时, 会被自动释放.</p>
<p>老G总结的内存管理使用的几点原则(见参考1):   </p>
<ul>
<li>原则1: 谁生成(new, copy)谁负责release.   </li>
<li>原则2: 谁retain, 谁负责release.    </li>
<li>原则3: 对于使用了autorelease的对象则不必管他.   </li>
</ul>
<p>##几个常用的函数指针<br>当我看到下面这两句的时候, 我完全懵了.   </p>
<pre><code class="cpp"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_SCHEDULE)</span><span class="params">(<span class="keyword">float</span>)</span></span>;
<span class="meta">#<span class="meta-keyword">define</span> schedule_selector(_SELECTOR) (SEL_SCHEDULE)(&amp;_SELECTOR)</span>
</code></pre>
<p>如果你也对函数指针不熟悉的话, 请翻下相关内容吧.<br>在这两句里面, 第一句其实是定义了一个返回类型为void的, 名字为SEL_SCHEDULE的, 参数为float的函数指针.<br>第二句其实是一个函数类型转换, 将(&amp;_SELECTOR)强制转换成SEL_SCHEDULE类型的函数指针.   </p>
<p>通常需要回调函数的时候, 就需要用到这些函数指针. 这里就不再赘述, 以后应该会提及相关知识.   </p>
<p>好, 我们接下来直接翻代码吧.  </p>
<ul>
<li>版本:<code>cocos2d-2.1beta3-x-2.1.0</code></li>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/cocoa/CCObject.h</code></li>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/cocoa/CCObject.cpp</code></li>
</ul>
<figure class="highlight cpp"><figcaption><span>CCobject\.h</span><a href="/hexoblog/downloads/code/cocos2d-x-research/2.1.1/cocos2dx/cocoa/CCObject.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC_DLL</span> <span class="title">CCCopying</span></span></div><div class="line"><span class="class">{</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> CCObject* <span class="title">copyWithZone</span><span class="params">(CCZone* pZone)</span></span>;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC_DLL</span> <span class="title">CCObject</span> :</span> <span class="keyword">public</span> CCCopying</div><div class="line">{</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>        m_uID;<span class="comment">//这两个是支持lua等脚本语言用的, 我们不去管他.</span></div><div class="line">    <span class="keyword">int</span>                 m_nLuaID;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>        m_uReference;<span class="comment">//引用计数</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>        m_uAutoReleaseCount;<span class="comment">//autorelease计数</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCObject(<span class="keyword">void</span>);</div><div class="line">    <span class="keyword">virtual</span> ~CCObject(<span class="keyword">void</span>);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retain</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function">CCObject* <span class="title">autorelease</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function">CCObject* <span class="title">copy</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSingleReference</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">retainCount</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">isEqual</span><span class="params">(<span class="keyword">const</span> CCObject* pObject)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> dt)</span> </span>{CC_UNUSED_PARAM(dt);};</div><div class="line">   <span class="comment">//CCAutoreleasePool作为友元类 </span></div><div class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">CCAutoreleasePool</span>;</span></div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">//几个常用的函数指针.</span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_SCHEDULE)</span><span class="params">(<span class="keyword">float</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_CallFunc)</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_CallFuncN)</span><span class="params">(CCNode*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_CallFuncND)</span><span class="params">(CCNode*, <span class="keyword">void</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_CallFuncO)</span><span class="params">(CCObject*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_MenuHandler)</span><span class="params">(CCObject*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(CCObject::*SEL_EventHandler)</span><span class="params">(CCEvent*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(CCObject::*SEL_Compare)</span><span class="params">(CCObject*)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> schedule_selector(_SELECTOR) (SEL_SCHEDULE)(&amp;_SELECTOR)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> callfunc_selector(_SELECTOR) (SEL_CallFunc)(&amp;_SELECTOR)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> callfuncN_selector(_SELECTOR) (SEL_CallFuncN)(&amp;_SELECTOR)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> callfuncND_selector(_SELECTOR) (SEL_CallFuncND)(&amp;_SELECTOR)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> callfuncO_selector(_SELECTOR) (SEL_CallFuncO)(&amp;_SELECTOR)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> menu_selector(_SELECTOR) (SEL_MenuHandler)(&amp;_SELECTOR)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> event_selector(_SELECTOR) (SEL_EventHandler)(&amp;_SELECTOR)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> compare_selector(_SELECTOR) (SEL_Compare)(&amp;_SELECTOR)</span></div></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>CCobject\.cpp</span><a href="/hexoblog/downloads/code/cocos2d-x-research/2.1.1/cocos2dx/cocoa/CCObject.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">CCObject* CCCopying::copyWithZone(CCZone *pZone)</div><div class="line">{<span class="comment">//CCObject的派生类需要调用copy()则必须重写该函数</span></div><div class="line">    CC_UNUSED_PARAM(pZone);</div><div class="line">    CCAssert(<span class="number">0</span>, <span class="string">"not implement"</span>);<span class="comment">//不重写会报错.</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"></div><div class="line">CCObject::CCObject(<span class="keyword">void</span>)</div><div class="line">:m_uAutoReleaseCount(<span class="number">0</span>)</div><div class="line">,m_uReference(<span class="number">1</span>) <span class="comment">// 引用计数默认为1</span></div><div class="line">,m_nLuaID(<span class="number">0</span>)</div><div class="line">{</div><div class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uObjectCount = <span class="number">0</span>;</div><div class="line">    m_uID = ++uObjectCount;<span class="comment">//脚本语言相关, 不去管他.</span></div><div class="line">}</div><div class="line"></div><div class="line">CCObject::~CCObject(<span class="keyword">void</span>)</div><div class="line">{<span class="comment">//析构函数</span></div><div class="line">    <span class="keyword">if</span> (m_uAutoReleaseCount &gt; <span class="number">0</span>)</div><div class="line">    {<span class="comment">//自动引用计数则从管理池中删除</span></div><div class="line">        CCPoolManager::sharedPoolManager()-&gt;removeObject(<span class="keyword">this</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">if</span> (m_nLuaID)<span class="comment">//脚本语言相关.</span></div><div class="line">    {</div><div class="line">        CCScriptEngineManager::sharedManager()-&gt;getScriptEngine()-&gt;removeScriptObjectByCCObject(<span class="keyword">this</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span></div><div class="line">    {<span class="comment">//看起来脚本语言支持被深度嵌入, 如果能设置个宏直接去掉其支持多好.</span></div><div class="line">        CCScriptEngineProtocol* pEngine = CCScriptEngineManager::sharedManager()-&gt;getScriptEngine();</div><div class="line">        <span class="keyword">if</span> (pEngine != <span class="literal">NULL</span> &amp;&amp; pEngine-&gt;getScriptType() == kScriptTypeJavascript)</div><div class="line">        {</div><div class="line">            pEngine-&gt;removeScriptObjectByCCObject(<span class="keyword">this</span>);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">// copy实质上是对copyWithZone的调用.</span></div><div class="line">CCObject* CCObject::copy()</div><div class="line">{</div><div class="line">    <span class="keyword">return</span> copyWithZone(<span class="number">0</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> CCObject::release(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    CCAssert(m_uReference &gt; <span class="number">0</span>, <span class="string">"reference count should greater than 0"</span>);</div><div class="line">    --m_uReference;<span class="comment">//引用计数自减</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (m_uReference == <span class="number">0</span>)</div><div class="line">    {<span class="comment">//如果引用计数为0, 调用release会立即释放内存.</span></div><div class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> CCObject::retain(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    CCAssert(m_uReference &gt; <span class="number">0</span>, <span class="string">"reference count should greater than 0"</span>);</div><div class="line">    ++m_uReference;<span class="comment">//引用计数自增.</span></div><div class="line">}</div><div class="line"></div><div class="line">CCObject* CCObject::autorelease(<span class="keyword">void</span>)</div><div class="line">{<span class="comment">//autorelease将对象加入自动内存管理池.</span></div><div class="line">    CCPoolManager::sharedPoolManager()-&gt;addObject(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">bool</span> CCObject::isSingleReference(<span class="keyword">void</span>)</div><div class="line">{<span class="comment">//判断对象是否仅被引用了一次</span></div><div class="line">    <span class="keyword">return</span> m_uReference == <span class="number">1</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> CCObject::retainCount(<span class="keyword">void</span>)</div><div class="line">{<span class="comment">//返回引用次数</span></div><div class="line">    <span class="keyword">return</span> m_uReference;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">bool</span> CCObject::isEqual(<span class="keyword">const</span> CCObject *pObject)</div><div class="line">{<span class="comment">//判断对象是否为同一个对象.</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span> == pObject;</div><div class="line">}</div></pre></td></tr></table></figure>
<ul>
<li>参考1: <a href="http://4137613.blog.51cto.com/4127613/784134" target="_blank" rel="noopener">http://4137613.blog.51cto.com/4127613/784134</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CCObject是绝大部分cocos2d-x类的基类, 我们就从这里一步一步揭开cocos2d-x的奥秘.   &lt;/p&gt;
&lt;p&gt;CCObject承担了两个重要的功能, 拷贝机制和内存管理.    &lt;/p&gt;
&lt;p&gt;##拷贝机制&lt;br&gt;打开&lt;code&gt;CCObject.h&lt;/code&gt; 首先看到的是类CCCopying, 而CCObject是从该类派生. 从这个意义上来讲CCCopying才是大部分类的基类.&lt;br&gt;但CCCopying其实非常简单, 再加上没有其他类从CCCopying派生, 所以说CCObject才是大部分类的基类也是不错的. 我认为CCCopying仅仅是一个接口性质.   &lt;/p&gt;
&lt;p&gt;CCCopying这个类非常简单, 只有一个成员函数copyWithZone(CCZone *pZone); 简单到其实现只是为了报错. 尽管如此, 但其却承担了拷贝机制这一重要的功能.   &lt;/p&gt;
&lt;p&gt;cocos2d-x和cocos2d-iphone是近亲, 所以cocos2d-x在API上会和cocos2d-iphone保持一致, 代码上也多有借鉴. CCObject明显就有很多NSObject的痕迹.&lt;br&gt;当然我对Objective-c并不熟悉, 这里都是些猜测罢了. copyWithZone或许就是借鉴了Obj-c.   &lt;/p&gt;
&lt;p&gt;我们先来看下拷贝机制, 至于CCObject的代码倒不忙着看.   &lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="Cocos2d-x 源代码研究" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/Cocos2d-x-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>一步一步CocosBuilder(4)[完结]</title>
    <link href="http://www.young40.com/hexoblog/2012/12/29/2012-12-29-cocosbuilder-step-by-step-part-four/"/>
    <id>http://www.young40.com/hexoblog/2012/12/29/2012-12-29-cocosbuilder-step-by-step-part-four/</id>
    <published>2012-12-29T02:54:00.000Z</published>
    <updated>2018-02-07T15:53:53.687Z</updated>
    
    <content type="html"><![CDATA[<p>这一节也是很轻松, 主要是牵涉到Timeline的切换. 其他的都是简单的界面制作.<br>所以CocosBuilder的威力也体现在这里, 很少的代码就能驱动界面了.   </p>
<p>我们这次先做<code>Particle System</code>, <code>Scroll View</code>, 最后以<code>Animations</code>收官.   </p>
<p>#####1<br>制作<code>Particle System</code>和<code>Scroll View</code>的界面很简单,我们也是以程序为重点, 所以不再赘述.<br>只需要一句<code>this-&gt;openTest(&quot;ccb/Scroll.ccbi&quot;);</code>就可以调用新的界面了.<br>其他诸如绑定之类相信大家已经是轻车熟路啦.    </p>
<a id="more"></a>
<img src="/hexoblog/upload/2012-12/ccb-sbs-4-001.png">
<img src="/hexoblog/upload/2012-12/ccb-sbs-4-002.png">
<p>#####2<br>好吧, 我承认一点, 制作<code>Animations</code>的界面的时候, 我直接复制了例子中的节点.<br>5个Timeline, 还是很复杂的, 应该是一个非常精细的工作. 向美术们致敬.<br><figure class="highlight cpp"><figcaption><span>AnimationsLayer.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationsLayer</span></span></div><div class="line"><span class="class">:</span> <span class="keyword">public</span> cocos2d::CCLayer</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBSelectorResolver</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    AnimationsLayer();</div><div class="line">    ~AnimationsLayer();</div><div class="line">    </div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(AnimationsLayer, create);</div><div class="line">    </div><div class="line">    <span class="keyword">virtual</span> cocos2d::<span class="function">SEL_MenuHandler <span class="title">onResolveCCBCCMenuItemSelector</span><span class="params">(CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;</div><div class="line">    <span class="keyword">virtual</span> cocos2d::extension::<span class="function">SEL_CCControlHandler <span class="title">onResolveCCBCCControlSelector</span><span class="params">(CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAnimationManager</span><span class="params">(cocos2d::extension::CCBAnimationManager *pAnimationManager)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onIdle</span><span class="params">(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onWave</span><span class="params">(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onJump</span><span class="params">(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFunky</span><span class="params">(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    cocos2d::extension::CCBAnimationManager *mAnimationManager;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationsLayerLoader</span> :</span> <span class="keyword">public</span> cocos2d::extension::CCNodeLoader</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(AnimationsLayerLoader, loader);</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(AnimationsLayer);</div><div class="line">&#125;;</div><div class="line">``` </div><div class="line">``` cpp AnimationsLayer.cpp</div><div class="line">AnimationsLayer::AnimationsLayer()</div><div class="line">: mAnimationManager(<span class="literal">NULL</span>)</div><div class="line">&#123;&#125;</div><div class="line"></div><div class="line">AnimationsLayer::~AnimationsLayer()</div><div class="line">&#123;</div><div class="line">    CC_SAFE_RELEASE_NULL(mAnimationManager);</div><div class="line">&#125;</div><div class="line"></div><div class="line">SEL_MenuHandler AnimationsLayer::onResolveCCBCCMenuItemSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SEL_CCControlHandler AnimationsLayer::onResolveCCBCCControlSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    CCB_SELECTORRESOLVER_CCCONTROL_GLUE(<span class="keyword">this</span>, <span class="string">"onIdle"</span>, AnimationsLayer::onIdle);</div><div class="line">    CCB_SELECTORRESOLVER_CCCONTROL_GLUE(<span class="keyword">this</span>, <span class="string">"onJump"</span>, AnimationsLayer::onJump);</div><div class="line">    CCB_SELECTORRESOLVER_CCCONTROL_GLUE(<span class="keyword">this</span>, <span class="string">"onWave"</span>, AnimationsLayer::onWave);</div><div class="line">    CCB_SELECTORRESOLVER_CCCONTROL_GLUE(<span class="keyword">this</span>, <span class="string">"onFunky"</span>, AnimationsLayer::onFunky);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> AnimationsLayer::setAnimationManager(cocos2d::extension::CCBAnimationManager *pAnimationManager)</div><div class="line">&#123;</div><div class="line">    CC_SAFE_RELEASE_NULL(mAnimationManager);</div><div class="line">    mAnimationManager = pAnimationManager;</div><div class="line">    CC_SAFE_RETAIN(mAnimationManager);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> AnimationsLayer::onIdle(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration(<span class="string">"Idle"</span>, <span class="number">0.3f</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> AnimationsLayer::onJump(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration(<span class="string">"Jump"</span>, <span class="number">0.3f</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> AnimationsLayer::onWave(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration(<span class="string">"Wave"</span>, <span class="number">0.3f</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> AnimationsLayer::onFunky(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration(<span class="string">"Funky"</span>, <span class="number">0.3f</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>整个代码还是很简单. 和以前的几个例子稍微有点不同的是在调用的时候, 需要把<code>CCBReader</code>里面的<code>AnimationManger</code>传入.<br>好, 还是看下调用的代码吧.<br><figure class="highlight cpp"><figcaption><span>MainScene.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainScene::onAnimations(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * pCCBFileName = <span class="string">"ccb/Animations.ccbi"</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * pCCNodeName = <span class="string">"AnimationsLayer"</span>;</div><div class="line">    cocos2d::extension::CCNodeLoader * pCCNodeLoader = AnimationsLayerLoader::loader();</div><div class="line">    </div><div class="line">    CCScene *scene = CCScene::create();</div><div class="line">    </div><div class="line">    CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();</div><div class="line">    </div><div class="line">    lib-&gt;registerCCNodeLoader(<span class="string">"HeaderLayer"</span>, HeaderLayerLoader::loader());</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (pCCNodeName!=<span class="literal">NULL</span> &amp;&amp; pCCNodeLoader!=<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        lib-&gt;registerCCNodeLoader(pCCNodeName, pCCNodeLoader);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    CCBReader *reader = <span class="keyword">new</span> CCBReader(lib);</div><div class="line">    CCNode *node = reader-&gt;readNodeGraphFromFile(pCCBFileName, <span class="keyword">this</span>);</div><div class="line">    reader-&gt;autorelease();</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//获取AnimationManger 并传给AnimationsLayer</span></div><div class="line">        ((AnimationsLayer*)node) -&gt;setAnimationManager(reader-&gt;getAnimationManager());</div><div class="line">        </div><div class="line">        scene-&gt;addChild(node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">this</span>-&gt;mTitleLabelTTF-&gt;setString(pCCBFileName);</div><div class="line">    </div><div class="line">    CCDirector::sharedDirector()-&gt;pushScene(scene);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/hexoblog/upload/2012-12/ccb-sbs-4-003.png">
<p>###后记<br>看到微博上@做游戏的老G 吐槽说CocosBuilder如何不好用, 学习难度比较大. 我也是很认可这一点.<br>但是只要是坚持把TestCpp例子完全读完了, 相信掌握CocosBuilder也是很快能够做到的.<br>既然你看完了这个教程. 相信你也已经能够很好地驾驭CocosBuilder. 关键还在实践呦!    </p>
<p>微博上@Ghost_233 说了一个很好的思路, 直接从ccb文件中生成对应的C++类, 而且他还做了一些实践.<br>我暂时还没有研究他的代码, 不过肯定是可行. 这是一个很赞的思路.<br>希望大家能动手, 最好合作出来一个较好的工具来, 我想, 是不是集成到CocosBuilder会更好?   </p>
<p>谢谢大家耐心看完我的文章.   </p>
<p><hr><br>代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> </p>
<ul>
<li>本文是系列文章, 请查看其他文章:</li>
<li><a href="http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/" target="_blank" rel="noopener">一步一步CocosBuilder(1)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/" target="_blank" rel="noopener">一步一步CocosBuilder(2)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/" target="_blank" rel="noopener">一步一步CocosBuilder(3)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/" target="_blank" rel="noopener">一步一步CocosBuilder(4)完结</a></li>
</ul>
<p>谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.</p>
<p>新浪微博: <a href="http://weibo.com/young40" target="_blank" rel="noopener">@杨世玲</a> <a href="http://weibo.com/young40" target="_blank" rel="noopener">http://weibo.com/young40</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一节也是很轻松, 主要是牵涉到Timeline的切换. 其他的都是简单的界面制作.&lt;br&gt;所以CocosBuilder的威力也体现在这里, 很少的代码就能驱动界面了.   &lt;/p&gt;
&lt;p&gt;我们这次先做&lt;code&gt;Particle System&lt;/code&gt;, &lt;code&gt;Scroll View&lt;/code&gt;, 最后以&lt;code&gt;Animations&lt;/code&gt;收官.   &lt;/p&gt;
&lt;p&gt;#####1&lt;br&gt;制作&lt;code&gt;Particle System&lt;/code&gt;和&lt;code&gt;Scroll View&lt;/code&gt;的界面很简单,我们也是以程序为重点, 所以不再赘述.&lt;br&gt;只需要一句&lt;code&gt;this-&amp;gt;openTest(&amp;quot;ccb/Scroll.ccbi&amp;quot;);&lt;/code&gt;就可以调用新的界面了.&lt;br&gt;其他诸如绑定之类相信大家已经是轻车熟路啦.    &lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="CocosBuilder" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/CocosBuilder/"/>
    
    
  </entry>
  
  <entry>
    <title>一步一步CocosBuilder(3)</title>
    <link href="http://www.young40.com/hexoblog/2012/12/28/2012-12-28-cocosbuilder-step-by-step-part-three/"/>
    <id>http://www.young40.com/hexoblog/2012/12/28/2012-12-28-cocosbuilder-step-by-step-part-three/</id>
    <published>2012-12-27T16:54:00.000Z</published>
    <updated>2018-02-07T15:53:53.686Z</updated>
    
    <content type="html"><![CDATA[<p>今天要说的内容比较轻松, 重要的知识点不多.<br>目标是实现<code>Menus &amp; Items</code>, <code>Sprites &amp; 9 Slice</code>, <code>Buttons &amp; Labels</code>.   </p>
<p>#####1<br>首先我们在CocosBuilder中建立一个新的<code>Header.ccb</code>.具体请参见CocosBuilder的项目.<br>在创建的时候,勾选<code>Full Sceen</code>, 并且将分辨率的<code>Height</code>都修改为40.<br>这个文件很简单, 根节点下只包含一个<code>CCLayerColor</code>,根节点的<code>Custom class</code>设置为<code>HeaderLayer</code>.<br><code>CCLayerColor</code>下面包含一个<code>CCLabelTTF</code>和<code>CCMenu</code>.<br><code>CCLabelTTF</code>的变量绑定为类型<code>Owner var</code>, 值为<code>mTitleLabelTTF</code>.<br><code>CCMenu</code>包含一个<code>CCMenuItemImage</code>. <code>CCMenuItemImage</code>的<code>Selector</code>属性设置为<code>onBackClicked</code>.<br>这个ccb作为一个公用的元素被其他ccb文件所引用. 是属于模块化的一个例子.<br>然后我们在Xcode中新建一个<code>HeaderLayer</code>类, 并同时声明一个<code>HeaderLayerLoader</code>类.   </p>
<a id="more"></a>
<figure class="highlight cpp"><figcaption><span>HeaderLayer.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeaderLayer</span></span></div><div class="line"><span class="class">:</span> <span class="keyword">public</span> cocos2d::CCLayer</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBSelectorResolver</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(HeaderLayer, create);</div><div class="line">    </div><div class="line">    <span class="keyword">virtual</span> cocos2d::<span class="function">SEL_MenuHandler <span class="title">onResolveCCBCCMenuItemSelector</span><span class="params">(CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;</div><div class="line">    <span class="keyword">virtual</span> cocos2d::extension::<span class="function">SEL_CCControlHandler <span class="title">onResolveCCBCCControlSelector</span><span class="params">(CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBackClicked</span><span class="params">(CCObject *pSender)</span></span>;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeaderLayerLoader</span> :</span> <span class="keyword">public</span> cocos2d::extension::CCLayerLoader</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(HeaderLayerLoader, loader);</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(HeaderLayer);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>HeaderLayer.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SEL_MenuHandler HeaderLayer::onResolveCCBCCMenuItemSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(<span class="keyword">this</span>, <span class="string">"onBackClicked"</span>, HeaderLayer::onBackClicked);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SEL_CCControlHandler HeaderLayer::onResolveCCBCCControlSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> HeaderLayer::onBackClicked(cocos2d::CCObject *pSender)</div><div class="line">&#123;</div><div class="line">    CCDirector::sharedDirector()-&gt;popScene();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####2<br>在CocosBuilder中新建一个<code>Menus.ccb</code>, 并将根节点<code>Custom class</code>设置为<code>MenuLayer</code>.<br>再加入几个<code>CCMenuItemImage</code>, Selector分别设置为<code>onPressA</code>, <code>onPressB</code>, <code>onPressC</code>.<br>再加入一个<code>CCLabelBMFont</code>, 绑定<code>Doc root var</code>, 值为<code>mMessageLabelBMFont</code>.<br>在Xcode中新建一个类<code>MenuLayer</code>, 并且在<code>MenuLayer.h</code>中同时声明一个<code>MenuLayerLoader</code>类.<br><figure class="highlight cpp"><figcaption><span>MenuLayer.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuLayer</span></span></div><div class="line"><span class="class">:</span> <span class="keyword">public</span> cocos2d::CCLayer</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBMemberVariableAssigner</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBSelectorResolver</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MenuLayer();</div><div class="line">    ~MenuLayer();</div><div class="line">    </div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MenuLayer, create);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">onAssignCCBMemberVariable</span><span class="params">(CCObject* pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pMemberVariableName, CCNode* pNode)</span></span>;</div><div class="line">    <span class="keyword">virtual</span> cocos2d::<span class="function">SEL_MenuHandler <span class="title">onResolveCCBCCMenuItemSelector</span><span class="params">(CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;</div><div class="line">    <span class="keyword">virtual</span> cocos2d::extension::<span class="function">SEL_CCControlHandler <span class="title">onResolveCCBCCControlSelector</span><span class="params">(CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPressA</span><span class="params">(cocos2d::CCObject *pSender)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPressB</span><span class="params">(cocos2d::CCObject *pSender)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPressC</span><span class="params">(cocos2d::CCObject *pSender)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    cocos2d::CCLabelBMFont *mMessageLabelBMFont;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuLayerLoader</span> :</span> <span class="keyword">public</span> cocos2d::extension::CCNodeLoaderLibrary</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MenuLayerLoader, loader);</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MenuLayer);    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><figcaption><span>MenuLayer.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">MenuLayer::MenuLayer()</div><div class="line">: mMessageLabelBMFont(<span class="literal">NULL</span>)</div><div class="line">&#123;&#125;</div><div class="line"></div><div class="line">MenuLayer::~MenuLayer()</div><div class="line">&#123;</div><div class="line">    CC_SAFE_DELETE(mMessageLabelBMFont);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> MenuLayer::onAssignCCBMemberVariable(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pMemberVariableName, cocos2d::CCNode *pNode)</div><div class="line">&#123;</div><div class="line">    CCB_MEMBERVARIABLEASSIGNER_GLUE(<span class="keyword">this</span>, <span class="string">"mMessageLabelBMFont"</span>, CCLabelBMFont*, <span class="keyword">this</span>-&gt;mMessageLabelBMFont);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SEL_MenuHandler MenuLayer::onResolveCCBCCMenuItemSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(<span class="keyword">this</span>, <span class="string">"onPressA"</span>, MenuLayer::onPressA);</div><div class="line">    CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(<span class="keyword">this</span>, <span class="string">"onPressB"</span>, MenuLayer::onPressB);</div><div class="line">    CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(<span class="keyword">this</span>, <span class="string">"onPressC_NO_Match"</span>, MenuLayer::onPressC);</div><div class="line">   <span class="comment">//注意这里, 我们给第三个绑定了一个不存在的SelectorName. </span></div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SEL_CCControlHandler MenuLayer::onResolveCCBCCControlSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MenuLayer::onPressA(cocos2d::CCObject *pSender)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mMessageLabelBMFont-&gt;setString(<span class="string">"A pressed."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MenuLayer::onPressB(cocos2d::CCObject *pSender)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mMessageLabelBMFont-&gt;setString(<span class="string">"B pressed."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MenuLayer::onPressC(cocos2d::CCObject *pSender)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mMessageLabelBMFont-&gt;setString(<span class="string">"C pressed."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####3<br>或许有点着急了吧, 我们如何让这个运行起来呢?<br>首先给<code>MainScene</code>增加一个新函数的声明及定义, 还需要增加一个变量用于和<code>Header.ccb</code>中的<code>mTitleLabelTTF</code>绑定.<br><figure class="highlight cpp"><figcaption><span>MainScene.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">openTest</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pCCBFileName, <span class="keyword">const</span> <span class="keyword">char</span> * pCCNodeName = <span class="literal">NULL</span>, cocos2d::extension::CCNodeLoader * pCCNodeLoader = <span class="literal">NULL</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    cocos2d::CCLabelTTF *mTitleLabelTTF;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><figcaption><span>MainScene.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainScene::openTest(<span class="keyword">const</span> <span class="keyword">char</span> * pCCBFileName, <span class="keyword">const</span> <span class="keyword">char</span> * pCCNodeName, cocos2d::extension::CCNodeLoader * pCCNodeLoader)</div><div class="line">&#123;</div><div class="line">    CCScene *scene = CCScene::create();</div><div class="line">    </div><div class="line">    CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();</div><div class="line">    </div><div class="line">    lib-&gt;registerCCNodeLoader(<span class="string">"HeaderLayer"</span>, HeaderLayerLoader::loader());</div><div class="line">    lib-&gt;registerCCNodeLoader(pCCNodeName, pCCNodeLoader);</div><div class="line">    </div><div class="line">    CCBReader *reader = <span class="keyword">new</span> CCBReader(lib);</div><div class="line">    CCNode *node = reader-&gt;readNodeGraphFromFile(pCCBFileName, <span class="keyword">this</span>);</div><div class="line">    reader-&gt;autorelease();</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (node != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        scene-&gt;addChild(node);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">this</span>-&gt;mTitleLabelTTF-&gt;setString(pCCBFileName);</div><div class="line">    </div><div class="line">    CCDirector::sharedDirector()-&gt;pushScene(scene);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> MainScene::onAssignCCBMemberVariable(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pMemberVariableName, cocos2d::CCNode *pNode)</div><div class="line">&#123;</div><div class="line">    CCB_MEMBERVARIABLEASSIGNER_GLUE(<span class="keyword">this</span>, <span class="string">"mLabelText"</span>, CCLabelBMFont*, <span class="keyword">this</span>-&gt;mLabelText);</div><div class="line">    CCB_MEMBERVARIABLEASSIGNER_GLUE(<span class="keyword">this</span>, <span class="string">"mTitleLabelTTF"</span>, CCLabelTTF*, <span class="keyword">this</span>-&gt;mTitleLabelTTF);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> MainScene::onButtonTest(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;openTest(<span class="string">"ccb/Menus.ccbi"</span>, <span class="string">"MenuLayer"</span>, MenuLayerLoader::loader());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#####4<br><code>Sprites &amp; 9 Slice</code> 这个比较简单, 只是靠CocosBuilder就能完成任务了.   </p>
<img src="/hexoblog/upload/2012-12/ccb-sbs-3-001.png">
<p>我拼的不太好, 嘿嘿. 主要是着重代码, 并非设计, 漂亮的事情交给美术妹纸吧.   </p>
<p>#####5<br><code>Buttons</code>这块主要是研究了<code>CCControlEvent</code>的各种情况. 我们只贴出核心代码.<br><figure class="highlight cpp"><figcaption><span>ButtonsLayer.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ButtonsLayer::onBtnClicked(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (pCCControlEvent) &#123;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchCancel:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Cancel"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchDown:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Touch Down"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchDragEnter:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Drag Enter"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchDragExit:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Drag Exit"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchDragInside:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Drag Inside"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchDragOutside:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Drag OutSide"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchUpInside:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Up Inside"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> CCControlEventTouchUpOutside:</div><div class="line">            <span class="keyword">this</span>-&gt;mEventLabelBMFont-&gt;setString(<span class="string">"Up Outside"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:<span class="comment">//所有的定义都在上面了,TestCPP里面有句经典的点评, 想看的可以去翻一下.</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<img src="/hexoblog/upload/2012-12/ccb-sbs-3-002.png">
<p><hr><br>代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> </p>
<ul>
<li>本文是系列文章, 请查看其他文章:</li>
<li><a href="http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/" target="_blank" rel="noopener">一步一步CocosBuilder(1)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/" target="_blank" rel="noopener">一步一步CocosBuilder(2)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/" target="_blank" rel="noopener">一步一步CocosBuilder(3)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/" target="_blank" rel="noopener">一步一步CocosBuilder(4)完结</a></li>
</ul>
<p>谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.</p>
<p>新浪微博: <a href="http://weibo.com/young40" target="_blank" rel="noopener">@杨世玲</a> <a href="http://weibo.com/young40" target="_blank" rel="noopener">http://weibo.com/young40</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天要说的内容比较轻松, 重要的知识点不多.&lt;br&gt;目标是实现&lt;code&gt;Menus &amp;amp; Items&lt;/code&gt;, &lt;code&gt;Sprites &amp;amp; 9 Slice&lt;/code&gt;, &lt;code&gt;Buttons &amp;amp; Labels&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;#####1&lt;br&gt;首先我们在CocosBuilder中建立一个新的&lt;code&gt;Header.ccb&lt;/code&gt;.具体请参见CocosBuilder的项目.&lt;br&gt;在创建的时候,勾选&lt;code&gt;Full Sceen&lt;/code&gt;, 并且将分辨率的&lt;code&gt;Height&lt;/code&gt;都修改为40.&lt;br&gt;这个文件很简单, 根节点下只包含一个&lt;code&gt;CCLayerColor&lt;/code&gt;,根节点的&lt;code&gt;Custom class&lt;/code&gt;设置为&lt;code&gt;HeaderLayer&lt;/code&gt;.&lt;br&gt;&lt;code&gt;CCLayerColor&lt;/code&gt;下面包含一个&lt;code&gt;CCLabelTTF&lt;/code&gt;和&lt;code&gt;CCMenu&lt;/code&gt;.&lt;br&gt;&lt;code&gt;CCLabelTTF&lt;/code&gt;的变量绑定为类型&lt;code&gt;Owner var&lt;/code&gt;, 值为&lt;code&gt;mTitleLabelTTF&lt;/code&gt;.&lt;br&gt;&lt;code&gt;CCMenu&lt;/code&gt;包含一个&lt;code&gt;CCMenuItemImage&lt;/code&gt;. &lt;code&gt;CCMenuItemImage&lt;/code&gt;的&lt;code&gt;Selector&lt;/code&gt;属性设置为&lt;code&gt;onBackClicked&lt;/code&gt;.&lt;br&gt;这个ccb作为一个公用的元素被其他ccb文件所引用. 是属于模块化的一个例子.&lt;br&gt;然后我们在Xcode中新建一个&lt;code&gt;HeaderLayer&lt;/code&gt;类, 并同时声明一个&lt;code&gt;HeaderLayerLoader&lt;/code&gt;类.   &lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="CocosBuilder" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/CocosBuilder/"/>
    
    
  </entry>
  
  <entry>
    <title>一步一步CocosBuilder(2)</title>
    <link href="http://www.young40.com/hexoblog/2012/12/25/2012-12-25-cocosbuilder-step-by-step-part-two/"/>
    <id>http://www.young40.com/hexoblog/2012/12/25/2012-12-25-cocosbuilder-step-by-step-part-two/</id>
    <published>2012-12-25T13:15:00.000Z</published>
    <updated>2018-02-07T15:53:53.686Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我们建立了基本的工作环境, 这一次我们将基本实现例子中的HelloCocosBuilder.</p>
<p>###注意<br>这两天纠结了一个问题. 我发现按照上次的配置来实现例子, 图片的大小怎么都和例子中的搭配不上. 后来动用CCB的源代码才看出端倪.<br>CCB v3.0加入了一个<code>resources-auto</code>的目录, 在发布的时候, 会自动缩放图片到对应的分辨率去. 因为图片的分辨率不合适(初步目测), 我们暂时不使用这功能. 请大家将上一篇文章<br>中的<code>resources-auto</code>文件夹下图片移到父目录<code>ccb-source</code>下面. 这个也解释了为什么<code>resources-auto</code>有非图片文件会导致CCB崩溃的原因.</p>
<a id="more"></a>
<p>#####1<br>在CCB中打开MainScene.ccb,按<code>delete</code>键删除已经存在的几个Sprite.</p>
<p>#####2<br>添加一个<code>CCLayerGradient</code>到屏幕, 如果有问题的话, 可以参见下文档. 选中该节点, 我们可以在右侧看到他的属性, 常规的属性有比如位置, 大小, 锚点, 缩放, 旋转, 标签.<br>我们现在将其设置为大小为100%x100%的大小, 即满屏.</p>
<p>#####3<br>从左侧的文件中将<code>burst.png</code>拖入屏幕, 也可以使用工具栏添加然后再选择属性<code>Sprite frame</code>.<br>可以在节点树上双击该节点给其重命名, 我们将该节点命名为<code>CCSprite-burst</code>, 便于识别.<br>同样我们将其中心的设置到屏幕中心50%x50%, 缩放到2.5倍.<br>然后将<code>Blend src</code>, <code>Blend dst</code> 都设置为<code>One</code>, 好吧, 我暂时还不知道这个Blend是什么东西. 有知道的朋友不妨在评论中告诉我下, 或者参考资料.<br>大概是透明之类的东西吧.   </p>
<p>#####4<br>然后我们再添加一个<code>CCParticleSystemQuad</code>粒子系统, 就是工具栏的那个Fx按钮.<br>将其位置设为最下居中, 在最下边<code>Particle Texture</code>设置为<code>ccbParticleSnow.png</code>效果,粒子系统还是很复杂的,估计能单独讲很久了. 这里就不再展开了.   </p>
<p>#####5<br>将<code>logo-icon.png</code>拖入屏幕, 放在左上角合适位置, 并将其缩放到0.5. 节点重命名为<code>CCSprite-logo-icon</code>.<br>接下来就是动画的制作了.选中节点, 可以在菜单栏中<code>Animation =&gt; Insert KeyFrame</code>找到插入Framekey的各种快捷键.或许我们需要记熟他们.<br>首先让我们给<code>Timeline</code>设置下时间.双击时间可以编辑, 我们输入00:03:00, 就是3秒钟. 后面最后一位是帧数, 每秒30帧.<br>按下小三角可以展开当前节点的各种KeyFrame.<br>拖动时间轴游标到1秒10帧,按下键盘<code>S</code>, 可以插入一个Scale类型的KeyFrame, 这时将当前节点Scale属性改为0.<br>然后继续拖动时间轴游标到2秒10帧, 再插入一个Scale KeyFrame, 并将Scale属性改为0.5. 这时点击播放按钮, 可以看到logo会蹦出来.<br>然后在紫色条上点击右键, 可以看到动作菜单, 我们选择<code>Bounce Out</code>, 这个时候再点击播放, 就可以看到logo蹦出的时候会有一个弹震的效果.<br>再来说明两点, 紫色条设置不同的动作, 可以看到上面会有一点阴影变化, 可以帮助我们快速确认设置的是什么动作.<br>如果不小心加多了KeyFrame, 那么可以点击选择KeyFrame, 然后点击<code>delete</code>键删除.<br>还有需要注意的是, 如果游标不在KeyFrame的点上, 那么此时无法编辑该节点属性, 移动到相应的KeyFrame点即可.   </p>
<p>#####6<br>然后依法炮制, 将<code>logo.png</code>加入, 你可以给其设置想要的动画效果.</p>
<p>#####7<br>我们再添加一个<code>CCLabelBMFont</code>, 字体设置为<code>markerfelt24shadow.fnt</code>.Label的内容设置为”Hello Cocos2d-x!!!”, 然后调整下位置, 换个喜欢的颜色.</p>
<p>#####8<br>我们再添加一个<code>CCControlButton</code>, Title设置为<code>Menu &amp; Item</code>.<br>然后再分别设置State Normal, State Highlighted的Sprite frame为<code>btn-test-0.png</code> &nbsp; <code>btn-test-1.png</code>.<br>然后再设置下弹出效果.<br>将这个节点再复制5份, 对齐. 再分别设置下Title和弹出效果.设置对齐的时候可能会比较麻烦. 可以从标尺那里拉出几条线, 用于对齐.将该对齐线拉出显示区域即可删除.<br><img src="/hexoblog/upload/2012-12/ccb-sbs-2-001.png"></p>
<p>#####9<br>最后将左右的两片叶子加入屏幕, 设置个动画即可.<br>然后将CCB项目发布一下, 在Xcode里面将项目运行一下. 就可以看到效果了.</p>
<p>#####10<br>我们接下来研究文件和类的绑定, 控件和变量的绑定, 以及事件和函数的绑定.<br>我们在CCB中将根节点的<code>Custom class</code>设置为<code>MainScene</code>.<br>我们在Xcode中打开<code>MainScene.h</code>, 给<code>MainScene</code>增加一个新的函数<code>CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MainScene, create);</code>.<br>最后的代码应该如下:<br><figure class="highlight cpp"><figcaption><span>MainScene</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainScene</span></span></div><div class="line"><span class="class">:</span> <span class="keyword">public</span> cocos2d::CCLayer</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> cocos2d::<span class="function">CCScene* <span class="title">scene</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MainScene, create);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后在<code>MainScene.h</code>中添加一个新类<code>MainSceneLayerLoader</code>代码如下:<br><figure class="highlight cpp"><figcaption><span>MainSceneLayerLoader</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainSceneLayerLoader</span> :</span> <span class="keyword">public</span> cocos2d::extension::CCLayerLoader</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MainSceneLayerLoader, loader);</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MainScene);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果需要探究的话, 可以点开相应的函数定义. 也都是些简单的工作.<br>吐槽下, 这些名字真的是太难记. 可能需要多熟悉下, 搞清楚其原理了才好.   </p>
<p>然后我们在<code>MainScene.cpp</code>中添加一行注册将ccb文件和类绑定起来.<br><figure class="highlight cpp"><figcaption><span>MainScene::scene()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();</div><div class="line">lib-&gt;registerCCNodeLoader(<span class="string">"MainScene"</span>, MainSceneLayerLoader::loader());</div></pre></td></tr></table></figure></p>
<p>然后运行下, 确保没有错误.<br>这几行代码, 就是ccb文件和类绑定的最简模式了.   </p>
<p>#####11<br>接着我们研究下控件和变量的绑定.<br>我们先在CCB中给<code>CCLabelBMFont</code>添加一个<code>Doc root var</code>类型的绑定<code>mLabelText</code>.<br>一个需要注意的地方就是CCB v3.0alpha似乎无法将<code>jsControlled</code>设置为<code>false</code>, 所以可能需要手工打开<code>MainScene.ccb</code>将其改为<code>false</code>.<br><figure class="highlight xml"><figcaption><span>MainScene.ccb</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>jsControlled<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">false</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后在Xcode中给<code>MainScene</code>增加一个从<code>CCBMemberVariableAssigner</code>的继承并实现其虚函数. 并且添加相应的变量.<br><figure class="highlight cpp"><figcaption><span>MainScene</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainScene</span></span></div><div class="line"><span class="class">:</span> <span class="keyword">public</span> cocos2d::CCLayer</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBMemberVariableAssigner</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MainScene();</div><div class="line">    ~MainScene();</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> cocos2d::<span class="function">CCScene* <span class="title">scene</span><span class="params">()</span></span>;</div><div class="line">        </div><div class="line">    CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MainScene, create);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">onAssignCCBMemberVariable</span><span class="params">(cocos2d::CCObject* pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pMemberVariableName, cocos2d::CCNode* pNode)</span></span>;</div><div class="line">    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    cocos2d::CCLabelBMFont *mLabelText;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在<code>MainScene.cpp</code>中需要添加的是:<br><figure class="highlight cpp"><figcaption><span>MainScene.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">MainScene::MainScene()<span class="comment">//构造函数</span></div><div class="line">: mLabelText(<span class="literal">NULL</span>)</div><div class="line">&#123;&#125;</div><div class="line"></div><div class="line">MainScene::~MainScene()<span class="comment">//析构函数中释放内存不能忘</span></div><div class="line">&#123;</div><div class="line">    CC_SAFE_DELETE(mLabelText);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> MainScene::onAssignCCBMemberVariable(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pMemberVariableName, cocos2d::CCNode *pNode)</div><div class="line">&#123;</div><div class="line">    CCB_MEMBERVARIABLEASSIGNER_GLUE(<span class="keyword">this</span>, <span class="string">"mLabelText"</span>, CCLabelBMFont*, <span class="keyword">this</span>-&gt;mLabelText);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是, 由于绑定较晚, 所以无法在init函数中使用变量<code>mLabelText</code>.   </p>
<p>#####12<br>接下来我们研究事件和函数的绑定.<br>在CCB中找到<code>Menu &amp; Item</code>这个<code>CCControlButton</code>, 并设置其Selector为<code>onButtonTest</code>.Target设置为<code>Document root</code>.<br>这里需要注意的是, 设置值的时候,cocos2d-iphone似乎比较喜欢设置成<code>onButtonTest:</code>即多个<code>:</code>的形式. 我们在cocos2d-x中保持一致即可.不必加<code>:</code>.<br>然后打开<code>MainScene.h</code>给<code>MainScene</code>再增加一个继承.<br><figure class="highlight cpp"><figcaption><span>MainScene</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainScene</span></span></div><div class="line"><span class="class">:</span> <span class="keyword">public</span> cocos2d::CCLayer</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBMemberVariableAssigner</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBSelectorResolver</div></pre></td></tr></table></figure></p>
<p>还有需要实现的函数<br><figure class="highlight cpp"><figcaption><span>MainScene</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">virtual</span> cocos2d::<span class="function">SEL_MenuHandler <span class="title">onResolveCCBCCMenuItemSelector</span><span class="params">(cocos2d::CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;</div><div class="line"><span class="keyword">virtual</span> cocos2d::extension::<span class="function">SEL_CCControlHandler <span class="title">onResolveCCBCCControlSelector</span><span class="params">(cocos2d::CCObject * pTarget, <span class="keyword">const</span> <span class="keyword">char</span>* pSelectorName)</span></span>;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onButtonTest</span><span class="params">(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</span></span>;</div></pre></td></tr></table></figure></p>
<p>接下来是增加的函数的实现<br><figure class="highlight cpp"><figcaption><span>MainScene.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">SEL_MenuHandler MainScene::onResolveCCBCCMenuItemSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SEL_CCControlHandler MainScene::onResolveCCBCCControlSelector(cocos2d::CCObject *pTarget, <span class="keyword">const</span> <span class="keyword">char</span> *pSelectorName)</div><div class="line">&#123;</div><div class="line">    CCB_SELECTORRESOLVER_CCCONTROL_GLUE(<span class="keyword">this</span>, <span class="string">"onButtonTest"</span>, MainScene::onButtonTest);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MainScene::onButtonTest(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mLabelText-&gt;setString(<span class="string">"Hello CocosBuilder!!!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了, 现在运行一下, 点击按钮, 就会看到<code>Hello Cocos2d-x!!!</code>变成了<code>Hello CocosBuilder!!!</code>了.   </p>
<p>#####13<br>刚才我们提到变量绑定较init函数(更别提运行更早的构造函数了)更晚. 那么如何运行后就控制这些控件呢?<br>方法当然是有, 我们需要增加一个<code>CCNodeLoaderListener</code>, 并实现其接口.新增代码如下:<br><figure class="highlight cpp"><figcaption><span>MainScene</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCBSelectorResolver</div><div class="line">, <span class="keyword">public</span> cocos2d::extension::CCNodeLoaderListener</div><div class="line">&#123;</div><div class="line">    <span class="comment">///......代码省略鸟</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onNodeLoaded</span><span class="params">(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader)</span></span>;</div><div class="line">    <span class="comment">///......代码省略鸟</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><figcaption><span>MainScene.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainScene::onNodeLoaded(cocos2d::CCNode *pNode, cocos2d::extension::CCNodeLoader *pNodeLoader)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">this</span>-&gt;mLabelText-&gt;setString(<span class="string">"All Loaded"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好啦, 运行就能看到<code>All Loaded</code>啦.   </p>
<img src="/hexoblog/upload/2012-12/ccb-sbs-2-002.png">
<p><hr><br>代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> </p>
<ul>
<li>本文是系列文章, 请查看其他文章:</li>
<li><a href="http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/" target="_blank" rel="noopener">一步一步CocosBuilder(1)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/" target="_blank" rel="noopener">一步一步CocosBuilder(2)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/" target="_blank" rel="noopener">一步一步CocosBuilder(3)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/" target="_blank" rel="noopener">一步一步CocosBuilder(4)完结</a></li>
</ul>
<p>谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.</p>
<p>新浪微博: <a href="http://weibo.com/young40" target="_blank" rel="noopener">@杨世玲</a> <a href="http://weibo.com/young40" target="_blank" rel="noopener">http://weibo.com/young40</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇我们建立了基本的工作环境, 这一次我们将基本实现例子中的HelloCocosBuilder.&lt;/p&gt;
&lt;p&gt;###注意&lt;br&gt;这两天纠结了一个问题. 我发现按照上次的配置来实现例子, 图片的大小怎么都和例子中的搭配不上. 后来动用CCB的源代码才看出端倪.&lt;br&gt;CCB v3.0加入了一个&lt;code&gt;resources-auto&lt;/code&gt;的目录, 在发布的时候, 会自动缩放图片到对应的分辨率去. 因为图片的分辨率不合适(初步目测), 我们暂时不使用这功能. 请大家将上一篇文章&lt;br&gt;中的&lt;code&gt;resources-auto&lt;/code&gt;文件夹下图片移到父目录&lt;code&gt;ccb-source&lt;/code&gt;下面. 这个也解释了为什么&lt;code&gt;resources-auto&lt;/code&gt;有非图片文件会导致CCB崩溃的原因.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="CocosBuilder" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/CocosBuilder/"/>
    
    
  </entry>
  
  <entry>
    <title>一步一步CocosBuilder(1)</title>
    <link href="http://www.young40.com/hexoblog/2012/12/21/2012-12-21-cocosbuilder-step-by-step-part-one/"/>
    <id>http://www.young40.com/hexoblog/2012/12/21/2012-12-21-cocosbuilder-step-by-step-part-one/</id>
    <published>2012-12-20T18:46:00.000Z</published>
    <updated>2018-02-07T15:53:53.686Z</updated>
    
    <content type="html"><![CDATA[<p>CocosBuilder是Cocos2d系列的配套开源工具,最新的版本是3.0a, 也是我们这个系列文章所采用的版本.<br>CCB(CocosBuilder简称)目前只有OS X版本, 没有Windows的版本, 而且源代码也是用Objective-c, 估计移植难度会比较大.<br>我想这个也是其不够流行的原因吧.</p>
<p>如果你是CCB的熟客,那么你一定会记得CCB v2.x以前版本附带的例子. 而CCB v3.0采用了一个叫做CocosDragonJS的例子, 主要是展示CCB的Javascript的调用能力.<br>我虽然很喜欢JS, 但是正在学习2d-x, 又很想学好, 所以还是打好基础, 学好原滋原味的2d-x才好, 以后换用无论是Html5, 还是JS, Lua, 心里才会觉得踏实.<br>我无论C++,还是2d-x都是新手,又是第一次想正儿八经的写博客文章, 难免有很多错误, 还望各位看客踊跃拍砖.</p>
<p>这次的目的是基本实现原来v2.0中的例子.<br>我采用的2d-x的版本是:cocos2d-2.1beta3-x-2.1.0, 以OS X版本为主, 以sample目录下的HelloCpp为基础改进. CCB的版本是v3.0alpha0.</p>
<a id="more"></a>
<p>本文的目标是基本实现将CCB整合进Mac OS X版本的项目中.</p>
<p>首先将2d-x源代码中sample目录下的HelloCpp目录重命名为TestCocosBuilder.并使用CocosBuilder创建新项目文件在其Resources文件夹中.<br>还需要将项目需要的图片资源放入Resources目录中. 具体可以参见我打包后的整体项目文件.还可以参见文末的目录树说明.</p>
<p>贴下Xcode项目的目录,如果添加extensions应该逐个添加,否则可能会遇到编译错误,有可能会把其他平台文件错误添加进来.</p>
<img src="/hexoblog/upload/2012-12/ccb-sbs-1-001.png">
<p>做完这些准备工作后, 我们接下来按步来讲解. </p>
<p>1.首先编辑下<code>AppMacros.h</code>, 修改以下代码<br><figure class="highlight cpp"><figcaption><span>AppMacros.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> Resource smallResource  =  &#123; cocos2d::CCSizeMake(<span class="number">480</span>, <span class="number">320</span>),   <span class="string">"resources-iphone"</span> &#125;;</div><div class="line"><span class="keyword">static</span> Resource mediumResource =  &#123; cocos2d::CCSizeMake(<span class="number">1024</span>, <span class="number">768</span>),  <span class="string">"resources-ipad"</span>   &#125;;</div><div class="line"><span class="keyword">static</span> Resource largeResource  =  &#123; cocos2d::CCSizeMake(<span class="number">2048</span>, <span class="number">1536</span>), <span class="string">"resources-ipadhd"</span> &#125;;</div></pre></td></tr></table></figure></p>
<p>这一段主要是修改<code>HelloCpp</code>默认的资源目录, 配合CCB的发布路径.同时可以将原来几个目录中文件分别移入对应目录.<br>2.添加一个新类<code>MainScene</code>如下<br><figure class="highlight cpp"><figcaption><span>MainScene.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HelloCpp__MainScene__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __HelloCpp__MainScene__</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos-ext.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainScene</span></span></div><div class="line"><span class="class">:</span> <span class="keyword">public</span> cocos2d::CCLayer <span class="comment">//从CCLayer派生</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> cocos2d::<span class="function">CCScene* <span class="title">scene</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* defined(__HelloCpp__MainScene__) */</span></span></div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><figcaption><span>MainScene.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MainScene.h"</span></span></div><div class="line"></div><div class="line">USING_NS_CC;</div><div class="line">USING_NS_CC_EXT;</div><div class="line"></div><div class="line">CCScene* MainScene::scene()</div><div class="line">&#123;</div><div class="line">    CCScene *scene = CCScene::create();</div><div class="line">    </div><div class="line">    CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary(); <span class="comment">//生成一个默认的Node Loader</span></div><div class="line">    </div><div class="line">    CCBReader *reader = <span class="keyword">new</span> CCBReader(lib); <span class="comment">//用node load lib 初始化一个ccb reader</span></div><div class="line">    </div><div class="line">    CCNode *node = reader-&gt;readNodeGraphFromFile(<span class="string">"MainScene.ccbi"</span>, scene); <span class="comment">//从ccbi文件中加载node</span></div><div class="line">    </div><div class="line">    reader-&gt;release(); <span class="comment">//注意手动释放内存</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (node!=<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        scene-&gt;addChild(node); <span class="comment">//将node 添加到scene中</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> scene;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.修改<code>AppDelegate.cpp</code>中默认的启动scene<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CCScene *pScene = MainScene::scene(); <span class="comment">//HelloWorld::scene();</span></div></pre></td></tr></table></figure></p>
<p>4.注意CCB中发布选项的设置, 并发布一次.<br><img src="/hexoblog/upload/2012-12/ccb-sbs-1-002.png"></p>
<p>5.如果没有错误的话, 你应该可以看到运行的效果.<br><img src="/hexoblog/upload/2012-12/ccb-sbs-1-003.png"></p>
<p>Update:<br>@王哲Walzer 说,CCB大部分是美术在用, 在美术圈讨论, 所以程序圈较少看到人在讨论, 其实用的公司挺多的.<br><a href="http://weibo.com/1702027805/zay18wLT5" target="_blank" rel="noopener">http://weibo.com/1702027805/zay18wLT5</a></p>
<figure class="highlight sh"><figcaption><span>目录结构</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">├── samples <span class="comment">#目录结构和2d-x源代码保持一致,相信大家对2d-x源代码很熟悉了.</span></div><div class="line">│   └── CocosBuilderTest <span class="comment">#项目所在目录</span></div><div class="line">│       ├── Classes <span class="comment">#代码所在目录</span></div><div class="line">│       ├── Resources <span class="comment">#资源目录</span></div><div class="line">│       │   ├── ccb <span class="comment">#ccb发布后的目录</span></div><div class="line">│       │   │   ├── HelloCocosBuilder.ccbi</div><div class="line">│       │   │   ├── ...</div><div class="line">│       │   │   └── TestSprites.ccbi</div><div class="line">│       │   ├── ccbResources <span class="comment">#发布后的默认ccb资源</span></div><div class="line">│       │   ├── fonts</div><div class="line">│       │   ├── resources-ipad <span class="comment">#注意这几个目录, 稍后我们会提及</span></div><div class="line">│       │   ├── resources-ipadhd</div><div class="line">│       │   ├── resources-iphone</div><div class="line">│       │   ├── resources-iphonehd</div><div class="line">│       ├── ccb-source <span class="comment">#ccb项目目录</span></div><div class="line">│       │   ├── ccb</div><div class="line">│       │   │   ├── HelloCocosBuilder.ccb <span class="comment">#这几个是原CocosBuilder例子中的ccb, 直接复制过来了.</span></div><div class="line">│       │   │   ├── ...</div><div class="line">│       │   │   └── TestSprites.ccbi</div><div class="line">│       │   ├── ccbResources</div><div class="line">│       │   ├── resources-auto <span class="comment">#CocosBuilderv3.0的资源目录, 似乎只能存放图片</span></div><div class="line">│       │   │   ├── btn<span class="_">-a</span>-0.png <span class="comment">#否则会引起发布是造成CocosBuilder崩溃</span></div><div class="line">│       │   │   ├── ...</div><div class="line">│       │   │   └── scale-9-demo.png</div><div class="line">│       │   ├── MainScene.ccb <span class="comment">#默认生成的ccb, 我们这一次不对其更改</span></div><div class="line">│       │   ├── MainScene.js</div><div class="line">│       │   ├── animated-grossini.plist</div><div class="line">│       │   ├── animated-grossini.png</div><div class="line">│       │   ├── ccb-source.ccbproj</div><div class="line">│       │   ├── comic\ andy.ttf</div><div class="line">│       │   ├── grossini-generic.plist</div><div class="line">│       │   ├── grossini-generic.png</div><div class="line">│       │   ├── markerfelt24shadow.fnt</div><div class="line">│       │   └── markerfelt24shadow.png</div><div class="line">│       └── proj.mac</div><div class="line">│           ├── HelloCpp.xcodeproj <span class="comment">#项目文件, 暂时只支持mac os x</span></div><div class="line">├── cocos2dx <span class="comment">#2d-x文件</span></div><div class="line">├── extensions <span class="comment">#2d-x的扩展</span></div><div class="line">│   ├── CCBReader <span class="comment">#这个是解析CocosBuilder的主要CCBReader</span></div><div class="line">│   │   ├── CCBAnimationManager.cpp</div><div class="line">│   │   ├── CCBAnimationManager.h</div><div class="line">│   │   ├── ...</div><div class="line">│   │   └── CCSpriteLoader.h</div><div class="line">│   ├── GUI</div><div class="line">│   ├── network</div><div class="line">│   ├── physics_nodes</div><div class="line">│   ├── ExtensionMacros.h</div><div class="line">│   └── cocos-ext.h</div></pre></td></tr></table></figure>
<p><hr><br>代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> </p>
<ul>
<li>本文是系列文章, 请查看其他文章:</li>
<li><a href="http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/" target="_blank" rel="noopener">一步一步CocosBuilder(1)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/" target="_blank" rel="noopener">一步一步CocosBuilder(2)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/" target="_blank" rel="noopener">一步一步CocosBuilder(3)</a></li>
<li><a href="http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/" target="_blank" rel="noopener">一步一步CocosBuilder(4)完结</a></li>
</ul>
<p>谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.</p>
<p>新浪微博: <a href="http://weibo.com/young40" target="_blank" rel="noopener">@杨世玲</a> <a href="http://weibo.com/young40" target="_blank" rel="noopener">http://weibo.com/young40</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CocosBuilder是Cocos2d系列的配套开源工具,最新的版本是3.0a, 也是我们这个系列文章所采用的版本.&lt;br&gt;CCB(CocosBuilder简称)目前只有OS X版本, 没有Windows的版本, 而且源代码也是用Objective-c, 估计移植难度会比较大.&lt;br&gt;我想这个也是其不够流行的原因吧.&lt;/p&gt;
&lt;p&gt;如果你是CCB的熟客,那么你一定会记得CCB v2.x以前版本附带的例子. 而CCB v3.0采用了一个叫做CocosDragonJS的例子, 主要是展示CCB的Javascript的调用能力.&lt;br&gt;我虽然很喜欢JS, 但是正在学习2d-x, 又很想学好, 所以还是打好基础, 学好原滋原味的2d-x才好, 以后换用无论是Html5, 还是JS, Lua, 心里才会觉得踏实.&lt;br&gt;我无论C++,还是2d-x都是新手,又是第一次想正儿八经的写博客文章, 难免有很多错误, 还望各位看客踊跃拍砖.&lt;/p&gt;
&lt;p&gt;这次的目的是基本实现原来v2.0中的例子.&lt;br&gt;我采用的2d-x的版本是:cocos2d-2.1beta3-x-2.1.0, 以OS X版本为主, 以sample目录下的HelloCpp为基础改进. CCB的版本是v3.0alpha0.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="CocosBuilder" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/CocosBuilder/"/>
    
    
  </entry>
  
  <entry>
    <title>2d-x深读2:CCPlatformMacros.h</title>
    <link href="http://www.young40.com/hexoblog/2012/12/17/2012-12-17-cocos2d-x-source-code-research-2-ccplatformmacros-dot-h/"/>
    <id>http://www.young40.com/hexoblog/2012/12/17/2012-12-17-cocos2d-x-source-code-research-2-ccplatformmacros-dot-h/</id>
    <published>2012-12-16T17:49:00.000Z</published>
    <updated>2018-02-07T15:53:53.686Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/include/ccConfig.h</code></li>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/platform/mac/CCPlatformDefine.h</code> //注意我是以mac平台研究的, 其他平台略有不同</li>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/platform/CCPlatformMacros.h</code><a id="more"></a>
<figure class="highlight cpp"><figcaption><span>ccConfig.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"platform/CCPlatformConfig.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//设置为1后会include CCPhysicsScript 和 CCPhysicsDebugNode 添加到物理引擎支持</span></div><div class="line"><span class="comment">//需要保证Chipmunk在搜索路径中</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_ENABLE_CHIPMUNK_INTEGRATION</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_ENABLE_CHIPMUNK_INTEGRATION 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//设置为1后会include CCPhysicsScript 添加到Box2D的支持</span></div><div class="line"><span class="comment">//同样需要保证Box2D会在搜索路径中</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_ENABLE_BOX2D_INTEGRATION</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_ENABLE_BOX2D_INTEGRATION 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment"> 设置为1后,2d学会维护一个OpenGL状态缓存来避免不必要的切换</span></div><div class="line"><span class="comment"> 为了使用这个功能,需要用下列函数来替换GL的对应函数</span></div><div class="line"><span class="comment">    - ccGLUseProgram() instead of glUseProgram()</span></div><div class="line"><span class="comment">    - ccGLDeleteProgram() instead of glDeleteProgram()</span></div><div class="line"><span class="comment">    - ccGLBlendFunc() instead of glBlendFunc()</span></div><div class="line"><span class="comment">如果这个功能被禁止, 那么这些函数会直接调用对应的GL函数, 当然就没有缓存了</span></div><div class="line"><span class="comment">打开这个功能能提高速度</span></div><div class="line"><span class="comment">如果你的代码是从GL ES 1.1升级过来的, 保持这个功能被禁用. 如果各种功能正常的话, 你可以启用这个功能</span></div><div class="line"><span class="comment">#ifndef CC_ENABLE_GL_STATE_CACHE</span></div><div class="line"><span class="comment">#define CC_ENABLE_GL_STATE_CACHE 1</span></div><div class="line"><span class="comment">#endif</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">启用后,纹理的坐标会用这个公式来计算</span></div><div class="line"><span class="comment">- texCoord.left = (rect.origin.x*2+1) / (texture.wide*2);</span></div><div class="line"><span class="comment">- texCoord.right = texCoord.left + (rect.size.width*2-2)/(texture.wide*2);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">The same for bottom and top.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">This formula prevents artifacts by using 99% of the texture.</span></div><div class="line"><span class="comment">The "correct" way to prevent artifacts is by using the spritesheet-artifact-fixer.py or a similar tool.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">受影响的类:</span></div><div class="line"><span class="comment">- CCSprite / CCSpriteBatchNode and subclasses: CCLabelBMFont, CCTMXTiledMap</span></div><div class="line"><span class="comment">- CCLabelAtlas</span></div><div class="line"><span class="comment">- CCQuadParticleSystem</span></div><div class="line"><span class="comment">- CCTileMap</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//默认0.5秒, 更新下FPS的数据. 数字越大FPS数据越可靠.</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_DIRECTOR_STATS_INTERVAL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_DIRECTOR_STATS_INTERVAL (0.5f)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//FPS数据显示位置,默认左下</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_DIRECTOR_FPS_POSITION</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_DIRECTOR_FPS_POSITION ccp(0,0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** @def CC_DIRECTOR_DISPATCH_FAST_EVENTS</span></div><div class="line"><span class="comment"> If enabled, and only when it is used with CCFastDirector, the main loop will wait 0.04 seconds to</span></div><div class="line"><span class="comment"> dispatch all the events, even if there are not events to dispatch.</span></div><div class="line"><span class="comment"> If your game uses lot's of events (eg: touches) it might be a good idea to enable this feature.</span></div><div class="line"><span class="comment"> Otherwise, it is safe to leave it disabled.</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> To enable set it to 1. Disabled by default.</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> @warning This feature is experimental</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_DIRECTOR_DISPATCH_FAST_EVENTS</span></div><div class="line"> <span class="meta">#<span class="meta-keyword">define</span> CC_DIRECTOR_DISPATCH_FAST_EVENTS 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** @def CC_DIRECTOR_MAC_USE_DISPLAY_LINK_THREAD</span></div><div class="line"><span class="comment">If enabled, cocos2d-mac will run on the Display Link thread. If disabled cocos2d-mac will run in its own thread.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">If enabled, the images will be drawn at the "correct" time, but the events might not be very responsive.</span></div><div class="line"><span class="comment">If disabled, some frames might be skipped, but the events will be dispatched as they arrived.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">To enable set it to a 1, to disable it set to 0. Enabled by default.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">Only valid for cocos2d-mac. Not supported on cocos2d-ios.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_DIRECTOR_MAC_USE_DISPLAY_LINK_THREAD</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_DIRECTOR_MAC_USE_DISPLAY_LINK_THREAD 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** @def CC_NODE_RENDER_SUBPIXEL</span></div><div class="line"><span class="comment"> If enabled, the CCNode objects (CCSprite, CCLabel,etc) will be able to render in subpixels.</span></div><div class="line"><span class="comment"> If disabled, integer pixels will be used.</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> To enable set it to 1. Enabled by default.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_NODE_RENDER_SUBPIXEL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_NODE_RENDER_SUBPIXEL 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** @def CC_SPRITEBATCHNODE_RENDER_SUBPIXEL</span></div><div class="line"><span class="comment"> If enabled, the CCSprite objects rendered with CCSpriteBatchNode will be able to render in subpixels.</span></div><div class="line"><span class="comment"> If disabled, integer pixels will be used.</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> To enable set it to 1. Enabled by default.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_SPRITEBATCHNODE_RENDER_SUBPIXEL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SPRITEBATCHNODE_RENDER_SUBPIXEL    1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** @def CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP</span></div><div class="line"><span class="comment"> Use GL_TRIANGLE_STRIP instead of GL_TRIANGLES when rendering the texture atlas.</span></div><div class="line"><span class="comment"> It seems it is the recommend way, but it is much slower, so, enable it at your own risk</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> To enable set it to a value different than 0. Disabled by default.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//VAO定点数组对象</span></div><div class="line"><span class="comment">/** @def CC_TEXTURE_ATLAS_USE_VAO</span></div><div class="line"><span class="comment"> By default, CCTextureAtlas (used by many cocos2d classes) will use VAO (Vertex Array Objects).</span></div><div class="line"><span class="comment"> Apple recommends its usage but they might consume a lot of memory, specially if you use many of them.</span></div><div class="line"><span class="comment"> So for certain cases, where you might need hundreds of VAO objects, it might be a good idea to disable it.</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> To disable it set it to 0. Enabled by default.</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_TEXTURE_ATLAS_USE_VAO</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_IOS) || (CC_TARGET_PLATFORM == CC_PLATFORM_MAC)</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">define</span> CC_TEXTURE_ATLAS_USE_VAO 1</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        <span class="comment">/* Some Windows display adapter driver cannot support VAO. */</span></div><div class="line">        <span class="comment">/* Some android devices cannot support VAO very well, so we disable it by default for android platform. */</span></div><div class="line">        <span class="comment">/* Blackberry also doesn't support this feature. */</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> CC_TEXTURE_ATLAS_USE_VAO 0</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/** @def CC_USE_LA88_LABELS</span></div><div class="line"><span class="comment"> If enabled, it will use LA88 (Luminance Alpha 16-bit textures) for CCLabelTTF objects.</span></div><div class="line"><span class="comment"> If it is disabled, it will use A8 (Alpha 8-bit textures).</span></div><div class="line"><span class="comment"> LA88 textures are 6% faster than A8 textures, but they will consume 2x memory.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> This feature is enabled by default.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @since v0.99.5</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_USE_LA88_LABELS</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_USE_LA88_LABELS 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  启用后,所有CCSprite的子类都会花上一个边框,方便调试</span></div><div class="line"><span class="comment"> 0 -- disabled</span></div><div class="line"><span class="comment"> 1 -- draw bounding box</span></div><div class="line"><span class="comment"> 2 -- draw texture box</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_SPRITE_DEBUG_DRAW</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SPRITE_DEBUG_DRAW 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//CCSpriteBatchNode的调试用加边框</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_SPRITEBATCHNODE_DEBUG_DRAW</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SPRITEBATCHNODE_DEBUG_DRAW 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//CCLabelBMFont调试加边框</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_LABELBMFONT_DEBUG_DRAW</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_LABELBMFONT_DEBUG_DRAW 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//LabeltAtlas调试加边框</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_LABELATLAS_DEBUG_DRAW</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_LABELATLAS_DEBUG_DRAW 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** @def CC_ENABLE_PROFILERS</span></div><div class="line"><span class="comment"> If enabled, will activate various profilers within cocos2d. This statistical data will be output to the console</span></div><div class="line"><span class="comment"> once per second showing average time (in milliseconds) required to execute the specific routine(s).</span></div><div class="line"><span class="comment"> Useful for debugging purposes only. It is recommended to leave it disabled.</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment"> To enable set it to a value different than 0. Disabled by default.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_ENABLE_PROFILERS</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_ENABLE_PROFILERS 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/** Enable Lua engine debug log */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CC_LUA_ENGINE_DEBUG</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_LUA_ENGINE_DEBUG 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight cpp"><figcaption><span>mac/CCPlatformDefine.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt; //引入assert</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_DLL <span class="comment">//CC_DLL只在win32平台下有效</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_DISABLE_ASSERT &gt; 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_ASSERT(cond) <span class="comment">//禁用了assert</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_ASSERT(cond) assert(cond) <span class="comment">//启用了assert</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_UNUSED_PARAM(unusedparam) (void)unusedparam</span></div><div class="line"></div><div class="line"><span class="comment">//定义空指针</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NULL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL    0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL    ((void *)0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>我们可以看到win32中不同的部分比如<code>CC_DLL</code><br><figure class="highlight cpp"><figcaption><span>win32/CCPlatformDefine.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_USRDLL)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DLL     __declspec(dllexport)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>         <span class="comment">/* use a DLL library */</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DLL     __declspec(dllimport)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>Linux部分也是<code>CC_DLL</code>不同<br><figure class="highlight cpp"><figcaption><span>linux/CCPlatformDefine.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_USRDLL)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_DLL __attribute__ ((visibility (<span class="meta-string">"default"</span>)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span>         <span class="comment">/* use a DLL library */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_DLL __attribute__ ((visibility (<span class="meta-string">"default"</span>)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>Android中比较不同的部分是<code>CC_ASSERT</code><br><figure class="highlight cpp"><figcaption><span>android/CCPlatformDefine.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_ASSERT(cond) \</span></div><div class="line"><span class="keyword">if</span> (! (cond)) \</div><div class="line">&#123; \</div><div class="line">    <span class="keyword">char</span> content[<span class="number">256</span>]; \</div><div class="line">    <span class="built_in">sprintf</span>(content, <span class="string">"%s function:%s line:%d"</span>, __FILE__, __FUNCTION__, __LINE__);  \</div><div class="line">    CCMessageBox(content, <span class="string">"Assert error"</span>); \</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们最后再来看下<code>CCPlatformMacros.h</code><br><figure class="highlight cpp"><figcaption><span>CCPlatformMacros.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ccConfig.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CCPlatformConfig.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CCPlatformDefine.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">//CREATE_FUNC是2d-x的一个核心功能,一般采用例如`MySpriter *my = MySpriter::create()`的形式调用.</span></div><div class="line"><span class="comment">//这里的create()成员函数即是由CREATE_FUNC创建, 来达到让2d-x来管理内存分配的功能</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_FUNC(__TYPE__) \</span></div><div class="line">static __TYPE__* create() \</div><div class="line">&#123; \</div><div class="line">    __TYPE__ *pRet = <span class="keyword">new</span> __TYPE__(); \</div><div class="line">    <span class="keyword">if</span> (pRet &amp;&amp; pRet-&gt;init()) \</div><div class="line">    &#123; \</div><div class="line">        pRet-&gt;autorelease(); \</div><div class="line">        <span class="keyword">return</span> pRet; \</div><div class="line">    &#125; \</div><div class="line">    <span class="keyword">else</span> \</div><div class="line">    &#123; \</div><div class="line">        <span class="keyword">delete</span> pRet; \</div><div class="line">        pRet = <span class="literal">NULL</span>; \</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; \</div><div class="line">    &#125; \</div><div class="line">&#125;</div><div class="line"><span class="comment">//早期版本还有一个NODE_FUNC完成和CREATE_FUNC一样的功能,已经废弃,不再讨论</span></div><div class="line"></div><div class="line"><span class="comment">//CC_ENABLE_CACHE_TEXTURE_DATA 只在Android上启用, 会缓存纹理</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_ENABLE_CACHE_TEXTURE_DATA       1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_ENABLE_CACHE_TEXTURE_DATA       0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID) || (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)</span></div><div class="line"><span class="comment">//重新绑定indices, 避免在android和win32下glDrawElements函数crash的bug</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_REBIND_INDICES_BUFFER  1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_REBIND_INDICES_BUFFER  0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">//常用宏定义</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus <span class="comment">//namespace只在C++中起作用</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> NS_CC_BEGIN                     namespace cocos2d &#123;</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> NS_CC_END                       &#125;</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> USING_NS_CC                     using namespace cocos2d  <span class="comment">//应该尽量使用USING_NS_CC, 兼容性更好</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> NS_CC_BEGIN </span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> NS_CC_END </span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> USING_NS_CC </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></div><div class="line"></div><div class="line"><span class="comment">//成员函数快捷声明/定义宏</span></div><div class="line"><span class="comment">//多使用这些宏, 可以方便地定义出合乎面向对象原则的成员变量.</span></div><div class="line"><span class="comment">//需要注意的是这些调用了这些宏之后, 应该养成重新写public, private等标号的习惯. 因为之后的都会变成public</span></div><div class="line"><span class="comment">//定义的成员变量都是protected的</span></div><div class="line"><span class="comment">//只读的成员变量</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PROPERTY_READONLY(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> varType get##funName(<span class="keyword">void</span>);</div><div class="line"></div><div class="line"><span class="comment">//getter是为引用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PROPERTY_READONLY_PASS_BY_REF(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> <span class="keyword">const</span> varType&amp; get##funName(<span class="keyword">void</span>);</div><div class="line"></div><div class="line"><span class="comment">//可读可写成员变量</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PROPERTY(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> varType get##funName(<span class="keyword">void</span>);\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="built_in">set</span>##funName(varType var);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PROPERTY_PASS_BY_REF(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> varType get##funName(<span class="keyword">void</span>);\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="built_in">set</span>##funName(<span class="keyword">const</span> varType&amp; var);</div><div class="line"></div><div class="line"><span class="comment">//以上的getter,setter只有声明, 下面的这些带有定义</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SYNTHESIZE_READONLY(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> varType get##funName(<span class="keyword">void</span>) <span class="keyword">const</span> &#123; <span class="keyword">return</span> varName; &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SYNTHESIZE_READONLY_PASS_BY_REF(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> <span class="keyword">const</span> varType&amp; get##funName(<span class="keyword">void</span>) <span class="keyword">const</span> &#123; <span class="keyword">return</span> varName; &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SYNTHESIZE(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> varType get##funName(<span class="keyword">void</span>) <span class="keyword">const</span> &#123; <span class="keyword">return</span> varName; &#125;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="built_in">set</span>##funName(varType var)&#123; varName = var; &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SYNTHESIZE_PASS_BY_REF(varType, varName, funName)\</span></div><div class="line"><span class="keyword">protected</span>: varType varName;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> varType get##funName(<span class="keyword">void</span>) <span class="keyword">const</span> &#123; <span class="keyword">return</span> varName; &#125;\</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="built_in">set</span>##funName(<span class="keyword">const</span> varType&amp; var)&#123; varName = var; &#125;</div><div class="line"></div><div class="line"><span class="comment">//setter中会retain一次var, 防止被gc回收.</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SYNTHESIZE_RETAIN(varType, varName, funName)    \</span></div><div class="line"><span class="keyword">private</span>: varType varName; \</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> varType get##funName(<span class="keyword">void</span>) <span class="keyword">const</span> &#123; <span class="keyword">return</span> varName; &#125; \</div><div class="line"><span class="keyword">public</span>: <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="built_in">set</span>##funName(varType var)   \</div><div class="line">&#123; \</div><div class="line">    <span class="keyword">if</span> (varName != var) \</div><div class="line">    &#123; \</div><div class="line">        CC_SAFE_RETAIN(var); \</div><div class="line">        CC_SAFE_RELEASE(varName); \</div><div class="line">        varName = var; \</div><div class="line">    &#125; \</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SAFE_DELETE(p)            do &#123; <span class="meta-keyword">if</span>(p) &#123; delete (p); (p) = 0; &#125; &#125; while(0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SAFE_DELETE_ARRAY(p)     do &#123; <span class="meta-keyword">if</span>(p) &#123; delete[] (p); (p) = 0; &#125; &#125; while(0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SAFE_FREE(p)                do &#123; <span class="meta-keyword">if</span>(p) &#123; free(p); (p) = 0; &#125; &#125; while(0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SAFE_RELEASE(p)            do &#123; <span class="meta-keyword">if</span>(p) &#123; (p)-&gt;release(); &#125; &#125; while(0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SAFE_RELEASE_NULL(p)        do &#123; <span class="meta-keyword">if</span>(p) &#123; (p)-&gt;release(); (p) = 0; &#125; &#125; while(0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_SAFE_RETAIN(p)            do &#123; <span class="meta-keyword">if</span>(p) &#123; (p)-&gt;retain(); &#125; &#125; while(0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_BREAK_IF(cond)            <span class="meta-keyword">if</span>(cond) break</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __CCLOGWITHFUNCTION(s, ...) \</span></div><div class="line">    CCLog(<span class="string">"%s : %s"</span>,__FUNCTION__, CCString::createWithFormat(s, ##__VA_ARGS__)-&gt;getCString())</div><div class="line"></div><div class="line"><span class="comment">//这个宏定义要注意大小写, 会很容易和cocos2d::CCLog弄错, 因为代码提示的问题.</span></div><div class="line"><span class="comment">// cocos2d debug</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(COCOS2D_DEBUG) || COCOS2D_DEBUG == 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOG(...)       do &#123;&#125; while (0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGINFO(...)   do &#123;&#125; while (0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGERROR(...)  do &#123;&#125; while (0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGWARN(...)   do &#123;&#125; while (0)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> COCOS2D_DEBUG == 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOG(format, ...)      cocos2d::CCLog(format, ##__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGERROR(format,...)  cocos2d::CCLog(format, ##__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGINFO(format,...)   do &#123;&#125; while (0)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGWARN(...) __CCLOGWITHFUNCTION(__VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> COCOS2D_DEBUG &gt; 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOG(format, ...)      cocos2d::CCLog(format, ##__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGERROR(format,...)  cocos2d::CCLog(format, ##__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGINFO(format,...)   cocos2d::CCLog(format, ##__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CCLOGWARN(...) __CCLOGWITHFUNCTION(__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// COCOS2D_DEBUG</span></span></div><div class="line"></div><div class="line"><span class="comment">// Lua engine debug</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(COCOS2D_DEBUG) || COCOS2D_DEBUG == 0 || CC_LUA_ENGINE_DEBUG == 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LUALOG(...)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LUALOG(format, ...)     cocos2d::CCLog(format, ##__VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// Lua engine debug</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义废弃(deprecated)属性</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__GNUC__) &amp;&amp; ((__GNUC__ &gt;= 4) || ((__GNUC__ == 3) &amp;&amp; (__GNUC_MINOR__ &gt;= 1)))</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DEPRECATED_ATTRIBUTE __attribute__((deprecated))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">elif</span> _MSC_VER &gt;= 1400 <span class="comment">//vs 2005 or higher</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DEPRECATED_ATTRIBUTE __declspec(deprecated) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_DEPRECATED_ATTRIBUTE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;路径:&lt;code&gt;cocos2d-2.1beta3-x-2.1.0/cocos2dx/include/ccConfig.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;路径:&lt;code&gt;cocos2d-2.1beta3-x-2.1.0/cocos2dx/platform/mac/CCPlatformDefine.h&lt;/code&gt; //注意我是以mac平台研究的, 其他平台略有不同&lt;/li&gt;
&lt;li&gt;路径:&lt;code&gt;cocos2d-2.1beta3-x-2.1.0/cocos2dx/platform/CCPlatformMacros.h&lt;/code&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="Cocos2d-x 源代码研究" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/Cocos2d-x-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>2d-x深读1:CCPlatformConfig.h</title>
    <link href="http://www.young40.com/hexoblog/2012/12/17/2012-12-17-cocos2d-x-source-code-research-1-ccplatformconfig-dot-h/"/>
    <id>http://www.young40.com/hexoblog/2012/12/17/2012-12-17-cocos2d-x-source-code-research-1-ccplatformconfig-dot-h/</id>
    <published>2012-12-16T16:43:00.000Z</published>
    <updated>2018-02-07T15:53:53.686Z</updated>
    
    <content type="html"><![CDATA[<p>准备好好学习下Cocos2d-x(以下简称2dx), 我正在很努力地学习C++.</p>
<p>作为新手的我, 只能从最基本的代码读起. 就从<code>CCPlatformConfig.h</code>开始研究起吧, 这个文件没有include其他文件, 是最基本的文件.</p>
<p>研究成果见代码.</p>
<a id="more"></a>
<ul>
<li>版本:<code>cocos2d-2.1beta3-x-2.1.0</code></li>
<li>路径:<code>cocos2d-2.1beta3-x-2.1.0/cocos2dx/platform</code></li>
</ul>
<figure class="highlight cpp"><figcaption><span>CCPlatformConfig.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __CC_PLATFORM_CONFIG_H__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __CC_PLATFORM_CONFIG_H__</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  Config of cocos2d-x project, per target platform.</span></div><div class="line"><span class="comment">  */</span></div><div class="line"></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// pre configure</span></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line"><span class="comment">// define supported target platform macro which CC uses.</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_UNKNOWN            0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_IOS                1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_ANDROID            2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_WIN32              3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_MARMALADE          4</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_LINUX              5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_BADA               6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_BLACKBERRY         7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_PLATFORM_MAC                8</span></div><div class="line"></div><div class="line"><span class="comment">//默认是unknown的</span></div><div class="line"><span class="comment">// Determine target platform by compile environment macro.</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM             CC_PLATFORM_UNKNOWN</span></div><div class="line"></div><div class="line"><span class="comment">//CC_TARGET_OS_MAC等是从编译器的环境变量传入的. 参加各编译器或者IDE的预定义宏设置</span></div><div class="line"></div><div class="line"><span class="comment">// mac</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CC_TARGET_OS_MAC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM <span class="comment">//先取消定义</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM         CC_PLATFORM_MAC <span class="comment">//定义为MAC平台</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// iphone</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(CC_TARGET_OS_IPHONE)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM         CC_PLATFORM_IOS</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_SUPPORT_PVRTC <span class="comment">//支持prv压缩格式</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// android</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(ANDROID)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM         CC_PLATFORM_ANDROID</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// win32</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(WIN32) &amp;&amp; defined(_WINDOWS)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM         CC_PLATFORM_WIN32</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// linux</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(LINUX)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM         CC_PLATFORM_LINUX</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// marmalade</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(MARMALADE)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM         CC_PLATFORM_MARMALADE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// bada</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(SHP)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM         CC_PLATFORM_BADA</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">// qnx</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__QNX__)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">undef</span>  CC_TARGET_PLATFORM</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> CC_TARGET_PLATFORM     CC_PLATFORM_BLACKBERRY</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></div><div class="line"><span class="comment">// post configure</span></div><div class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line"><span class="comment">//不支持的平台,如果你在上面平台上遇到这个错误, 就可能是预定义变量, 或者编译器的环境变量设置错误</span></div><div class="line"><span class="comment">// check user set platform</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> ! CC_TARGET_PLATFORM</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">error</span>  <span class="meta-string">"Cannot recognize the target platform; are you targeting an unsupported platform?"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> (disable:4127) <span class="comment">//在win32平台不显示4127的warning, 这个具体用法可以参见</span></span></div><div class="line"><span class="comment">//http://blog.csdn.net/wowolook/article/details/8060334</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// CC_PLATFORM_WIN32</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// __CC_PLATFORM_CONFIG_H__</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备好好学习下Cocos2d-x(以下简称2dx), 我正在很努力地学习C++.&lt;/p&gt;
&lt;p&gt;作为新手的我, 只能从最基本的代码读起. 就从&lt;code&gt;CCPlatformConfig.h&lt;/code&gt;开始研究起吧, 这个文件没有include其他文件, 是最基本的文件.&lt;/p&gt;
&lt;p&gt;研究成果见代码.&lt;/p&gt;
    
    </summary>
    
      <category term="Cocos2d-x" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/"/>
    
      <category term="Cocos2d-x 源代码研究" scheme="http://www.young40.com/hexoblog/categories/Cocos2d-x/Cocos2d-x-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Cocos2d-x 真是太棒了</title>
    <link href="http://www.young40.com/hexoblog/2012/12/14/2012-12-14-cocos2d-x-is-awesome/"/>
    <id>http://www.young40.com/hexoblog/2012/12/14/2012-12-14-cocos2d-x-is-awesome/</id>
    <published>2012-12-13T19:07:00.000Z</published>
    <updated>2018-02-07T15:53:53.686Z</updated>
    
    <content type="html"><![CDATA[<p>大概从7月20号左右, 开始决定转向游戏, 首先接触了cocos2d-iphone, 学习了几天. 然后简单了解下就转向了cocos2d-x的学习.</p>
<p>2d-x最令人开心的就是跨平台特性, 经过这段时间的尝试, 感觉跨平台特性确实很强大. 我一般都是在Xcode写代码, 以os x平台做调试, 然后ios平台就不用提了, 直接编译即可.<br>Win和Android下面一般都是直接编译即可. 当然, 因为我对C++也是刚刚开始学习, 所以代码写的不标准, 那么在VS下面会无法通过编译. 主要是体现在一些需要将函数作为参数传入的地方,<br>比较会不容易弄清楚回调函数的参数. Xcode我通通将<code>CCObject *sender</code>作为参数, 而VS要求就非常严格了.</p>
<a id="more"></a>
<p>在Win上, 我使用VS2012编译, 能很好地支持我现在使用的C++11的一些特性, 比如类似于:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(<span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而在Android上, 因为一直没有更新NDK, 版本是r8b, 一直没有办法很好地编译这段代码. 更新为r8c之后,可以编译了.太好了, 我还是很喜欢C++11的这些新的语法糖.</p>
<p>默认是没有启用C++11特性的, 可以在<code>Android.mk</code>中, 添加<code>LOCAL_CPPFLAGS += -std=c++0x</code>来启用这个特性.</p>
<p>作为练习, 我将潘潘的j2me的坦克游戏简单移植到ios上, 简单实现以后, 我转向山寨@胡铠鸥 的PopCube(<a target="_blank" href="https://itunes.apple.com/cn/app/popcube!/id562905043?l=en&mt=8">原版下载</a>)了. 山寨的很彻底, 直接将图片,声音等资源从原版的ipa里面提取出来, 或许游戏资源的保护也应该做的更好一点.</p>
<p>接下来要转向继续开发坦克了, 希望一切顺利.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大概从7月20号左右, 开始决定转向游戏, 首先接触了cocos2d-iphone, 学习了几天. 然后简单了解下就转向了cocos2d-x的学习.&lt;/p&gt;
&lt;p&gt;2d-x最令人开心的就是跨平台特性, 经过这段时间的尝试, 感觉跨平台特性确实很强大. 我一般都是在Xcode写代码, 以os x平台做调试, 然后ios平台就不用提了, 直接编译即可.&lt;br&gt;Win和Android下面一般都是直接编译即可. 当然, 因为我对C++也是刚刚开始学习, 所以代码写的不标准, 那么在VS下面会无法通过编译. 主要是体现在一些需要将函数作为参数传入的地方,&lt;br&gt;比较会不容易弄清楚回调函数的参数. Xcode我通通将&lt;code&gt;CCObject *sender&lt;/code&gt;作为参数, 而VS要求就非常严格了.&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://www.young40.com/hexoblog/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
</feed>
