<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CocosBuilder | 喜气羊羊]]></title>
  <link href="http://young40.github.io/blog/categories/cocosbuilder/atom.xml" rel="self"/>
  <link href="http://young40.github.io/"/>
  <updated>2013-08-04T23:15:46+08:00</updated>
  <id>http://young40.github.io/</id>
  <author>
    <name><![CDATA[Young40]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocosBuilder 多分辨率]]></title>
    <link href="http://young40.github.io/blog/2013/08/01/cocosbuilder-multi-resolution/"/>
    <updated>2013-08-01T22:10:00+08:00</updated>
    <id>http://young40.github.io/blog/2013/08/01/cocosbuilder-multi-resolution</id>
    <content type="html"><![CDATA[<p>最近两个项目大量使用了CocosBuilder, 对于开发效率提高是巨大的. 一直计划写一篇博客谈谈CocosBuilder的多分辨率问题, 懒病加上一些疙疙瘩瘩的小事情, 拖延了一个多月, 才终于下定决定要尽快完成这篇博客.</p>

<p>在这篇文章中, 假定你比较熟悉CocosBuilder, 如果您还不是很熟悉CocosBuilder, 推荐您看下我的另外一篇文章. <a href="http://www.ityran.com/archives/2614">从零开始学习CocosBuilder</a> 我还是小菜鸟一个, 难免会有很多错误, 还望各位看客不吝赐教.</p>

<p>版本:</p>

<ul>
<li>Cocos2d-x 2.1.4 <a href="http://cocos2d-x.googlecode.com/files/cocos2d-x-2.1.4.zip">http://cocos2d-x.googlecode.com/files/cocos2d-x-2.1.4.zip</a></li>
<li>CocosBuilder 3.0alpha5 <a href="http://cocosbuilder.googlecode.com/files/CocosBuilder-3.0-alpha5.zip">http://cocosbuilder.googlecode.com/files/CocosBuilder-3.0-alpha5.zip</a></li>
</ul>


<p>最近几次Cocos2d-x和CocosBuilder(以下简写为2dx和ccb)都是联合发布的, 使用联合发布的版本会减少不兼容的可能.</p>

<!--more-->


<h2>基本概念</h2>

<p>我觉得在分辨率中重要的概念就是<code>位置</code>, <code>大小</code>, <code>节点关系</code>, 可以通过位置, 大小, 节点关系, 锚点等的合理组合, 最终达到理想的界面. 当然, 这需要ccb的使用者更多的思考. ^_&ndash;</p>

<h3>位置</h3>

<p><img src="/upload/2013-08/ccb-multi-r-01.png"></p>

<p>我们可以看到ccb中位置共有6种设置. 其中前四种设置方式代表了当前节点相对于其父节点的一个顶点的绝对位置.</p>

<p><img src="/upload/2013-08/ccb-multi-r-02.png"></p>

<p>如上图所示, 我们把<code>Click me</code> 按钮, 放在了距离其父节点右上角各50px.
这种位置的设置方式, 一般在节点需要放在父节点一个角上时很有用.</p>

<p><img src="/upload/2013-08/ccb-multi-r-03.png"></p>

<p>第5种设置方式表示当前节点的坐标由其父节点大小(宽width, 高height)的百分比组成, 其中父节点的左下角为原点.
如上图所示一个节点的父节点大小为200px*100px, 当前节点设置为(70%, 50%),那么当前节点距离其父节点左下角就应该是(140, 50).
百分比设置是位置设置中最常用的方式, 只有当百分比设置不适合时才去考虑其他设置方式.</p>

<p><img src="/upload/2013-08/ccb-multi-r-04.png"></p>

<p>第6种设置方式其实就是第1种设置方式的x,y值分别乘以一个全局缩放系数. 我们接下来就讲这个全局缩放系数, 这里先假设iphone下为1, iphone retina下为2.
如上图所示, 当前节点在iphone下距离其父节点左下角(50*1, 50*1), 在iphone retina下则就是(50*2, 50*2).</p>

<h3>全局缩放系数</h3>

<p>如果我们需要在屏幕上放一个CCLabelTTF, 字体大小设置为48, 分别放在480*320分辨率的iphone上和960*640分辨率的iphone retina上, 那么在iphone retina上显示会显得特别小.
这个时候我们就需要为游戏设置一个全局缩放系数, iphone下为1, iphone retina下为2, 那么ccb中设置字体大小为48, 在游戏中iphone上字体大小为48*1=48, iphone retina中字体大小为48*2=96.</p>

<p>你可以在设置位置, 内容大小, 缩放, 字体大小的时候, 找到这个选项. 都是一样的道理, 对应的数据都需要乘以全局缩放系数.</p>

<p>默认iphone(480*320)的全局缩放系数是1, iPad/iphone HD是2, iPad HD就是4了.
当然你可以自己设置一套全局缩放系数.</p>

<h3>内容大小</h3>

<p><img src="/upload/2013-08/ccb-multi-r-05.png"></p>

<p>只有如CCLayer, CCNode等几个节点可以设置内容大小. 可以有6个选项.</p>

<ul>
<li><ol>
<li>绝对大小</li>
</ol>
</li>
<li><ol>
<li>百分比相对大小, 相对于父节点的大小</li>
</ol>
</li>
<li><ol>
<li>相对父节点大小, 宽高设置为(100, 100), 那么该节点比其父节点宽高各小100px. 如果设置为(0, 0), 那么该节点就和父节点一样大小.</li>
</ol>
</li>
<li><ol>
<li>宽度百分比, 高度绝对大小.</li>
</ol>
</li>
<li><ol>
<li>宽度绝对大小, 高度百分比.</li>
</ol>
</li>
<li><ol>
<li>绝对大小, 会被乘以全局缩放系数.</li>
</ol>
</li>
</ul>


<h2>基本操作</h2>

<h3>多分辨率的文档</h3>

<p><img src="/upload/2013-08/ccb-multi-r-06.png"></p>

<p>从菜单中选择<code>Edit Resolutions...</code>, 打开编辑多分辨率对话框.</p>

<p><img src="/upload/2013-08/ccb-multi-r-07.png"></p>

<p>我们可以看到当前为iphone设置了(480*320)的分辨率, <code>Scale</code>这个选项就是我们上面提到的<code>全局缩放系数</code>, 值为1.
为iPad设置了(1024*768)的分辨率, 全局缩放系数为2.</p>

<p>我们可以点击<code>Add Predefined Resolution</code>, 来添加ccb预定义的分辨率. 比如添加一个iphone5的分辨率.
哦, 什么, 分辨率是568*320???? <code>需要注意的是，CocosBuilder的工作是基于点（Point）的，而不是像素的。</code>.</p>

<h4>Resolution Extension和resources-auto(插播)</h4>

<p>ccb中有一个resources-auto的重要概念, 你可以只提供一套资源, ccb通过全局缩放系数, 来为你自动生成不同分辨率的图片.
假设你为iPad retina(全局缩放系数为4)设计了一张100*100的图片.那么iphone会得到一张25*25的图片. iPad/iphone HD会得到一张50*50的图片.</p>

<p>说到资源解决方案, 首先要决定你想要支持的最大分辨率. 假设需要完美支持iPad HD, 就按2048*1536来做资源, 此时全局缩放系数为4.
把图片资源放置到resources-auto目录下, 那么ccb会帮我们自动缩放出其他需要的分辨率.
嗯, 还需要像下图一样设置, 告诉ccb需要从4x来设置. 从菜单的<code>Publish Settings...</code>打开.</p>

<p><img src="/upload/2013-08/ccb-multi-r-08.png"></p>

<p>如果是和背景无关的图片, 一般来讲自动缩放就可以胜任了.</p>

<p>如果需要在不同的分辨率下使用不同的图片, 比如一张背景图, iphone上使用960*640的图片, iPad上使用一张1024*768的图片.
那么可以在资源目录创建resources-iphone, resources-ipad目录, 然后在resources-iphone放置一张960*640分辨率的图片demo.png, 在resources-ipad目录下放置一张1024*768分辨率的图片demo.png. 要注意需要保持其文件名相同.</p>

<p>我们在ccb的工程目录下仍然只看到了一份demo.png, 不要着急, ccb会根据我们选用的不同的分辨率来给我们呈现不同的图片.</p>

<p>ok, 插播结束. 继续说我们的多分辨率文档.</p>

<p>其实, 我们可以给文档添加一个iphone hd, 以及正常iphone5尺寸的文档. 比较遗憾的是ccb不支持编辑<code>Resolution Extension</code>的列表.
而ipad和iphonehd的设置是在一起的, 并且也没有iphone5的Resolution可以设置.
所以我希望你没有需要必须要区分iphonehd/iphone5的需求, 在ccb里面是无法区分的. 令人欣慰的是, 我们还是可以在游戏里面区分他们.&ndash;_=</p>

<p>给文档添加的分辨率是可以自定义的, 名字, 宽, 高, 全局缩放系数. 所以我们还是可以创建全尺寸的iphonehd/iphone5的分辨率.</p>

<p><img src="/upload/2013-08/ccb-multi-r-09.png"></p>

<p>然后, 我们可以在ccb的菜单中找到切换多分辨率的选项, 这样就可以很方便的预览在各个分辨率下的效果.
注意他们的快捷键哦, 很有用哦.推荐在使用的时候, 经常在几个分辨率下切换查看效果是否正确理想.</p>

<p><img src="/upload/2013-08/ccb-multi-r-10.png"></p>

<h2>做一个ccb工程</h2>

<p>是时候做一个ccb的工程了, 不过我有点羞涩要给你展示我做的工程. 因为它实在太丑了, 还是来一张截图吧, 希望没有吓到你.&ndash;_=</p>

<p><img src="/upload/2013-08/ccb-multi-r-11.png"></p>

<h2>代码一下</h2>

<p>由于上面提到的一些限制, 只能基本上做到在ccb中做的, 就是我们在游戏中看到的.</p>

<p>ccb自带的帮助中<code>Setting scale and design size</code>, 需要做一些改进. 下面是我的代码.</p>

<p>``` cpp AppDelegate.cpp</p>

<p> //set the correct resource for CocosBuilder</p>

<pre><code>{
    CCSize sizeIphone = CCSizeMake(480, 320);
    CCSize sizeIphoneHD = CCSizeMake(960, 640);
    CCSize sizeIphone5 = CCSizeMake(1136, 640);
    CCSize sizeIpad = CCSizeMake(1024, 768);
    CCSize sizeIpadHD = CCSizeMake(2048, 1536);

    CCSize designSize = sizeIphoneHD;
    CCSize resourceSize = sizeIphoneHD;
    CCSize screenSize = CCEGLView::sharedOpenGLView()-&gt;getFrameSize();

    std::vector&lt;std::string&gt; searchPaths;
    std::vector&lt;std::string&gt; resDirOrders;

    TargetPlatform platform = CCApplication::sharedApplication()-&gt;getTargetPlatform();
    if (platform == kTargetIphone || platform == kTargetIpad)
    {
        CCFileUtils::sharedFileUtils()-&gt;setSearchPaths(searchPaths);

        if (screenSize.width &gt; 768)
        {
            resourceSize = sizeIpadHD;
            designSize = sizeIpadHD;
            resDirOrders.push_back("resources-ipadhd");

            CCBReader::setResolutionScale(4.0f);
        } else if (screenSize.width &gt; 640) {
            resourceSize = sizeIpad;
            designSize = resourceSize;
            resDirOrders.push_back("resources-ipad");
            resDirOrders.push_back("resources-iphonehd");

            CCBReader::setResolutionScale(2.0f);
        } else if (screenSize.width &gt; 480) {
            if (screenSize.height &gt; 960) {
                designSize = sizeIphone5;
            }
            else {
                designSize = sizeIphoneHD;
            }
            resourceSize = sizeIphoneHD;

            CCBReader::setResolutionScale(2.0f);

            resDirOrders.push_back("resources-iphonehd");
        } else {
            CCBReader::setResolutionScale(1.0f);

            designSize = sizeIphone;
            resourceSize = sizeIphone;

            resDirOrders.push_back("resources-iphone");
        }

        CCFileUtils::sharedFileUtils()-&gt;setSearchResolutionsOrder(resDirOrders);
    }

    pDirector-&gt;setContentScaleFactor(resourceSize.width / designSize.width);
    CCEGLView::sharedOpenGLView()-&gt;setDesignResolutionSize(
                                                           designSize.width, designSize.height,
                                                           kResolutionExactFit);
}

CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();

CCBReader *reader = new CCBReader(lib);

CCScene *scene = reader-&gt;createSceneWithNodeGraphFromFile("MainScene.ccbi");

pDirector-&gt;runWithScene(scene);
</code></pre>

<p>```
这里只支持了iOS, 如果需要支持Android的话, 可以挑选几个需要的分辨率, 邻近的分辨率坐下拉伸等策略.</p>

<p>运行下代码, 可以看下效果. 收工.</p>

<p>工程下载: <a href="http://pan.baidu.com/share/link?shareid=3612867199&amp;uk=2281999082">http://pan.baidu.com/share/link?shareid=3612867199&amp;uk=2281999082</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步CocosBuilder(4)[完结]]]></title>
    <link href="http://young40.github.io/blog/2012/12/29/cocosbuilder-step-by-step-part-four/"/>
    <updated>2012-12-29T10:54:00+08:00</updated>
    <id>http://young40.github.io/blog/2012/12/29/cocosbuilder-step-by-step-part-four</id>
    <content type="html"><![CDATA[<p>这一节也是很轻松, 主要是牵涉到Timeline的切换. 其他的都是简单的界面制作. <br/>
所以CocosBuilder的威力也体现在这里, 很少的代码就能驱动界面了.</p>

<p>我们这次先做<code>Particle System</code>, <code>Scroll View</code>, 最后以<code>Animations</code>收官.</p>

<h5>1</h5>

<p>制作<code>Particle System</code>和<code>Scroll View</code>的界面很简单,我们也是以程序为重点, 所以不再赘述. <br/>
只需要一句<code>this-&gt;openTest("ccb/Scroll.ccbi");</code>就可以调用新的界面了. <br/>
其他诸如绑定之类相信大家已经是轻车熟路啦.</p>

<!--more-->


<p><img src="/upload/2012-12/ccb-sbs-4-001.png">
<img src="/upload/2012-12/ccb-sbs-4-002.png"></p>

<h5>2</h5>

<p>好吧, 我承认一点, 制作<code>Animations</code>的界面的时候, 我直接复制了例子中的节点. <br/>
5个Timeline, 还是很复杂的, 应该是一个非常精细的工作. 向美术们致敬. <br/>
``` cpp AnimationsLayer.h
class AnimationsLayer
: public cocos2d::CCLayer
, public cocos2d::extension::CCBSelectorResolver
{
public:</p>

<pre><code>AnimationsLayer();
~AnimationsLayer();

CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(AnimationsLayer, create);

virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);    
void setAnimationManager(cocos2d::extension::CCBAnimationManager *pAnimationManager);

void onIdle(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
void onWave(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
void onJump(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
void onFunky(cocos2d::CCObject * pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
</code></pre>

<p>private:</p>

<pre><code>cocos2d::extension::CCBAnimationManager *mAnimationManager;
</code></pre>

<p>};</p>

<p>class AnimationsLayerLoader : public cocos2d::extension::CCNodeLoader
{
public:</p>

<pre><code>CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(AnimationsLayerLoader, loader);
</code></pre>

<p>protected:</p>

<pre><code>CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(AnimationsLayer);
</code></pre>

<p>};
<code>
</code> cpp AnimationsLayer.cpp
AnimationsLayer::AnimationsLayer()
: mAnimationManager(NULL)
{}</p>

<p>AnimationsLayer::~AnimationsLayer()
{</p>

<pre><code>CC_SAFE_RELEASE_NULL(mAnimationManager);
</code></pre>

<p>}</p>

<p>SEL_MenuHandler AnimationsLayer::onResolveCCBCCMenuItemSelector(cocos2d::CCObject <em>pTarget, const char </em>pSelectorName)
{</p>

<pre><code>return NULL;
</code></pre>

<p>}</p>

<p>SEL_CCControlHandler AnimationsLayer::onResolveCCBCCControlSelector(cocos2d::CCObject <em>pTarget, const char </em>pSelectorName)
{</p>

<pre><code>CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onIdle", AnimationsLayer::onIdle);
CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onJump", AnimationsLayer::onJump);
CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onWave", AnimationsLayer::onWave);
CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onFunky", AnimationsLayer::onFunky);

return NULL;
</code></pre>

<p>}</p>

<p>void AnimationsLayer::setAnimationManager(cocos2d::extension::CCBAnimationManager *pAnimationManager)
{</p>

<pre><code>CC_SAFE_RELEASE_NULL(mAnimationManager);
mAnimationManager = pAnimationManager;
CC_SAFE_RETAIN(mAnimationManager);
</code></pre>

<p>}</p>

<p>void AnimationsLayer::onIdle(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>this-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration("Idle", 0.3f);
</code></pre>

<p>}</p>

<p>void AnimationsLayer::onJump(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>this-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration("Jump", 0.3f);
</code></pre>

<p>}</p>

<p>void AnimationsLayer::onWave(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>this-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration("Wave", 0.3f);
</code></pre>

<p>}</p>

<p>void AnimationsLayer::onFunky(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>this-&gt;mAnimationManager-&gt;runAnimationsForSequenceNamedTweenDuration("Funky", 0.3f);
</code></pre>

<p>}
<code>
整个代码还是很简单. 和以前的几个例子稍微有点不同的是在调用的时候, 需要把`CCBReader`里面的`AnimationManger`传入.   
好, 还是看下调用的代码吧.   
</code> cpp MainScene.cpp
void MainScene::onAnimations(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>const char * pCCBFileName = "ccb/Animations.ccbi";
const char * pCCNodeName = "AnimationsLayer";
cocos2d::extension::CCNodeLoader * pCCNodeLoader = AnimationsLayerLoader::loader();

CCScene *scene = CCScene::create();

CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();

lib-&gt;registerCCNodeLoader("HeaderLayer", HeaderLayerLoader::loader());

if (pCCNodeName!=NULL &amp;&amp; pCCNodeLoader!=NULL)
{
    lib-&gt;registerCCNodeLoader(pCCNodeName, pCCNodeLoader);
}

CCBReader *reader = new CCBReader(lib);
CCNode *node = reader-&gt;readNodeGraphFromFile(pCCBFileName, this);
reader-&gt;autorelease();

if (node != NULL)
{
    //获取AnimationManger 并传给AnimationsLayer
    ((AnimationsLayer*)node) -&gt;setAnimationManager(reader-&gt;getAnimationManager());

    scene-&gt;addChild(node);
}

this-&gt;mTitleLabelTTF-&gt;setString(pCCBFileName);

CCDirector::sharedDirector()-&gt;pushScene(scene);
</code></pre>

<p>}
```</p>

<p><img src="/upload/2012-12/ccb-sbs-4-003.png"></p>

<h3>后记</h3>

<p>看到微博上@做游戏的老G 吐槽说CocosBuilder如何不好用, 学习难度比较大. 我也是很认可这一点. <br/>
但是只要是坚持把TestCpp例子完全读完了, 相信掌握CocosBuilder也是很快能够做到的. <br/>
既然你看完了这个教程. 相信你也已经能够很好地驾驭CocosBuilder. 关键还在实践呦!</p>

<p>微博上@Ghost_233 说了一个很好的思路, 直接从ccb文件中生成对应的C++类, 而且他还做了一些实践. <br/>
我暂时还没有研究他的代码, 不过肯定是可行. 这是一个很赞的思路. <br/>
希望大家能动手, 最好合作出来一个较好的工具来, 我想, 是不是集成到CocosBuilder会更好?</p>

<p>谢谢大家耐心看完我的文章.</p>

<p><hr />
代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> 

- 本文是系列文章, 请查看其他文章:
- [一步一步CocosBuilder(1)](http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/)
- [一步一步CocosBuilder(2)](http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/)
- [一步一步CocosBuilder(3)](http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/)
- [一步一步CocosBuilder(4)完结](http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/)

谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.

新浪微博: [@杨世玲](http://weibo.com/young40) [http://weibo.com/young40](http://weibo.com/young40)

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步CocosBuilder(3)]]></title>
    <link href="http://young40.github.io/blog/2012/12/28/cocosbuilder-step-by-step-part-three/"/>
    <updated>2012-12-28T00:54:00+08:00</updated>
    <id>http://young40.github.io/blog/2012/12/28/cocosbuilder-step-by-step-part-three</id>
    <content type="html"><![CDATA[<p>今天要说的内容比较轻松, 重要的知识点不多. <br/>
目标是实现<code>Menus &amp; Items</code>, <code>Sprites &amp; 9 Slice</code>, <code>Buttons &amp; Labels</code>.</p>

<h5>1</h5>

<p>首先我们在CocosBuilder中建立一个新的<code>Header.ccb</code>.具体请参见CocosBuilder的项目.   <br/>
在创建的时候,勾选<code>Full Sceen</code>, 并且将分辨率的<code>Height</code>都修改为40. <br/>
这个文件很简单, 根节点下只包含一个<code>CCLayerColor</code>,根节点的<code>Custom class</code>设置为<code>HeaderLayer</code>. <br/>
<code>CCLayerColor</code>下面包含一个<code>CCLabelTTF</code>和<code>CCMenu</code>. <br/>
<code>CCLabelTTF</code>的变量绑定为类型<code>Owner var</code>, 值为<code>mTitleLabelTTF</code>. <br/>
<code>CCMenu</code>包含一个<code>CCMenuItemImage</code>. <code>CCMenuItemImage</code>的<code>Selector</code>属性设置为<code>onBackClicked</code>.    <br/>
这个ccb作为一个公用的元素被其他ccb文件所引用. 是属于模块化的一个例子. <br/>
然后我们在Xcode中新建一个<code>HeaderLayer</code>类, 并同时声明一个<code>HeaderLayerLoader</code>类.</p>

<!--more-->


<p>``` cpp HeaderLayer.h
class HeaderLayer
: public cocos2d::CCLayer
, public cocos2d::extension::CCBSelectorResolver
{
public:</p>

<pre><code>CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(HeaderLayer, create);

virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

void onBackClicked(CCObject *pSender);
</code></pre>

<p>};</p>

<p>class HeaderLayerLoader : public cocos2d::extension::CCLayerLoader
{
public:</p>

<pre><code>CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(HeaderLayerLoader, loader);
</code></pre>

<p>protected:</p>

<pre><code>CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(HeaderLayer);
</code></pre>

<p>};
<code>
</code> cpp HeaderLayer.cpp
SEL_MenuHandler HeaderLayer::onResolveCCBCCMenuItemSelector(cocos2d::CCObject <em>pTarget, const char </em>pSelectorName)
{</p>

<pre><code>CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(this, "onBackClicked", HeaderLayer::onBackClicked);

return NULL;
</code></pre>

<p>}</p>

<p>SEL_CCControlHandler HeaderLayer::onResolveCCBCCControlSelector(cocos2d::CCObject <em>pTarget, const char </em>pSelectorName)
{</p>

<pre><code>return NULL;
</code></pre>

<p>}</p>

<p>void HeaderLayer::onBackClicked(cocos2d::CCObject *pSender)
{</p>

<pre><code>CCDirector::sharedDirector()-&gt;popScene();
</code></pre>

<p>}
```</p>

<h5>2</h5>

<p>在CocosBuilder中新建一个<code>Menus.ccb</code>, 并将根节点<code>Custom class</code>设置为<code>MenuLayer</code>. <br/>
再加入几个<code>CCMenuItemImage</code>, Selector分别设置为<code>onPressA</code>, <code>onPressB</code>, <code>onPressC</code>. <br/>
再加入一个<code>CCLabelBMFont</code>, 绑定<code>Doc root var</code>, 值为<code>mMessageLabelBMFont</code>. <br/>
在Xcode中新建一个类<code>MenuLayer</code>, 并且在<code>MenuLayer.h</code>中同时声明一个<code>MenuLayerLoader</code>类. <br/>
``` cpp MenuLayer.h
class MenuLayer
: public cocos2d::CCLayer
, public cocos2d::extension::CCBMemberVariableAssigner
, public cocos2d::extension::CCBSelectorResolver
{
public:</p>

<pre><code>MenuLayer();
~MenuLayer();

CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MenuLayer, create);

virtual bool onAssignCCBMemberVariable(CCObject* pTarget, const char* pMemberVariableName, CCNode* pNode);
virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(CCObject * pTarget, const char* pSelectorName);
virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(CCObject * pTarget, const char* pSelectorName);

void onPressA(cocos2d::CCObject *pSender);
void onPressB(cocos2d::CCObject *pSender);
void onPressC(cocos2d::CCObject *pSender);
</code></pre>

<p>private:</p>

<pre><code>cocos2d::CCLabelBMFont *mMessageLabelBMFont;
</code></pre>

<p>};</p>

<p>class MenuLayerLoader : public cocos2d::extension::CCNodeLoaderLibrary
{
public:</p>

<pre><code>CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MenuLayerLoader, loader);
</code></pre>

<p>protected:</p>

<pre><code>CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MenuLayer);    
</code></pre>

<p>};
<code>
</code> cpp MenuLayer.cpp
MenuLayer::MenuLayer()
: mMessageLabelBMFont(NULL)
{}</p>

<p>MenuLayer::~MenuLayer()
{</p>

<pre><code>CC_SAFE_DELETE(mMessageLabelBMFont);
</code></pre>

<p>}</p>

<p>bool MenuLayer::onAssignCCBMemberVariable(cocos2d::CCObject <em>pTarget, const char </em>pMemberVariableName, cocos2d::CCNode *pNode)
{</p>

<pre><code>CCB_MEMBERVARIABLEASSIGNER_GLUE(this, "mMessageLabelBMFont", CCLabelBMFont*, this-&gt;mMessageLabelBMFont);
return false;
</code></pre>

<p>}</p>

<p>SEL_MenuHandler MenuLayer::onResolveCCBCCMenuItemSelector(cocos2d::CCObject <em>pTarget, const char </em>pSelectorName)
{</p>

<pre><code>CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(this, "onPressA", MenuLayer::onPressA);
CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(this, "onPressB", MenuLayer::onPressB);
CCB_SELECTORRESOLVER_CCMENUITEM_GLUE(this, "onPressC_NO_Match", MenuLayer::onPressC);
</code></pre>

<p>   //注意这里, 我们给第三个绑定了一个不存在的SelectorName.</p>

<pre><code>return NULL;
</code></pre>

<p>}</p>

<p>SEL_CCControlHandler MenuLayer::onResolveCCBCCControlSelector(cocos2d::CCObject <em>pTarget, const char </em>pSelectorName)
{</p>

<pre><code>return NULL;
</code></pre>

<p>}</p>

<p>void MenuLayer::onPressA(cocos2d::CCObject *pSender)
{</p>

<pre><code>this-&gt;mMessageLabelBMFont-&gt;setString("A pressed.");
</code></pre>

<p>}</p>

<p>void MenuLayer::onPressB(cocos2d::CCObject *pSender)
{</p>

<pre><code>this-&gt;mMessageLabelBMFont-&gt;setString("B pressed.");
</code></pre>

<p>}</p>

<p>void MenuLayer::onPressC(cocos2d::CCObject *pSender)
{</p>

<pre><code>this-&gt;mMessageLabelBMFont-&gt;setString("C pressed.");
</code></pre>

<p>}
```</p>

<h5>3</h5>

<p>或许有点着急了吧, 我们如何让这个运行起来呢?  <br/>
首先给<code>MainScene</code>增加一个新函数的声明及定义, 还需要增加一个变量用于和<code>Header.ccb</code>中的<code>mTitleLabelTTF</code>绑定. <br/>
``` cpp MainScene.h
public:</p>

<pre><code>void openTest(const char * pCCBFileName, const char * pCCNodeName = NULL, cocos2d::extension::CCNodeLoader * pCCNodeLoader = NULL);
</code></pre>

<p>private:</p>

<pre><code>cocos2d::CCLabelTTF *mTitleLabelTTF;
</code></pre>

<p><code>
</code> cpp MainScene.cpp
void MainScene::openTest(const char * pCCBFileName, const char * pCCNodeName, cocos2d::extension::CCNodeLoader * pCCNodeLoader)
{</p>

<pre><code>CCScene *scene = CCScene::create();

CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();

lib-&gt;registerCCNodeLoader("HeaderLayer", HeaderLayerLoader::loader());
lib-&gt;registerCCNodeLoader(pCCNodeName, pCCNodeLoader);

CCBReader *reader = new CCBReader(lib);
CCNode *node = reader-&gt;readNodeGraphFromFile(pCCBFileName, this);
reader-&gt;autorelease();

if (node != NULL)
{
    scene-&gt;addChild(node);
}

this-&gt;mTitleLabelTTF-&gt;setString(pCCBFileName);

CCDirector::sharedDirector()-&gt;pushScene(scene);
</code></pre>

<p>}</p>

<p>bool MainScene::onAssignCCBMemberVariable(cocos2d::CCObject <em>pTarget, const char </em>pMemberVariableName, cocos2d::CCNode *pNode)
{</p>

<pre><code>CCB_MEMBERVARIABLEASSIGNER_GLUE(this, "mLabelText", CCLabelBMFont*, this-&gt;mLabelText);
CCB_MEMBERVARIABLEASSIGNER_GLUE(this, "mTitleLabelTTF", CCLabelTTF*, this-&gt;mTitleLabelTTF);

return false;
</code></pre>

<p>}
void MainScene::onButtonTest(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>this-&gt;openTest("ccb/Menus.ccbi", "MenuLayer", MenuLayerLoader::loader());
</code></pre>

<p>}
```</p>

<h5>4</h5>

<p><code>Sprites &amp; 9 Slice</code> 这个比较简单, 只是靠CocosBuilder就能完成任务了.</p>

<p><img src="/upload/2012-12/ccb-sbs-3-001.png"></p>

<p>我拼的不太好, 嘿嘿. 主要是着重代码, 并非设计, 漂亮的事情交给美术妹纸吧.</p>

<h5>5</h5>

<p><code>Buttons</code>这块主要是研究了<code>CCControlEvent</code>的各种情况. 我们只贴出核心代码. <br/>
``` cpp ButtonsLayer.cpp
void ButtonsLayer::onBtnClicked(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>switch (pCCControlEvent) {
    case CCControlEventTouchCancel:
        this-&gt;mEventLabelBMFont-&gt;setString("Cancel");
        break;
    case CCControlEventTouchDown:
        this-&gt;mEventLabelBMFont-&gt;setString("Touch Down");
        break;
    case CCControlEventTouchDragEnter:
        this-&gt;mEventLabelBMFont-&gt;setString("Drag Enter");
        break;
    case CCControlEventTouchDragExit:
        this-&gt;mEventLabelBMFont-&gt;setString("Drag Exit");
        break;
    case CCControlEventTouchDragInside:
        this-&gt;mEventLabelBMFont-&gt;setString("Drag Inside");
        break;
    case CCControlEventTouchDragOutside:
        this-&gt;mEventLabelBMFont-&gt;setString("Drag OutSide");
        break;
    case CCControlEventTouchUpInside:
        this-&gt;mEventLabelBMFont-&gt;setString("Up Inside");
        break;
    case CCControlEventTouchUpOutside:
        this-&gt;mEventLabelBMFont-&gt;setString("Up Outside");
        break;
    default://所有的定义都在上面了,TestCPP里面有句经典的点评, 想看的可以去翻一下.
        break;
}
</code></pre>

<p>}
```</p>

<p><img src="/upload/2012-12/ccb-sbs-3-002.png"></p>

<p><hr />
代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> 

- 本文是系列文章, 请查看其他文章:
- [一步一步CocosBuilder(1)](http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/)
- [一步一步CocosBuilder(2)](http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/)
- [一步一步CocosBuilder(3)](http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/)
- [一步一步CocosBuilder(4)完结](http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/)

谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.

新浪微博: [@杨世玲](http://weibo.com/young40) [http://weibo.com/young40](http://weibo.com/young40)

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步CocosBuilder(2)]]></title>
    <link href="http://young40.github.io/blog/2012/12/25/cocosbuilder-step-by-step-part-two/"/>
    <updated>2012-12-25T21:15:00+08:00</updated>
    <id>http://young40.github.io/blog/2012/12/25/cocosbuilder-step-by-step-part-two</id>
    <content type="html"><![CDATA[<p>上一篇我们建立了基本的工作环境, 这一次我们将基本实现例子中的HelloCocosBuilder.</p>

<h3>注意</h3>

<p>这两天纠结了一个问题. 我发现按照上次的配置来实现例子, 图片的大小怎么都和例子中的搭配不上. 后来动用CCB的源代码才看出端倪.
CCB v3.0加入了一个<code>resources-auto</code>的目录, 在发布的时候, 会自动缩放图片到对应的分辨率去. 因为图片的分辨率不合适(初步目测), 我们暂时不使用这功能. 请大家将上一篇文章
中的<code>resources-auto</code>文件夹下图片移到父目录<code>ccb-source</code>下面. 这个也解释了为什么<code>resources-auto</code>有非图片文件会导致CCB崩溃的原因.</p>

<!--more-->


<h5>1</h5>

<p>在CCB中打开MainScene.ccb,按<code>delete</code>键删除已经存在的几个Sprite.</p>

<h5>2</h5>

<p>添加一个<code>CCLayerGradient</code>到屏幕, 如果有问题的话, 可以参见下文档. 选中该节点, 我们可以在右侧看到他的属性, 常规的属性有比如位置, 大小, 锚点, 缩放, 旋转, 标签.
我们现在将其设置为大小为100%x100%的大小, 即满屏.</p>

<h5>3</h5>

<p>从左侧的文件中将<code>burst.png</code>拖入屏幕, 也可以使用工具栏添加然后再选择属性<code>Sprite frame</code>. <br/>
可以在节点树上双击该节点给其重命名, 我们将该节点命名为<code>CCSprite-burst</code>, 便于识别.<br/>
同样我们将其中心的设置到屏幕中心50%x50%, 缩放到2.5倍. <br/>
然后将<code>Blend src</code>, <code>Blend dst</code> 都设置为<code>One</code>, 好吧, 我暂时还不知道这个Blend是什么东西. 有知道的朋友不妨在评论中告诉我下, 或者参考资料. <br/>
大概是透明之类的东西吧.</p>

<h5>4</h5>

<p>然后我们再添加一个<code>CCParticleSystemQuad</code>粒子系统, 就是工具栏的那个Fx按钮. <br/>
将其位置设为最下居中, 在最下边<code>Particle Texture</code>设置为<code>ccbParticleSnow.png</code>效果,粒子系统还是很复杂的,估计能单独讲很久了. 这里就不再展开了.</p>

<h5>5</h5>

<p>将<code>logo-icon.png</code>拖入屏幕, 放在左上角合适位置, 并将其缩放到0.5. 节点重命名为<code>CCSprite-logo-icon</code>. <br/>
接下来就是动画的制作了.选中节点, 可以在菜单栏中<code>Animation =&gt; Insert KeyFrame</code>找到插入Framekey的各种快捷键.或许我们需要记熟他们. <br/>
首先让我们给<code>Timeline</code>设置下时间.双击时间可以编辑, 我们输入00:03:00, 就是3秒钟. 后面最后一位是帧数, 每秒30帧. <br/>
按下小三角可以展开当前节点的各种KeyFrame.  <br/>
拖动时间轴游标到1秒10帧,按下键盘<code>S</code>, 可以插入一个Scale类型的KeyFrame, 这时将当前节点Scale属性改为0. <br/>
然后继续拖动时间轴游标到2秒10帧, 再插入一个Scale KeyFrame, 并将Scale属性改为0.5. 这时点击播放按钮, 可以看到logo会蹦出来. <br/>
然后在紫色条上点击右键, 可以看到动作菜单, 我们选择<code>Bounce Out</code>, 这个时候再点击播放, 就可以看到logo蹦出的时候会有一个弹震的效果. <br/>
再来说明两点, 紫色条设置不同的动作, 可以看到上面会有一点阴影变化, 可以帮助我们快速确认设置的是什么动作. <br/>
如果不小心加多了KeyFrame, 那么可以点击选择KeyFrame, 然后点击<code>delete</code>键删除. <br/>
还有需要注意的是, 如果游标不在KeyFrame的点上, 那么此时无法编辑该节点属性, 移动到相应的KeyFrame点即可.</p>

<h5>6</h5>

<p>然后依法炮制, 将<code>logo.png</code>加入, 你可以给其设置想要的动画效果.</p>

<h5>7</h5>

<p>我们再添加一个<code>CCLabelBMFont</code>, 字体设置为<code>markerfelt24shadow.fnt</code>.Label的内容设置为"Hello Cocos2d-x!!!&ldquo;, 然后调整下位置, 换个喜欢的颜色.</p>

<h5>8</h5>

<p>我们再添加一个<code>CCControlButton</code>, Title设置为<code>Menu &amp; Item</code>.  <br/>
然后再分别设置State Normal, State Highlighted的Sprite frame为<code>btn-test-0.png</code> &nbsp; <code>btn-test-1.png</code>. <br/>
然后再设置下弹出效果. <br/>
将这个节点再复制5份, 对齐. 再分别设置下Title和弹出效果.设置对齐的时候可能会比较麻烦. 可以从标尺那里拉出几条线, 用于对齐.将该对齐线拉出显示区域即可删除. <br/>
<img src="/upload/2012-12/ccb-sbs-2-001.png"></p>

<h5>9</h5>

<p>最后将左右的两片叶子加入屏幕, 设置个动画即可.
然后将CCB项目发布一下, 在Xcode里面将项目运行一下. 就可以看到效果了.</p>

<h5>10</h5>

<p>我们接下来研究文件和类的绑定, 控件和变量的绑定, 以及事件和函数的绑定. <br/>
我们在CCB中将根节点的<code>Custom class</code>设置为<code>MainScene</code>.<br/>
我们在Xcode中打开<code>MainScene.h</code>, 给<code>MainScene</code>增加一个新的函数<code>CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MainScene, create);</code>. <br/>
最后的代码应该如下:
``` cpp MainScene
class MainScene
: public cocos2d::CCLayer
{
public:</p>

<pre><code>static cocos2d::CCScene* scene();

CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MainScene, create);
</code></pre>

<p>};
<code>
然后在`MainScene.h`中添加一个新类`MainSceneLayerLoader`代码如下:
</code> cpp MainSceneLayerLoader
class MainSceneLayerLoader : public cocos2d::extension::CCLayerLoader
{
public:</p>

<pre><code>CCB_STATIC_NEW_AUTORELEASE_OBJECT_METHOD(MainSceneLayerLoader, loader);
</code></pre>

<p>protected:</p>

<pre><code>CCB_VIRTUAL_NEW_AUTORELEASE_CREATECCNODE_METHOD(MainScene);
</code></pre>

<p>};
```
如果需要探究的话, 可以点开相应的函数定义. 也都是些简单的工作. <br/>
吐槽下, 这些名字真的是太难记. 可能需要多熟悉下, 搞清楚其原理了才好.</p>

<p>然后我们在<code>MainScene.cpp</code>中添加一行注册将ccb文件和类绑定起来.
<code>cpp MainScene::scene()
CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary();
lib-&gt;registerCCNodeLoader("MainScene", MainSceneLayerLoader::loader());
</code>
然后运行下, 确保没有错误. <br/>
这几行代码, 就是ccb文件和类绑定的最简模式了.</p>

<h5>11</h5>

<p>接着我们研究下控件和变量的绑定. <br/>
我们先在CCB中给<code>CCLabelBMFont</code>添加一个<code>Doc root var</code>类型的绑定<code>mLabelText</code>. <br/>
一个需要注意的地方就是CCB v3.0alpha似乎无法将<code>jsControlled</code>设置为<code>false</code>, 所以可能需要手工打开<code>MainScene.ccb</code>将其改为<code>false</code>. <br/>
``` xml MainScene.ccb</p>

<pre><code>&lt;key&gt;jsControlled&lt;/key&gt;
&lt;false/&gt;
</code></pre>

<p><code>
然后在Xcode中给`MainScene`增加一个从`CCBMemberVariableAssigner`的继承并实现其虚函数. 并且添加相应的变量.     
</code> cpp MainScene
class MainScene
: public cocos2d::CCLayer
, public cocos2d::extension::CCBMemberVariableAssigner
{
public:</p>

<pre><code>MainScene();
~MainScene();

static cocos2d::CCScene* scene();

CCB_STATIC_NEW_AUTORELEASE_OBJECT_WITH_INIT_METHOD(MainScene, create);

virtual bool onAssignCCBMemberVariable(cocos2d::CCObject* pTarget, const char* pMemberVariableName, cocos2d::CCNode* pNode);
</code></pre>

<p>private:</p>

<pre><code>cocos2d::CCLabelBMFont *mLabelText;
</code></pre>

<p>};
<code>
在`MainScene.cpp`中需要添加的是:
</code> cpp MainScene.cpp
MainScene::MainScene()//构造函数
: mLabelText(NULL)
{}</p>

<p>MainScene::~MainScene()//析构函数中释放内存不能忘
{</p>

<pre><code>CC_SAFE_DELETE(mLabelText);
</code></pre>

<p>}</p>

<p>bool MainScene::onAssignCCBMemberVariable(cocos2d::CCObject <em>pTarget, const char </em>pMemberVariableName, cocos2d::CCNode *pNode)
{</p>

<pre><code>CCB_MEMBERVARIABLEASSIGNER_GLUE(this, "mLabelText", CCLabelBMFont*, this-&gt;mLabelText);

return true;
</code></pre>

<p>}
<code>``
需要注意的是, 由于绑定较晚, 所以无法在init函数中使用变量</code>mLabelText`.</p>

<h5>12</h5>

<p>接下来我们研究事件和函数的绑定. <br/>
在CCB中找到<code>Menu &amp; Item</code>这个<code>CCControlButton</code>, 并设置其Selector为<code>onButtonTest</code>.Target设置为<code>Document root</code>. <br/>
这里需要注意的是, 设置值的时候,cocos2d-iphone似乎比较喜欢设置成<code>onButtonTest:</code>即多个<code>:</code>的形式. 我们在cocos2d-x中保持一致即可.不必加<code>:</code>.  <br/>
然后打开<code>MainScene.h</code>给<code>MainScene</code>再增加一个继承.
<code>cpp MainScene
class MainScene
: public cocos2d::CCLayer
, public cocos2d::extension::CCBMemberVariableAssigner
, public cocos2d::extension::CCBSelectorResolver
</code>
还有需要实现的函数
``` cpp MainScene
virtual cocos2d::SEL_MenuHandler onResolveCCBCCMenuItemSelector(cocos2d::CCObject * pTarget, const char<em> pSelectorName);
virtual cocos2d::extension::SEL_CCControlHandler onResolveCCBCCControlSelector(cocos2d::CCObject * pTarget, const char</em> pSelectorName);</p>

<p>void onButtonTest(cocos2d::CCObject <em>pSender, cocos2d::extension::CCControlEvent pCCControlEvent);
<code>
接下来是增加的函数的实现
</code> cpp MainScene.cpp
SEL_MenuHandler MainScene::onResolveCCBCCMenuItemSelector(cocos2d::CCObject </em>pTarget, const char *pSelectorName)
{</p>

<pre><code>return NULL;
</code></pre>

<p>}</p>

<p>SEL_CCControlHandler MainScene::onResolveCCBCCControlSelector(cocos2d::CCObject <em>pTarget, const char </em>pSelectorName)
{</p>

<pre><code>CCB_SELECTORRESOLVER_CCCONTROL_GLUE(this, "onButtonTest", MainScene::onButtonTest);

return NULL;
</code></pre>

<p>}</p>

<p>void MainScene::onButtonTest(cocos2d::CCObject *pSender, cocos2d::extension::CCControlEvent pCCControlEvent)
{</p>

<pre><code>this-&gt;mLabelText-&gt;setString("Hello CocosBuilder!!!");
</code></pre>

<p>}
<code>``
好了, 现在运行一下, 点击按钮, 就会看到</code>Hello Cocos2d-x!!!<code>变成了</code>Hello CocosBuilder!!!`了.</p>

<h5>13</h5>

<p>刚才我们提到变量绑定较init函数(更别提运行更早的构造函数了)更晚. 那么如何运行后就控制这些控件呢?  <br/>
方法当然是有, 我们需要增加一个<code>CCNodeLoaderListener</code>, 并实现其接口.新增代码如下:
``` cpp MainScene
, public cocos2d::extension::CCBSelectorResolver
, public cocos2d::extension::CCNodeLoaderListener
{</p>

<pre><code>///......代码省略鸟
virtual void onNodeLoaded(cocos2d::CCNode * pNode, cocos2d::extension::CCNodeLoader * pNodeLoader);
///......代码省略鸟
</code></pre>

<p>}
<code>
</code> cpp MainScene.cpp
void MainScene::onNodeLoaded(cocos2d::CCNode <em>pNode, cocos2d::extension::CCNodeLoader </em>pNodeLoader)
{</p>

<pre><code>this-&gt;mLabelText-&gt;setString("All Loaded");
</code></pre>

<p>}
<code>``
好啦, 运行就能看到</code>All Loaded`啦.</p>

<p><img src="/upload/2012-12/ccb-sbs-2-002.png"></p>

<p><hr />
代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> 

- 本文是系列文章, 请查看其他文章:
- [一步一步CocosBuilder(1)](http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/)
- [一步一步CocosBuilder(2)](http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/)
- [一步一步CocosBuilder(3)](http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/)
- [一步一步CocosBuilder(4)完结](http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/)

谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.

新浪微博: [@杨世玲](http://weibo.com/young40) [http://weibo.com/young40](http://weibo.com/young40)

</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步CocosBuilder(1)]]></title>
    <link href="http://young40.github.io/blog/2012/12/21/cocosbuilder-step-by-step-part-one/"/>
    <updated>2012-12-21T02:46:00+08:00</updated>
    <id>http://young40.github.io/blog/2012/12/21/cocosbuilder-step-by-step-part-one</id>
    <content type="html"><![CDATA[<p>CocosBuilder是Cocos2d系列的配套开源工具,最新的版本是3.0a, 也是我们这个系列文章所采用的版本.
CCB(CocosBuilder简称)目前只有OS X版本, 没有Windows的版本, 而且源代码也是用Objective-c, 估计移植难度会比较大.
我想这个也是其不够流行的原因吧.</p>

<p>如果你是CCB的熟客,那么你一定会记得CCB v2.x以前版本附带的例子. 而CCB v3.0采用了一个叫做CocosDragonJS的例子, 主要是展示CCB的Javascript的调用能力.
我虽然很喜欢JS, 但是正在学习2d-x, 又很想学好, 所以还是打好基础, 学好原滋原味的2d-x才好, 以后换用无论是Html5, 还是JS, Lua, 心里才会觉得踏实.
我无论C++,还是2d-x都是新手,又是第一次想正儿八经的写博客文章, 难免有很多错误, 还望各位看客踊跃拍砖.</p>

<p>这次的目的是基本实现原来v2.0中的例子.
我采用的2d-x的版本是:cocos2d-2.1beta3-x-2.1.0, 以OS X版本为主, 以sample目录下的HelloCpp为基础改进. CCB的版本是v3.0alpha0.</p>

<!--more-->


<p>本文的目标是基本实现将CCB整合进Mac OS X版本的项目中.</p>

<p>首先将2d-x源代码中sample目录下的HelloCpp目录重命名为TestCocosBuilder.并使用CocosBuilder创建新项目文件在其Resources文件夹中.
还需要将项目需要的图片资源放入Resources目录中. 具体可以参见我打包后的整体项目文件.还可以参见文末的目录树说明.</p>

<p>贴下Xcode项目的目录,如果添加extensions应该逐个添加,否则可能会遇到编译错误,有可能会把其他平台文件错误添加进来.</p>

<p><img src="/upload/2012-12/ccb-sbs-1-001.png"></p>

<p>做完这些准备工作后, 我们接下来按步来讲解.</p>

<p>1.首先编辑下<code>AppMacros.h</code>, 修改以下代码
<code>cpp AppMacros.h
static Resource smallResource  =  { cocos2d::CCSizeMake(480, 320),   "resources-iphone" };
static Resource mediumResource =  { cocos2d::CCSizeMake(1024, 768),  "resources-ipad"   };
static Resource largeResource  =  { cocos2d::CCSizeMake(2048, 1536), "resources-ipadhd" };
</code>
这一段主要是修改<code>HelloCpp</code>默认的资源目录, 配合CCB的发布路径.同时可以将原来几个目录中文件分别移入对应目录.
2.添加一个新类<code>MainScene</code>如下
``` cpp MainScene.h</p>

<h1>ifndef <strong>HelloCpp</strong>MainScene__</h1>

<h1>define <strong>HelloCpp</strong>MainScene__</h1>

<h1>include &ldquo;cocos2d.h&rdquo;</h1>

<h1>include &ldquo;cocos-ext.h&rdquo;</h1>

<p>class MainScene
: public cocos2d::CCLayer //从CCLayer派生
{
public:</p>

<pre><code>static cocos2d::CCScene* scene();
</code></pre>

<p>};</p>

<h1>endif /<em> defined(<strong>HelloCpp</strong>MainScene__) </em>/</h1>

<p>```</p>

<p>``` cpp MainScene.cpp</p>

<h1>include &ldquo;MainScene.h&rdquo;</h1>

<p>USING_NS_CC;
USING_NS_CC_EXT;</p>

<p>CCScene* MainScene::scene()
{</p>

<pre><code>CCScene *scene = CCScene::create();

CCNodeLoaderLibrary *lib = CCNodeLoaderLibrary::newDefaultCCNodeLoaderLibrary(); //生成一个默认的Node Loader

CCBReader *reader = new CCBReader(lib); //用node load lib 初始化一个ccb reader

CCNode *node = reader-&gt;readNodeGraphFromFile("MainScene.ccbi", scene); //从ccbi文件中加载node

reader-&gt;release(); //注意手动释放内存

if (node!=NULL)
{
    scene-&gt;addChild(node); //将node 添加到scene中
}

return scene;
</code></pre>

<p>}
<code>
3.修改`AppDelegate.cpp`中默认的启动scene
</code> cpp
CCScene *pScene = MainScene::scene(); //HelloWorld::scene();
```
4.注意CCB中发布选项的设置, 并发布一次.
<img src="/upload/2012-12/ccb-sbs-1-002.png"></p>

<p>5.如果没有错误的话, 你应该可以看到运行的效果.
<img src="/upload/2012-12/ccb-sbs-1-003.png"></p>

<p>Update:
@王哲Walzer 说,CCB大部分是美术在用, 在美术圈讨论, 所以程序圈较少看到人在讨论, 其实用的公司挺多的.
<a href="http://weibo.com/1702027805/zay18wLT5">http://weibo.com/1702027805/zay18wLT5</a></p>

<p><code>sh 目录结构
├── samples #目录结构和2d-x源代码保持一致,相信大家对2d-x源代码很熟悉了.
│   └── CocosBuilderTest #项目所在目录
│       ├── Classes #代码所在目录
│       ├── Resources #资源目录
│       │   ├── ccb #ccb发布后的目录
│       │   │   ├── HelloCocosBuilder.ccbi
│       │   │   ├── ...
│       │   │   └── TestSprites.ccbi
│       │   ├── ccbResources #发布后的默认ccb资源
│       │   ├── fonts
│       │   ├── resources-ipad #注意这几个目录, 稍后我们会提及
│       │   ├── resources-ipadhd
│       │   ├── resources-iphone
│       │   ├── resources-iphonehd
│       ├── ccb-source #ccb项目目录
│       │   ├── ccb
│       │   │   ├── HelloCocosBuilder.ccb #这几个是原CocosBuilder例子中的ccb, 直接复制过来了.
│       │   │   ├── ...
│       │   │   └── TestSprites.ccbi
│       │   ├── ccbResources
│       │   ├── resources-auto #CocosBuilderv3.0的资源目录, 似乎只能存放图片
│       │   │   ├── btn-a-0.png #否则会引起发布是造成CocosBuilder崩溃
│       │   │   ├── ...
│       │   │   └── scale-9-demo.png
│       │   ├── MainScene.ccb #默认生成的ccb, 我们这一次不对其更改
│       │   ├── MainScene.js
│       │   ├── animated-grossini.plist
│       │   ├── animated-grossini.png
│       │   ├── ccb-source.ccbproj
│       │   ├── comic\ andy.ttf
│       │   ├── grossini-generic.plist
│       │   ├── grossini-generic.png
│       │   ├── markerfelt24shadow.fnt
│       │   └── markerfelt24shadow.png
│       └── proj.mac
│           ├── HelloCpp.xcodeproj #项目文件, 暂时只支持mac os x
├── cocos2dx #2d-x文件
├── extensions #2d-x的扩展
│   ├── CCBReader #这个是解析CocosBuilder的主要CCBReader
│   │   ├── CCBAnimationManager.cpp
│   │   ├── CCBAnimationManager.h
│   │   ├── ...
│   │   └── CCSpriteLoader.h
│   ├── GUI
│   ├── network
│   ├── physics_nodes
│   ├── ExtensionMacros.h
│   └── cocos-ext.h
</code>
<hr />
代码打包下载:<a href="http://pan.baidu.com/share/link?shareid=158075&uk=2281999082" target="_blank">下载点</a> 

- 本文是系列文章, 请查看其他文章:
- [一步一步CocosBuilder(1)](http://young40.github.com/blog/2012/12/21/cocosbuilder-step-by-step-part-one/)
- [一步一步CocosBuilder(2)](http://young40.github.com/blog/2012/12/25/cocosbuilder-step-by-step-part-two/)
- [一步一步CocosBuilder(3)](http://young40.github.com/blog/2012/12/28/cocosbuilder-step-by-step-part-three/)
- [一步一步CocosBuilder(4)完结](http://young40.github.com/blog/2012/12/29/cocosbuilder-step-by-step-part-four/)

谢谢您耐心看完此文, 希望能对您有些帮助.如果有什么问题, 意见, 建议, 拍砖, 欢迎留言或者联系我.

新浪微博: [@杨世玲](http://weibo.com/young40) [http://weibo.com/young40](http://weibo.com/young40)

</p>
]]></content>
  </entry>
  
</feed>
